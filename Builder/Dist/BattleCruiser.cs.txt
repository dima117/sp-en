//1/7/2024 12:26:56 AM
public class RuntimeTracker{public int Capacity{get;set;}public double MaxRuntime{get;private set;}public double MaxInstructions{get;private set;}public double AverageRuntime{get;private set;}public double AverageInstructions{get;private set;}public double LastRuntime{get;private set;}public double LastInstructions{get;private set;}readonly Queue<double>runtimes=new Queue<double>();readonly Queue<double>instructions=new Queue<double>();readonly int instructionLimit;readonly MyGridProgram program;double runtimeSum=0;double instructionsSum=0;public RuntimeTracker(MyGridProgram program,int capacity=120){this.program=program;Capacity=capacity;instructionLimit=program.Runtime.MaxInstructionCount;}public void AddRuntime(){LastRuntime=program.Runtime.LastRunTimeMs;runtimes.Enqueue(LastRuntime);runtimeSum+=LastRuntime;if(runtimes.Count>Capacity){var firstRuntime=runtimes.Dequeue();runtimeSum-=firstRuntime;}AverageRuntime=runtimeSum/runtimes.Count();MaxRuntime=runtimes.Max();}public void AddInstructions(){LastInstructions=program.Runtime.CurrentInstructionCount;instructions.Enqueue(LastInstructions);instructionsSum+=LastInstructions;if(instructions.Count>Capacity){var firstInstructions=instructions.Dequeue();instructionsSum-=firstInstructions;}AverageInstructions=instructionsSum/instructions.Count();MaxInstructions=instructions.Max();}public override string ToString(){return$"Runtime: {LastRuntime:0.00}ms/{AverageRuntime:0.00}ms/{MaxRuntime:0.00}ms\n"+$"Instructions: {LastInstructions:0}/{AverageInstructions:0}/{MaxInstructions:0}\n"+$"Complexity: {AverageInstructions:0}/{instructionLimit:0} ({AverageInstructions/instructionLimit:0.00}%)";}}public class GravityDrive{private bool enabled;readonly IMyShipController controller;readonly List<IMyArtificialMassBlock>massBlocks=new List<IMyArtificialMassBlock>();readonly List<IMyGyro>gyroBlocks=new List<IMyGyro>();readonly List<IMyGravityGenerator>allGens=new List<IMyGravityGenerator>();readonly List<IMyGravityGenerator>upGens=new List<IMyGravityGenerator>();readonly List<IMyGravityGenerator>downGens=new List<IMyGravityGenerator>();readonly List<IMyGravityGenerator>leftGens=new List<IMyGravityGenerator>();readonly List<IMyGravityGenerator>rightGens=new List<IMyGravityGenerator>();readonly List<IMyGravityGenerator>fowardGens=new List<IMyGravityGenerator>();readonly List<IMyGravityGenerator>backwardGens=new List<IMyGravityGenerator>();const float GRAVITY_RATIO=9.8f;const float DAMPENERS_RATIO=0.1f;const float ROTATION_RATIO=10f;public GravityDrive(IMyShipController controller,IMyBlockGroup group){this.controller=controller;group.GetBlocksOfType(gyroBlocks,b=>b.IsSameConstructAs(controller));group.GetBlocksOfType(massBlocks,b=>b.IsSameConstructAs(controller));group.GetBlocksOfType(allGens,b=>b.IsSameConstructAs(controller));foreach(var block in allGens){if(controller.WorldMatrix.Forward==block.WorldMatrix.Down)fowardGens.Add(block);else if(controller.WorldMatrix.Backward==block.WorldMatrix.Down)backwardGens.Add(block);else if(controller.WorldMatrix.Left==block.WorldMatrix.Down)leftGens.Add(block);else if(controller.WorldMatrix.Right==block.WorldMatrix.Down)rightGens.Add(block);else if(controller.WorldMatrix.Up==block.WorldMatrix.Down)upGens.Add(block);else if(controller.WorldMatrix.Down==block.WorldMatrix.Down)downGens.Add(block);}}public bool Enabled{get{return enabled;}set{ToggleEngine(value);}}public bool DampenersOverride=>controller.DampenersOverride;public void Update(){MyShipVelocities velocities=controller.GetShipVelocities();UpdateGenerators(velocities.LinearVelocity);UpdateGyro(velocities.AngularVelocity);}private void UpdateGyro(Vector3D worldAngularVelocity){Vector3D rot=worldAngularVelocity*100*worldAngularVelocity.LengthSquared();rot+=controller.WorldMatrix.Right*controller.RotationIndicator.X*ROTATION_RATIO;rot+=controller.WorldMatrix.Up*controller.RotationIndicator.Y*ROTATION_RATIO;rot+=controller.WorldMatrix.Backward*controller.RollIndicator*ROTATION_RATIO;foreach(var gyro in gyroBlocks){gyro.Yaw=(float)rot.Dot(gyro.WorldMatrix.Up);gyro.Pitch=(float)rot.Dot(gyro.WorldMatrix.Right);gyro.Roll=(float)rot.Dot(gyro.WorldMatrix.Backward);}}private void UpdateGenerators(Vector3D worldVelocity){Vector3 input=controller.MoveIndicator;MatrixD matrix=MatrixD.Transpose(controller.WorldMatrix);Vector3 localVelocity=Vector3D.TransformNormal(worldVelocity,matrix);SetGravityAcceleration(input.X,localVelocity.X,rightGens,leftGens);SetGravityAcceleration(input.Y,localVelocity.Y,upGens,downGens);SetGravityAcceleration(input.Z,localVelocity.Z,backwardGens,fowardGens);}private bool IsZero(float value)=>Math.Abs(value)<0.00001;private void SetGravityAcceleration(float input,float velocity,IList<IMyGravityGenerator>positive,IList<IMyGravityGenerator>negative){var value=IsZero(input)&&DampenersOverride?-velocity*DAMPENERS_RATIO:input;var enabled=Enabled&&!IsZero(value);var acceleration=value*GRAVITY_RATIO;foreach(var x in positive){x.GravityAcceleration=acceleration;x.Enabled=enabled;}foreach(var x in negative){x.GravityAcceleration=-acceleration;x.Enabled=enabled;}}void ToggleEngine(bool enabled){this.enabled=enabled;foreach(IMyArtificialMassBlock b in massBlocks){b.Enabled=enabled;}foreach(IMyGravityGenerator b in allGens){b.Enabled=enabled;b.GravityAcceleration=0f;}foreach(IMyGyro b in gyroBlocks){b.GyroOverride=enabled;b.Yaw=0f;b.Pitch=0f;b.Roll=0f;}}}readonly RuntimeTracker tracker;readonly IMyTextSurface lcd;readonly GravityDrive drive;public Program(){tracker=new RuntimeTracker(this);lcd=Me.GetSurface(1);lcd.ContentType=ContentType.TEXT_AND_IMAGE;var control=GridTerminalSystem.GetBlockWithName("CONTROL")as IMyShipController;var group=GridTerminalSystem.GetBlockGroupWithName("GDRIVE");drive=new GravityDrive(control,group);Runtime.UpdateFrequency=UpdateFrequency.Update1;}public void Main(string argument,UpdateType updateSource){tracker.AddRuntime();switch(argument){case"on":drive.Enabled=true;break;case"off":drive.Enabled=false;break;default:drive.Update();break;}tracker.AddInstructions();lcd.WriteText(tracker.ToString());}