//10/16/2023 5:53:44 AM
public static class Helpers{public class InterceptResult{public Vector3D Position;public double TimeMs;}public static InterceptResult CalculateInterceptPoint(Vector3D ownPosition,double interceptSpeed,Vector3D targetPosition,Vector3D targetVelocity){Vector3D directionToTarget=Vector3D.Normalize(targetPosition-ownPosition);double targetSpeedlOrth=Vector3D.Dot(targetVelocity,directionToTarget);Vector3D targetVelOrth=directionToTarget*targetSpeedlOrth;Vector3D targetVelTang=targetVelocity-targetVelOrth;double targetSpeedlTang=targetVelTang.Length();if(targetSpeedlTang>=interceptSpeed){return null;}double missileSpeedTang=targetSpeedlTang;double missileSpeedOrth=Math.Sqrt(interceptSpeed*interceptSpeed-missileSpeedTang*missileSpeedTang);if(targetSpeedlOrth>=missileSpeedOrth){return null;}double timeS=Vector3D.Distance(ownPosition,targetPosition)/(missileSpeedOrth-targetSpeedlOrth);Vector3D point=targetPosition+targetVelocity*timeS;return new InterceptResult{Position=point,TimeMs=timeS*1000};}}public class DirectionController2{public const double MIN_SPEED=50;readonly IMyShipController remoteControl;readonly IEnumerable<IMyGyro>gyroList;readonly float factor;public DirectionController2(IMyShipController remoteControl,IEnumerable<IMyGyro>gyroList,float factor){this.remoteControl=remoteControl;this.gyroList=gyroList;this.factor=factor;}public void ICBM(Vector3D targetPos){var grav=remoteControl.GetNaturalGravity();if(!grav.IsZero()){var ownPos=remoteControl.GetPosition();var targetVector=targetPos-ownPos;Vector3D direction;if(targetVector.Length()>3500){direction=CompensateSideVelocity(grav,targetVector);}else{var velocity=remoteControl.GetShipVelocities().LinearVelocity;direction=CompensateSideVelocity(velocity,targetVector,1.5f);}var axis=GetAxis(remoteControl.WorldMatrix.Forward,direction);SetGyroByAxis(axis);}}public void KeepHorizon(){var grav=remoteControl.GetNaturalGravity();if(!grav.IsZero()){var axis=GetAxis(remoteControl.WorldMatrix.Down,grav);SetGyroByAxis(axis);}}public void Aim(Vector3D targetPos){var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var targetVector=CompensateSideVelocity(velocity,targetPos-ownPos);var axis=GetAxis(remoteControl.WorldMatrix.Forward,targetVector);SetGyroByAxis(axis);}public void Intercept(MyDetectedEntityInfo target){var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var ownSpeed=Math.Max(velocity.Length(),MIN_SPEED);var point=Helpers.CalculateInterceptPoint(ownPos,ownSpeed,target.Position,target.Velocity);var direction=point==null?new Vector3D(target.Velocity):(point.Position-ownPos);var targetVector=CompensateSideVelocity(velocity,direction);var axis=GetAxis(remoteControl.WorldMatrix.Forward,targetVector);SetGyroByAxis(axis);}public static Vector3D CompensateSideVelocity(Vector3D velocity,Vector3D targetVector,float ratio=1){var sideVelocity=Vector3D.Reject(velocity,Vector3D.Normalize(targetVector));var sameDirection=Vector3D.Dot(velocity,targetVector)>0;return sameDirection?velocity-(1+ratio)*sideVelocity:(1-ratio)*sideVelocity-velocity;}public static Vector3D GetAxis(Vector3D currentDirection,Vector3D targetDirection){var target=Vector3D.Normalize(targetDirection);var current=Vector3D.Normalize(currentDirection);var axis=target.Cross(current);if(target.Dot(current)<0){axis=Vector3D.Normalize(axis);}return axis;}public void SetGyroByAxis(Vector3D axis){foreach(var gyro in gyroList){gyro.Yaw=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Up));gyro.Pitch=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Right));gyro.Roll=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Backward));}}}public class Icbm{public readonly string Id=DateTime.UtcNow.Ticks.ToString();readonly int delay;readonly string name;readonly DirectionController2 tControl;readonly List<IMyGyro>listGyro=new List<IMyGyro>();readonly List<IMyThrust>listEngine=new List<IMyThrust>();readonly List<IMyGasGenerator>listH2Gen=new List<IMyGasGenerator>();readonly IMyRemoteControl tRemote;readonly IMyShipMergeBlock tClamp;DateTime startTime=DateTime.MaxValue;public Vector3D Position=>tRemote.GetPosition();public double Speed=>Started&&IsAlive?tRemote.GetShipSpeed():0;public bool IsReady=>listEngine.Any()&&listGyro.Any()&&tRemote!=null&&tClamp!=null;public bool Started{get;private set;}public Vector3D TargetPos{get;private set;}public bool IsAlive=>tRemote.IsFunctional&&listEngine.All(e=>e.IsFunctional&&e.CubeGrid.EntityId==tRemote.CubeGrid.EntityId)&&listGyro.All(g=>g.IsFunctional&&g.CubeGrid.EntityId==tRemote.CubeGrid.EntityId);public Icbm(IMyBlockGroup group,int delay=1000,float factor=4){name=group.Name;this.delay=delay;group.GetBlocksOfType(listGyro);group.GetBlocksOfType(listEngine);group.GetBlocksOfType(listH2Gen);var tmp=new List<IMyTerminalBlock>();group.GetBlocks(tmp);tClamp=tmp.FirstOrDefault(b=>b is IMyShipMergeBlock)as IMyShipMergeBlock;tRemote=tmp.FirstOrDefault(b=>b is IMyRemoteControl)as IMyRemoteControl;tControl=new DirectionController2(tRemote,listGyro,factor);}public void Start(Vector3D targetPos){TargetPos=targetPos;startTime=DateTime.UtcNow;tClamp.Enabled=false;listGyro.ForEach(g=>{g.Enabled=true;g.GyroOverride=true;});listH2Gen.ForEach(g=>{g.Enabled=true;});listEngine.ForEach(e=>{e.Enabled=true;e.ThrustOverridePercentage=1;});Started=true;}public void Update(){if((DateTime.UtcNow-startTime).TotalMilliseconds>delay){tControl.ICBM(TargetPos);}}public override string ToString(){var sb=new StringBuilder();var dist=(TargetPos-Position).Length();sb.AppendLine($"name: {name}");sb.AppendLine($"target: {TargetPos}");sb.AppendLine($"dist: {dist}m");if(IsAlive){if(Started){sb.AppendLine($"status: STARTED");}else if(IsReady){sb.AppendLine($"status: READY");}else{sb.AppendLine($"status: INVALID");}}else{sb.AppendLine($"status: DEAD");}return sb.ToString();}}Vector3D target;Icbm missile;public Program(){Runtime.UpdateFrequency=UpdateFrequency.Update1;}public void Main(string argument,UpdateType updateSource){switch(argument){case"init":var groups=new List<IMyBlockGroup>();GridTerminalSystem.GetBlockGroups(groups,g=>g.Name.StartsWith("ICBM"));var group=groups.FirstOrDefault();missile=group==null?null:new Icbm(group);break;case"start":if(missile!=null&&!target.IsZero()){missile.Start(target);}break;default:if(missile?.Started==true){missile.Update();}else{var text=Me.CustomData;Vector3D pos;if(!string.IsNullOrEmpty(text)&&Vector3D.TryParse(text,out pos)){target=pos;}}break;}var sb=new StringBuilder();sb.AppendLine(target.IsZero()?"NO TARGET":target.ToString());sb.AppendLine(missile==null?"NO MISSILE":missile.ToString());Me.GetSurface(0).WriteText(sb);}