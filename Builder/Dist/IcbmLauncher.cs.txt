//11/23/2023 1:01:14 AM
public static class Helpers{public class InterceptResult{public Vector3D Position;public double TimeMs;}public static InterceptResult CalculateInterceptPoint(Vector3D ownPosition,double interceptSpeed,Vector3D targetPosition,Vector3D targetVelocity){Vector3D directionToTarget=Vector3D.Normalize(targetPosition-ownPosition);double targetSpeedlOrth=Vector3D.Dot(targetVelocity,directionToTarget);Vector3D targetVelOrth=directionToTarget*targetSpeedlOrth;Vector3D targetVelTang=targetVelocity-targetVelOrth;double targetSpeedlTang=targetVelTang.Length();if(targetSpeedlTang>=interceptSpeed){return null;}double missileSpeedTang=targetSpeedlTang;double missileSpeedOrth=Math.Sqrt(interceptSpeed*interceptSpeed-missileSpeedTang*missileSpeedTang);if(targetSpeedlOrth>=missileSpeedOrth){return null;}double timeS=Vector3D.Distance(ownPosition,targetPosition)/(missileSpeedOrth-targetSpeedlOrth);Vector3D point=targetPosition+targetVelocity*timeS;return new InterceptResult{Position=point,TimeMs=timeS*1000};}}public class DirectionController2{public const double MIN_SPEED=50;readonly IMyShipController remoteControl;readonly IEnumerable<IMyGyro>gyroList;readonly float factor;public DirectionController2(IMyShipController remoteControl,IEnumerable<IMyGyro>gyroList,float factor){this.remoteControl=remoteControl;this.gyroList=gyroList;this.factor=factor;}public void ICBM(Vector3D targetPos){var grav=remoteControl.GetNaturalGravity();var ownPos=remoteControl.GetPosition();var targetVector=targetPos-ownPos;if(grav.IsZero()||targetVector.Length()<3500){Aim(targetPos);}else{Vector3D direction=CompensateSideVelocity(grav,targetVector);var axis=GetAxis(remoteControl.WorldMatrix.Forward,direction);SetGyroByAxis(axis);}}public void KeepHorizon(){var grav=remoteControl.GetNaturalGravity();if(!grav.IsZero()){var axis=GetAxis(remoteControl.WorldMatrix.Down,grav);SetGyroByAxis(axis);}}public void Aim(Vector3D targetPos){var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var targetVector=CompensateSideVelocity(velocity,targetPos-ownPos);var axis=GetAxis(remoteControl.WorldMatrix.Forward,targetVector);SetGyroByAxis(axis);}public void Intercept(MyDetectedEntityInfo target){var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var ownSpeed=Math.Max(velocity.Length(),MIN_SPEED);var point=Helpers.CalculateInterceptPoint(ownPos,ownSpeed,target.Position,target.Velocity);var direction=point==null?new Vector3D(target.Velocity):(point.Position-ownPos);var targetVector=CompensateSideVelocity(velocity,direction);var axis=GetAxis(remoteControl.WorldMatrix.Forward,targetVector);SetGyroByAxis(axis);}public static Vector3D CompensateSideVelocity(Vector3D velocity,Vector3D targetVector,float ratio=1){var sideVelocity=Vector3D.Reject(velocity,Vector3D.Normalize(targetVector));var sameDirection=Vector3D.Dot(velocity,targetVector)>0;return sameDirection?velocity-(1+ratio)*sideVelocity:(1-ratio)*sideVelocity-velocity;}public static Vector3D GetAxis(Vector3D currentDirection,Vector3D targetDirection){var target=Vector3D.Normalize(targetDirection);var current=Vector3D.Normalize(currentDirection);var axis=target.Cross(current);if(target.Dot(current)<0){axis=Vector3D.Normalize(axis);}return axis;}public void SetGyroByAxis(Vector3D axis){foreach(var gyro in gyroList){gyro.Yaw=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Up));gyro.Pitch=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Right));gyro.Roll=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Backward));}}}public enum MissileState{Ready,Started,Dead,Invalid}public class Icbm{public readonly string Id=DateTime.UtcNow.Ticks.ToString();readonly int delay;readonly string name;readonly DirectionController2 tControl;readonly List<IMyGyro>listGyro=new List<IMyGyro>();readonly List<IMyThrust>listEngine=new List<IMyThrust>();readonly List<IMyGasGenerator>listH2Gen=new List<IMyGasGenerator>();readonly IMyRemoteControl tRemote;readonly IMyShipMergeBlock tClamp;DateTime startTime=DateTime.MaxValue;MissileState State=>!IsAlive?MissileState.Dead:Started?MissileState.Started:IsReady?MissileState.Ready:MissileState.Invalid;public Vector3D Position=>tRemote.GetPosition();public double Speed=>Started&&IsAlive?tRemote.GetShipSpeed():0;public bool IsReady=>listEngine.Any()&&listGyro.Any()&&tRemote!=null&&tClamp!=null;public bool Started{get;private set;}public Vector3D TargetPos{get;private set;}public long EntityId=>(tRemote?.EntityId).GetValueOrDefault();public bool IsAlive=>tRemote.IsFunctional&&listEngine.All(e=>e.IsFunctional&&e.CubeGrid.EntityId==tRemote.CubeGrid.EntityId)&&listGyro.All(g=>g.IsFunctional&&g.CubeGrid.EntityId==tRemote.CubeGrid.EntityId);public Icbm(IMyBlockGroup group,int delay=3000,float factor=4){name=group.Name;this.delay=delay;group.GetBlocksOfType(listGyro);group.GetBlocksOfType(listEngine);group.GetBlocksOfType(listH2Gen);var tmp=new List<IMyTerminalBlock>();group.GetBlocks(tmp);tClamp=tmp.FirstOrDefault(b=>b is IMyShipMergeBlock)as IMyShipMergeBlock;tRemote=tmp.FirstOrDefault(b=>b is IMyRemoteControl)as IMyRemoteControl;tControl=new DirectionController2(tRemote,listGyro,factor);}public void Start(Vector3D targetPos){TargetPos=targetPos;startTime=DateTime.UtcNow;tClamp.Enabled=false;listGyro.ForEach(g=>{g.Enabled=true;g.GyroOverride=true;});listH2Gen.ForEach(g=>{g.Enabled=true;});listEngine.ForEach(e=>{e.Enabled=true;e.ThrustOverridePercentage=1;});Started=true;}public void Update(){if((DateTime.UtcNow-startTime).TotalMilliseconds>delay){tControl.ICBM(TargetPos);}}public override string ToString(){var dist=(TargetPos-Position).Length();return State==MissileState.Started?$"{name}: {State} => {dist}m":$"{name}: {State}";}}public class BlockArray<T>where T:class,IMyTerminalBlock{MyGridProgram program;Action<T>init;private List<T>list=new List<T>();private int index=0;public int Count=>list.Count;public BlockArray(MyGridProgram program,Action<T>init=null){this.program=program;this.init=init;UpdateBlocks();}public void UpdateBlocks(){list=new List<T>();index=0;var tmp=new List<IMyTerminalBlock>();program.GridTerminalSystem.GetBlocks(tmp);foreach(var x in tmp){var block=x as T;if(block!=null){list.Add(block);init(block);}}}public void ForEach(Action<T>fn=null){if(fn!=null){list.ForEach(fn);}}public T GetNext(Func<T,bool>filter=null){for(var count=0;count<list.Count;count++){index++;if(index>=list.Count){index=0;}T block=list[index];if(filter==null||filter(block)){return block;}}return null;}}public class Transmitter{public const string TAG_ICBM_STATE="TAG_ICBM_STATE";public const string TAG_TARGET_POSITION="TAG_TARGET_POSITION";public const string TAG_ICBM_CONNECT="TAG_ICBM_CONNECT";const int TIMEOUT_SWITCH_ON=200;const int TIMEOUT_SWITCH_OFF=200;public const int MIN_RANGE=10;public const int MAX_RANGE=50000;private DateTime?timestampSwitchOn=null;private DateTime?timestampSwitchOff=null;private int seq=0;private BlockArray<IMyRadioAntenna>blocks;private IMyIntergridCommunicationSystem igc;private Dictionary<string,Action<MyIGCMessage>>actions=new Dictionary<string,Action<MyIGCMessage>>();private Dictionary<string,IMyBroadcastListener>listeners=new Dictionary<string,IMyBroadcastListener>();private readonly Queue<Action>messageQueue=new Queue<Action>();public Transmitter(MyGridProgram program){igc=program.IGC;blocks=new BlockArray<IMyRadioAntenna>(program,a=>{a.Radius=MIN_RANGE;a.EnableBroadcasting=true;a.Enabled=true;});igc.UnicastListener.SetMessageCallback();}public void Subscribe(string tag,Action<MyIGCMessage>fn,bool broadcast=false){if(broadcast){var listener=igc.RegisterBroadcastListener(tag);var listenerId=(DateTime.UtcNow.Ticks-(seq++)).ToString();listener.SetMessageCallback(listenerId);listeners[listenerId]=listener;}actions[tag]=fn;}public void Send<T>(string tag,T data,long?destination=null){if(destination.HasValue){messageQueue.Enqueue(()=>igc.SendUnicastMessage(destination.Value,tag,data));}else{messageQueue.Enqueue(()=>igc.SendBroadcastMessage(tag,data));}if(!timestampSwitchOn.HasValue){if(timestampSwitchOff.HasValue){timestampSwitchOff=DateTime.UtcNow.AddMilliseconds(TIMEOUT_SWITCH_OFF);}else{blocks.ForEach(a=>a.Radius=MAX_RANGE);timestampSwitchOn=DateTime.UtcNow.AddMilliseconds(TIMEOUT_SWITCH_ON);}}}public void Update(string listenerId,UpdateType updateSource){switch(updateSource){case UpdateType.IGC:IMyMessageProvider listener=igc.UnicastListener;if(listeners.ContainsKey(listenerId)){listener=listeners[listenerId];}while(listener.HasPendingMessage){var message=listener.AcceptMessage();if(actions.ContainsKey(message.Tag)){actions[message.Tag](message);}}break;case UpdateType.Update1:case UpdateType.Update10:case UpdateType.Update100:var now=DateTime.UtcNow;if(timestampSwitchOn.HasValue&&now>timestampSwitchOn){timestampSwitchOn=null;timestampSwitchOff=now.AddMilliseconds(TIMEOUT_SWITCH_OFF);while(messageQueue.Any()){messageQueue.Dequeue()();}}else if(timestampSwitchOff.HasValue&&now>timestampSwitchOff){timestampSwitchOff=null;blocks.ForEach(a=>a.Radius=MIN_RANGE);}break;}}}IMyTextSurface lcd=>Me.GetSurface(0);Transmitter tsm;HashSet<long>spotters=new HashSet<long>();List<Icbm>missiles=new List<Icbm>();DateTime nextUpdate=DateTime.MinValue;public Program(){tsm=new Transmitter(this);tsm.Subscribe(Transmitter.TAG_ICBM_CONNECT,Connect,true);tsm.Subscribe(Transmitter.TAG_TARGET_POSITION,Launch,true);Runtime.UpdateFrequency=UpdateFrequency.Update1;}private void Connect(MyIGCMessage message){spotters.Add(message.Source);nextUpdate=DateTime.MinValue;}private void Launch(MyIGCMessage message){StartNextMissile(message.Data);nextUpdate=DateTime.MinValue;}public void Main(string argument,UpdateType updateSource){tsm.Update(argument,updateSource);switch(argument){case"init":var ids=new HashSet<long>(missiles.Select(t=>t.EntityId));var groups=new List<IMyBlockGroup>();GridTerminalSystem.GetBlockGroups(groups,g=>g.Name.StartsWith("ICBM"));missiles.AddRange(groups.Select(gr=>new Icbm(gr)).Where(t=>!ids.Contains(t.EntityId)));missiles.RemoveAll(m=>!m.IsAlive);break;case"start":StartNextMissile(Me.CustomData);break;}foreach(var m in missiles.Where(m=>m.IsAlive&&m.Started)){m.Update();}var state=string.Join("\n",missiles);lcd.WriteText($"{spotters.Count}\n"+state);var now=DateTime.UtcNow;if(now>nextUpdate){foreach(var address in spotters){tsm.Send(Transmitter.TAG_ICBM_STATE,state,address);}nextUpdate=now.AddSeconds(30);}}private bool StartNextMissile(object value){Vector3D target;if(Vector3D.TryParse(value.ToString(),out target)){var missile=missiles.FirstOrDefault(m=>m.IsReady&&!m.Started);if(missile!=null&&!target.IsZero()){missile.Start(target);return true;}}return false;}