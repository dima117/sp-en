//2/9/2024 1:25:38 AM
public class RuntimeTracker{public int Capacity{get;set;}public double MaxRuntime{get;private set;}public double MaxInstructions{get;private set;}public double AverageRuntime{get;private set;}public double AverageInstructions{get;private set;}public double LastRuntime{get;private set;}public double LastInstructions{get;private set;}readonly Queue<double>runtimes=new Queue<double>();readonly Queue<double>instructions=new Queue<double>();readonly int instructionLimit;readonly MyGridProgram program;double runtimeSum=0;double instructionsSum=0;public RuntimeTracker(MyGridProgram program,int capacity=120){this.program=program;Capacity=capacity;instructionLimit=program.Runtime.MaxInstructionCount;}public void AddRuntime(){LastRuntime=program.Runtime.LastRunTimeMs;runtimes.Enqueue(LastRuntime);runtimeSum+=LastRuntime;if(runtimes.Count>Capacity){var firstRuntime=runtimes.Dequeue();runtimeSum-=firstRuntime;}AverageRuntime=runtimeSum/runtimes.Count();MaxRuntime=runtimes.Max();}public void AddInstructions(){LastInstructions=program.Runtime.CurrentInstructionCount;instructions.Enqueue(LastInstructions);instructionsSum+=LastInstructions;if(instructions.Count>Capacity){var firstInstructions=instructions.Dequeue();instructionsSum-=firstInstructions;}AverageInstructions=instructionsSum/instructions.Count();MaxInstructions=instructions.Max();}public override string ToString(){return$"Runtime: {LastRuntime:0.00}ms/{AverageRuntime:0.00}ms/{MaxRuntime:0.00}ms\n"+$"Instructions: {LastInstructions:0}/{AverageInstructions:0}/{MaxInstructions:0}\n"+$"Complexity: {AverageInstructions:0}/{instructionLimit:0} ({AverageInstructions/instructionLimit:0.00}%)";}}public class Grid{readonly IMyGridTerminalSystem system;public Grid(IMyGridTerminalSystem system){this.system=system;}public T[]GetBlocksOfType<T>(Func<T,bool>filter=null)where T:class,IMyTerminalBlock{var list=new List<T>();system.GetBlocksOfType(list,filter);return list.ToArray();}public T GetBlockWithName<T>(string name)where T:class,IMyTerminalBlock{return system.GetBlockWithName(name)as T;}public T GetByFilterOrAny<T>(Func<T,bool>filter=null,Action<T>init=null)where T:class,IMyTerminalBlock{var all=new List<T>();system.GetBlocksOfType(all,filter);T res=null;if(filter!=null){res=all.FirstOrDefault(filter);}if(res==null){res=all.FirstOrDefault();}if(res!=null&&init!=null){init(res);}return res;}}public class MsgTags{public const string REMOTE_LOCK_TARGET="@REMOTE_LOCK_TARGET";public const string REMOTE_START="@REMOTE_START";public const string GET_STATUS="@GET_STATUS";public const string REMOTE_STATUS="@REMOTE_STATUS";public const string SYNC_TARGETS="@SYNC_TARGETS";}public class Transmitter{private int seq=0;protected IMyIntergridCommunicationSystem igc;protected IMyRadioAntenna[]antennas;private Dictionary<string,Action<MyIGCMessage>>actions=new Dictionary<string,Action<MyIGCMessage>>();private Dictionary<string,IMyBroadcastListener>listeners=new Dictionary<string,IMyBroadcastListener>();public Transmitter(IMyIntergridCommunicationSystem igc,IMyRadioAntenna[]antennas){this.igc=igc;igc.UnicastListener.SetMessageCallback();this.antennas=antennas;antennas.ForEach(a=>{a.EnableBroadcasting=true;a.Enabled=true;});}public void Subscribe(string tag,Action<MyIGCMessage>fn,bool broadcast=false){if(broadcast){var listener=igc.RegisterBroadcastListener(tag);var listenerId=(DateTime.UtcNow.Ticks-(seq++)).ToString();listener.SetMessageCallback(listenerId);listeners[listenerId]=listener;}actions[tag]=fn;}public virtual void Send(string tag,string data="",long?destination=null){if(destination.HasValue){igc.SendUnicastMessage(destination.Value,tag,data);}else{igc.SendBroadcastMessage(tag,data);}}public virtual void Update(string listenerId,UpdateType updateSource){if(updateSource==UpdateType.IGC){IMyMessageProvider listener=igc.UnicastListener;if(listeners.ContainsKey(listenerId)){listener=listeners[listenerId];}while(listener.HasPendingMessage){var message=listener.AcceptMessage();if(actions.ContainsKey(message.Tag)){actions[message.Tag](message);}}}}}public class Transmitter2:Transmitter{const int TIMEOUT_SWITCH_ON=200;const int TIMEOUT_SWITCH_OFF=200;public const int MIN_RANGE=10;public const int MAX_RANGE=50000;private DateTime?timestampSwitchOn=null;private DateTime?timestampSwitchOff=null;private readonly Queue<Action>messageQueue=new Queue<Action>();public Transmitter2(IMyIntergridCommunicationSystem igc,IMyRadioAntenna[]antennas):base(igc,antennas){antennas.ForEach(a=>{a.Radius=MIN_RANGE;});}public override void Send(string tag,string data="",long?destination=null){if(destination.HasValue){messageQueue.Enqueue(()=>igc.SendUnicastMessage(destination.Value,tag,data));}else{messageQueue.Enqueue(()=>igc.SendBroadcastMessage(tag,data));}if(!timestampSwitchOn.HasValue){if(timestampSwitchOff.HasValue){timestampSwitchOff=DateTime.UtcNow.AddMilliseconds(TIMEOUT_SWITCH_OFF);}else{antennas.ForEach(a=>a.Radius=MAX_RANGE);timestampSwitchOn=DateTime.UtcNow.AddMilliseconds(TIMEOUT_SWITCH_ON);}}}public override void Update(string listenerId,UpdateType updateSource){base.Update(listenerId,updateSource);switch(updateSource){case UpdateType.Update1:case UpdateType.Update10:case UpdateType.Update100:var now=DateTime.UtcNow;if(timestampSwitchOn.HasValue&&now>timestampSwitchOn){timestampSwitchOn=null;timestampSwitchOff=now.AddMilliseconds(TIMEOUT_SWITCH_OFF);while(messageQueue.Any()){messageQueue.Dequeue()();}}else if(timestampSwitchOff.HasValue&&now>timestampSwitchOff){timestampSwitchOff=null;antennas.ForEach(a=>a.Radius=MIN_RANGE);}break;}}}public class BlockArray<T>where T:class,IMyTerminalBlock{MyGridProgram program;Action<T>init;private List<T>list=new List<T>();private int index=0;public int Count=>list.Count;public T1 Aggregate<T1>(T1 a,Func<T1,T,T1>fn)=>list.Aggregate(a,fn);public BlockArray(MyGridProgram program,Action<T>init=null){this.program=program;this.init=init;UpdateBlocks();}public void UpdateBlocks(){index=0;list=new List<T>();program.GridTerminalSystem.GetBlocksOfType(list);list.ForEach(init);}public void ForEach(Action<T>fn=null){if(fn!=null){list.ForEach(fn);}}public T GetNext(Func<T,bool>filter=null){for(var count=0;count<list.Count;count++){index++;if(index>=list.Count){index=0;}T block=list[index];if(filter==null||filter(block)){return block;}}return null;}}public struct TargetInfo{public MyDetectedEntityInfo Entity{get;private set;}public DateTime Timestamp{get;private set;}public DateTime NextScan{get;private set;}public Vector3D HitPosRelative{get;private set;}public Vector3D GetHitPosWorld(){return Entity.Position+Vector3D.Transform(HitPosRelative,Entity.Orientation);}public TargetInfo(MyDetectedEntityInfo entity=default(MyDetectedEntityInfo),DateTime timestamp=default(DateTime),DateTime nextScan=default(DateTime),Vector3D hitPosRelative=default(Vector3D)){Entity=entity;Timestamp=timestamp;NextScan=nextScan;HitPosRelative=hitPosRelative;}public TargetInfo Update(MyDetectedEntityInfo entity,DateTime timestamp,DateTime nextScan){Entity=entity;Timestamp=timestamp;NextScan=nextScan;return this;}public void UpdateNextScan(DateTime nextScan){NextScan=nextScan;}public static TargetInfo CreateTargetInfo(MyDetectedEntityInfo entity,Vector3D camPos,DateTime timestamp,DateTime?nextScan=null){var relativeHitPos=default(Vector3D);if(entity.HitPosition.HasValue){var hitPos=entity.HitPosition.Value;var correctedHitPos=hitPos+Vector3D.Normalize(hitPos-camPos);var invertedMatrix=MatrixD.Invert(entity.Orientation);relativeHitPos=Vector3D.Transform(correctedHitPos-entity.Position,invertedMatrix);}return new TargetInfo(entity,timestamp,nextScan??timestamp,relativeHitPos);}}public class TargetTracker2{public static readonly string[]names=new[]{"корова","пёс","кролик","конь","медвед","кот","болт","кабан","волк","бобр","жук","zombie","сом",};public static string GetName(long entityId){var name=names[entityId%names.Length];var index=entityId%89;return$"{name}-{index}";}const int MIN_CAM_COUN=10;const int SCAN_DELAY_MS=60;const int SCAN_RETRY_MS=25;const double DISTANCE_SCAN_DEFAULT=7500;static readonly HashSet<MyDetectedEntityType>targetTypes=new HashSet<MyDetectedEntityType>{MyDetectedEntityType.SmallGrid,MyDetectedEntityType.LargeGrid};private readonly IMyTurretControlBlock[]turretControllers;private readonly IMyLargeTurretBase[]turrets;private readonly IMyCameraBlock[]cameras;private int camIndex=0;private SortedDictionary<long,TargetInfo>targets=new SortedDictionary<long,TargetInfo>();public event Action TargetListChanged;public int Count{get{return cameras.Length;}}public double TotalRange{get{return cameras.Aggregate(0d,(a,c)=>a+c.AvailableScanRange);}}public TargetTracker2(IMyCameraBlock[]cameras=null,IMyLargeTurretBase[]turrets=null,IMyTurretControlBlock[]turretControllers=null){this.cameras=cameras??new IMyCameraBlock[0];this.turrets=turrets??new IMyLargeTurretBase[0];this.turretControllers=turretControllers??new IMyTurretControlBlock[0];foreach(var cam in this.cameras){cam.Enabled=true;cam.EnableRaycast=true;}}public static TargetInfo?Scan(IMyCameraBlock cam,double distance=DISTANCE_SCAN_DEFAULT,bool onlyEnemies=false){if(cam==null){return null;}var camPos=cam.GetPosition();var entity=cam.Raycast(distance);if(entity.IsEmpty()){return null;}if(!targetTypes.Contains(entity.Type)){return null;}if(onlyEnemies&&entity.Relationship!=MyRelationsBetweenPlayerAndBlock.Enemies){return null;}return TargetInfo.CreateTargetInfo(entity,camPos,DateTime.UtcNow);}public void LockTarget(TargetInfo target){if(AddOrUpdateTarget(target)){TargetListChanged?.Invoke();}}public void Merge(TargetInfo[]list){var changed=false;foreach(var t in list){changed|=AddOrUpdateTarget(t);}if(changed){TargetListChanged?.Invoke();}}public void ReleaseTarget(long targetId){targets.Remove(targetId);}public void Clear(){targets.Clear();}public int TargetCount=>targets.Count;public TargetInfo[]GetTargets(){return targets.Values.ToArray();}public TargetInfo?GetByEntityId(long entityId){return targets[entityId];}public void Update(){var now=DateTime.UtcNow;var nextScan=now.AddMilliseconds(SCAN_DELAY_MS);var isChanged=UpdateFromTurrets(now,nextScan);if(Count>=MIN_CAM_COUN){isChanged|=UpdateOneFromCameras(now,nextScan);}if(isChanged){TargetListChanged?.Invoke();}}private bool AddOrUpdateTarget(TargetInfo target){var id=target.Entity.EntityId;if(targets.ContainsKey(id)){if(target.Timestamp>targets[id].Timestamp){targets[id]=target;}return false;}else{targets.Add(id,target);return true;}}private bool AddOrUpdateTarget(MyDetectedEntityInfo entity,Vector3D pos,DateTime now,DateTime nextScan){if(targets.ContainsKey(entity.EntityId)){var target=targets[entity.EntityId];if(target.Timestamp<now){target.Update(entity,now,nextScan);}return false;}else{targets.Add(entity.EntityId,TargetInfo.CreateTargetInfo(entity,pos,now,nextScan));return true;}}private bool UpdateOneFromCameras(DateTime now,DateTime nextScan){TargetInfo target=targets.Values.FirstOrDefault(t=>t.NextScan<now);if(target.Entity.IsEmpty()){return false;}var timePassed=now-target.Timestamp;var scanResult=ScanNextPosition(target,timePassed);if(scanResult.IsEmpty()){if(timePassed.TotalSeconds>2){ReleaseTarget(target.Entity.EntityId);return true;}else{target.UpdateNextScan(now.AddMilliseconds(SCAN_RETRY_MS));}}else{target.Update(scanResult,now,nextScan);}return false;}private bool UpdateFromTurrets(DateTime now,DateTime nextScan){var changed=false;foreach(var t in turrets){if(!t.Closed&&t.HasTarget){var entity=t.GetTargetedEntity();changed|=AddOrUpdateTarget(entity,t.GetPosition(),now,nextScan);}}foreach(var t in turretControllers){if(!t.Closed&&t.HasTarget){var entity=t.GetTargetedEntity();changed|=AddOrUpdateTarget(entity,t.GetPosition(),now,nextScan);}}return changed;}private static Vector3D CalculateTargetLocation(TargetInfo info,TimeSpan timePassed){var target=info.Entity;return info.GetHitPosWorld()+(target.Velocity*Convert.ToSingle(timePassed.TotalSeconds));}private MyDetectedEntityInfo ScanNextPosition(TargetInfo prevTarget,TimeSpan timePassed){var calculatedTargetPos=CalculateTargetLocation(prevTarget,timePassed);var camera=GetNext(cameras,ref camIndex,cam=>cam.CanScan(calculatedTargetPos));if(camera==null){return default(MyDetectedEntityInfo);}var entity=camera.Raycast(calculatedTargetPos);if(entity.EntityId!=prevTarget.Entity.EntityId){return default(MyDetectedEntityInfo);}return entity;}public string GetDisplayState(Vector3D selfPos){var sb=new StringBuilder();foreach(var target in targets){var t=target.Value.Entity;var type=t.Type.ToString().Substring(0,1);var name=GetName(t.EntityId);var dist=(t.Position-selfPos).Length();var speed=t.Velocity.Length();sb.AppendLine($"{type} {name} {dist:0}m {speed:0}m/s");}return sb.ToString();}public static T GetNext<T>(T[]a,ref int index,Func<T,bool>filter=null){if(a.Length==0){return default(T);}for(var count=0;count<a.Length;count++){index=(index+1)%a.Length;T block=a[index];if(filter==null||filter(block)){return block;}}return default(T);}}public class WeaponController{private TargetTracker2 tracker;private Transmitter2 transmitter;private IMyTextSurface lcdTargets;private IMyShipController cockpit;private IMyCameraBlock mainCamera;private IMySoundBlock sound;private int targetIndex;private long targetId;public event Action<Exception>OnError;public WeaponController(IMyShipController cockpit,IMyCameraBlock mainCamera,IMyCameraBlock[]cameras,IMyLargeTurretBase[]turrets,IMyTextSurface lcdTargets,IMyIntergridCommunicationSystem igc,IMyRadioAntenna[]antennas,IMySoundBlock sound){tracker=new TargetTracker2(cameras,turrets);tracker.TargetListChanged+=Tracker_TargetListChanged;transmitter=new Transmitter2(igc,antennas);transmitter.Subscribe(MsgTags.SYNC_TARGETS,Transmitter_SyncTargets,true);this.mainCamera=mainCamera;this.cockpit=cockpit;this.lcdTargets=lcdTargets;this.sound=sound;if(sound!=null){sound.SelectedSound="ArcSoundBlockAlert2";sound.LoopPeriod=300;sound.Range=50;sound.Enabled=true;}}public void NextTarget(){if(targetIndex+1<tracker.TargetCount){targetIndex++;targetId=tracker.GetTargets()[targetIndex].Entity.EntityId;}}public void PrevTarget(){if(targetIndex-1>=0){targetIndex--;targetId=tracker.GetTargets()[targetIndex].Entity.EntityId;}}public void Execute(string argument,UpdateType updateSource){transmitter.Update(argument,updateSource);tracker.Update();}public void Update(){UpdateLcdTargets();}private void UpdateLcdTargets(){var sb=new StringBuilder();var targets=tracker.GetTargets();if(targets.Any()){var selfPos=cockpit.GetPosition();for(var i=0;i<targets.Length;i++){var t=targets[i].Entity;var type=t.Type.ToString().Substring(0,1);var name=TargetTracker2.GetName(t.EntityId);var dist=(t.Position-selfPos).Length();var speed=t.Velocity.Length();var pointer=targetIndex==i?">> ":" ";sb.AppendLine($"{pointer}{type} {name} {dist:0}m {speed:0}m/s");}}else{sb.AppendLine("NO TARGETS");}lcdTargets.WriteText(sb);}private void Tracker_TargetListChanged(){sound?.Play();var targets=tracker.GetTargets();targetIndex=Array.FindIndex(targets,t=>t.Entity.EntityId==targetId);if(targetIndex<0){targetIndex=0;targetId=targets.Any()?targets[0].Entity.EntityId:0;}}private void Transmitter_SyncTargets(MyIGCMessage message){try{var data=message.Data.ToString();var reader=new Serializer.StringReader(data);TargetInfo[]targets;if(Serializer.TryParseTargetInfoArray(reader,out targets)){tracker.Merge(targets);}}catch(Exception ex){OnError?.Invoke(ex);}}}private readonly RuntimeTracker tracker;private readonly IMyTextSurface trackerLcd;private readonly Grid grid;private readonly WeaponController weapons;public Program(){tracker=new RuntimeTracker(this);trackerLcd=Me.GetSurface(1);trackerLcd.ContentType=ContentType.TEXT_AND_IMAGE;grid=new Grid(GridTerminalSystem);var cockpit=grid.GetByFilterOrAny<IMyCockpit>();var mainCamera=grid.GetByFilterOrAny<IMyCameraBlock>(x=>x.CustomName.StartsWith("CAMERA"),cam=>cam.EnableRaycast=true);var cameras=grid.GetBlocksOfType<IMyCameraBlock>();var turrets=grid.GetBlocksOfType<IMyLargeTurretBase>();var antennas=grid.GetBlocksOfType<IMyRadioAntenna>();var lcdTargets=grid.GetByFilterOrAny<IMyTextPanel>(x=>x.CustomName.StartsWith("TARGETS"));var sound=grid.GetByFilterOrAny<IMySoundBlock>(x=>x.CustomName.StartsWith("SOUND"));weapons=new WeaponController(cockpit,mainCamera,cameras,turrets,lcdTargets,IGC,antennas,sound);weapons.OnError+=HandleError;Runtime.UpdateFrequency=UpdateFrequency.Update1;}private void HandleError(Exception ex){Echo(ex.ToString());}public void Main(string argument,UpdateType updateSource){tracker.AddRuntime();weapons.Execute(argument,updateSource);weapons.Update();tracker.AddInstructions();trackerLcd.WriteText(tracker.ToString());}