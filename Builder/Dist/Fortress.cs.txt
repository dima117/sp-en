//5/3/2024 5:21:51 PM
public class RuntimeTracker{public int Capacity{get;set;}public double MaxRuntime{get;private set;}public double MaxInstructions{get;private set;}public double AverageRuntime{get;private set;}public double AverageInstructions{get;private set;}public double LastRuntime{get;private set;}public double LastInstructions{get;private set;}readonly Queue<double>runtimes=new Queue<double>();readonly Queue<double>instructions=new Queue<double>();readonly int instructionLimit;readonly MyGridProgram program;double runtimeSum=0;double instructionsSum=0;public RuntimeTracker(MyGridProgram program,int capacity=120){this.program=program;Capacity=capacity;instructionLimit=program.Runtime.MaxInstructionCount;}public void AddRuntime(){LastRuntime=program.Runtime.LastRunTimeMs;runtimes.Enqueue(LastRuntime);runtimeSum+=LastRuntime;if(runtimes.Count>Capacity){var firstRuntime=runtimes.Dequeue();runtimeSum-=firstRuntime;}AverageRuntime=runtimeSum/runtimes.Count();MaxRuntime=runtimes.Max();}public void AddInstructions(){LastInstructions=program.Runtime.CurrentInstructionCount;instructions.Enqueue(LastInstructions);instructionsSum+=LastInstructions;if(instructions.Count>Capacity){var firstInstructions=instructions.Dequeue();instructionsSum-=firstInstructions;}AverageInstructions=instructionsSum/instructions.Count();MaxInstructions=instructions.Max();}public override string ToString(){return$"Runtime: {LastRuntime:0.00}ms/{AverageRuntime:0.00}ms/{MaxRuntime:0.00}ms\n"+$"Instructions: {LastInstructions:0}/{AverageInstructions:0}/{MaxInstructions:0}\n"+$"Complexity: {AverageInstructions:0}/{instructionLimit:0} ({AverageInstructions/instructionLimit:0.00}%)";}}public class Grid{readonly IMyGridTerminalSystem system;public Grid(IMyGridTerminalSystem system){this.system=system;}public IMyBlockGroup[]GetBlockGroups(string prefix=""){var groups=new List<IMyBlockGroup>();system.GetBlockGroups(groups,g=>g.Name.StartsWith(prefix,StringComparison.OrdinalIgnoreCase));return groups.ToArray();}public T[]GetBlocksOfType<T>(Func<T,bool>filter=null)where T:class,IMyTerminalBlock{var list=new List<T>();system.GetBlocksOfType(list,filter);return list.ToArray();}public T GetBlockWithName<T>(string name)where T:class,IMyTerminalBlock{return system.GetBlockWithName(name)as T;}public IMyCameraBlock GetCamera(string name){var camera=GetBlockWithName<IMyCameraBlock>(name);if(camera!=null){camera.Enabled=true;camera.EnableRaycast=true;}return camera;}public IMySmallMissileLauncherReload[]GetLargeRailguns(Func<IMySmallMissileLauncherReload,bool>filter=null){return GetBlocksOfType<IMySmallMissileLauncherReload>(b=>b.BlockDefinition.SubtypeId=="LargeRailgun"&&(filter==null||filter(b))).ToArray();}public IMySoundBlock GetSound(string name,string soundName="SoundBlockAlert2"){var sound=GetBlockWithName<IMySoundBlock>(name);if(sound!=null){sound.Enabled=true;sound.SelectedSound=soundName;sound.Volume=1;sound.Range=100;}return sound;}public T GetByFilterOrAny<T>(Func<T,bool>filter=null,Action<T>init=null)where T:class,IMyTerminalBlock{var all=new List<T>();system.GetBlocksOfType(all,filter);T res=null;if(filter!=null){res=all.FirstOrDefault(filter);}if(res==null){res=all.FirstOrDefault();}if(res!=null&&init!=null){init(res);}return res;}}public class TargetInfo{public MyDetectedEntityInfo Entity{get;private set;}public DateTime Timestamp{get;private set;}public DateTime NextScan{get;private set;}public Vector3D HitPosRelative{get;private set;}public Vector3D GetHitPosWorld(){return Entity.Position+Vector3D.Transform(HitPosRelative,Entity.Orientation);}public TargetInfo(MyDetectedEntityInfo entity=default(MyDetectedEntityInfo),DateTime timestamp=default(DateTime),DateTime nextScan=default(DateTime),Vector3D hitPosRelative=default(Vector3D)){Entity=entity;Timestamp=timestamp;NextScan=nextScan;HitPosRelative=hitPosRelative;}public TargetInfo Update(MyDetectedEntityInfo entity,DateTime timestamp,DateTime nextScan){Entity=entity;Timestamp=timestamp;NextScan=nextScan;return this;}public void UpdateNextScan(DateTime nextScan){NextScan=nextScan;}public static TargetInfo CreateTargetInfo(MyDetectedEntityInfo entity,Vector3D camPos,DateTime timestamp,DateTime?nextScan=null){var relativeHitPos=default(Vector3D);if(entity.HitPosition.HasValue){var hitPos=entity.HitPosition.Value;var correctedHitPos=hitPos+Vector3D.Normalize(hitPos-camPos);var invertedMatrix=MatrixD.Invert(entity.Orientation);relativeHitPos=Vector3D.Transform(correctedHitPos-entity.Position,invertedMatrix);}return new TargetInfo(entity,timestamp,nextScan??timestamp,relativeHitPos);}}public static class Serializer{const char DIV=';';public class StringReader{private readonly string[]lines;private int nextPos=0;public StringReader(string value){lines=value.Split('\n');}public string GetNextLine(){return nextPos>=lines.Length?"":lines[nextPos++];}}public static void SerializeVector3D(Vector3D v,StringBuilder sb){sb.AppendLine(v.ToString());}public static void SerializeDateTime(DateTime d,StringBuilder sb){sb.AppendLine(d.ToBinary().ToString());}public static void SerializeMatrixD(MatrixD m,StringBuilder sb){var a=new double[]{m.M11,m.M12,m.M13,m.M14,m.M21,m.M22,m.M23,m.M24,m.M31,m.M32,m.M33,m.M34,m.M41,m.M42,m.M43,m.M44,};sb.AppendLine(string.Join(DIV.ToString(),a));}public static void SerializeMyDetectedEntityInfo(MyDetectedEntityInfo entity,StringBuilder sb){sb.AppendLine(entity.EntityId.ToString());sb.AppendLine(entity.Type.ToString());sb.AppendLine(entity.HitPosition?.ToString()??string.Empty);SerializeMatrixD(entity.Orientation,sb);sb.AppendLine(new Vector3D(entity.Velocity).ToString());sb.AppendLine(entity.Relationship.ToString());sb.AppendLine(entity.BoundingBox.Min.ToString());sb.AppendLine(entity.BoundingBox.Max.ToString());sb.AppendLine(entity.TimeStamp.ToString());}public static void SerializeTargetInfo(TargetInfo t,StringBuilder sb){SerializeMyDetectedEntityInfo(t.Entity,sb);SerializeVector3D(t.HitPosRelative,sb);SerializeDateTime(t.Timestamp,sb);}public static void SerializeTargetInfoArray(TargetInfo[]a,StringBuilder sb){sb.AppendLine(a.Length.ToString());foreach(var t in a){SerializeTargetInfo(t,sb);}}public static bool TryParseMatrixD(StringReader reader,out MatrixD m){try{var a=reader.GetNextLine().Split(DIV).Select(s=>double.Parse(s)).ToArray();m=new MatrixD(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]);return true;}catch{m=MatrixD.Zero;return false;}}public static bool TryParseNullableVector3D(StringReader reader,out Vector3D?v){var str=reader.GetNextLine();if(string.IsNullOrEmpty(str)){v=null;return true;}Vector3D tmp;if(Vector3D.TryParse(str,out tmp)){v=tmp;return true;}v=null;return false;}public static bool TryParseBoundingBoxD(StringReader reader,out BoundingBoxD b){string strMin=reader.GetNextLine();string strMax=reader.GetNextLine();Vector3D min,max;if(Vector3D.TryParse(strMin,out min)&&Vector3D.TryParse(strMax,out max)){b=new BoundingBoxD(min,max);return true;}b=new BoundingBoxD();return false;}public static bool TryParseMyDetectedEntityInfo(StringReader reader,out MyDetectedEntityInfo entity){var success=true;long entityId;success&=long.TryParse(reader.GetNextLine(),out entityId);MyDetectedEntityType type;success&=MyDetectedEntityType.TryParse(reader.GetNextLine(),out type);Vector3D?hitPosition;success&=TryParseNullableVector3D(reader,out hitPosition);MatrixD orientation;success&=TryParseMatrixD(reader,out orientation);Vector3D velocity;success&=Vector3D.TryParse(reader.GetNextLine(),out velocity);MyRelationsBetweenPlayerAndBlock relationship;success&=MyRelationsBetweenPlayerAndBlock.TryParse(reader.GetNextLine(),out relationship);BoundingBoxD boundingBox;success&=TryParseBoundingBoxD(reader,out boundingBox);long timestamp;success&=long.TryParse(reader.GetNextLine(),out timestamp);entity=success?new MyDetectedEntityInfo(entityId,string.Empty,type,hitPosition,orientation,velocity,relationship,boundingBox,timestamp):new MyDetectedEntityInfo();return success;}public static bool TryParseVector3D(StringReader reader,out Vector3D v){return Vector3D.TryParse(reader.GetNextLine(),out v);}public static bool TryParseDateTime(StringReader reader,out DateTime d){long ts;if(long.TryParse(reader.GetNextLine(),out ts)){d=DateTime.FromBinary(ts);return true;}d=DateTime.MinValue;return false;}public static bool TryParseTargetInfo(StringReader reader,out TargetInfo targetInfo){targetInfo=new TargetInfo();MyDetectedEntityInfo entity;if(!TryParseMyDetectedEntityInfo(reader,out entity))return false;Vector3D hitPos;if(!TryParseVector3D(reader,out hitPos))return false;DateTime timestamp;if(!TryParseDateTime(reader,out timestamp))return false;targetInfo=new TargetInfo(entity,timestamp,timestamp,hitPos);return true;}public static bool TryParseTargetInfoArray(StringReader reader,out TargetInfo[]result){TargetInfo target;int length;if(!int.TryParse(reader.GetNextLine(),out length)){result=null;return false;}result=new TargetInfo[length];for(var i=0;i<length;i++){if(TryParseTargetInfo(reader,out target)){result[i]=target;}else{result=null;return false;}}return true;}}public class MsgTags{public const string REMOTE_LOCK_TARGET="@REMOTE_LOCK_TARGET";public const string REMOTE_START="@REMOTE_START";public const string GET_STATUS="@GET_STATUS";public const string REMOTE_STATUS="@REMOTE_STATUS";public const string SYNC_TARGETS="@SYNC_TARGETS";}public class Transmitter{private int seq=0;protected IMyIntergridCommunicationSystem igc;protected IMyRadioAntenna[]antennas;private Dictionary<string,Action<MyIGCMessage>>actions=new Dictionary<string,Action<MyIGCMessage>>();private Dictionary<string,IMyBroadcastListener>listeners=new Dictionary<string,IMyBroadcastListener>();public Transmitter(IMyIntergridCommunicationSystem igc,IMyRadioAntenna[]antennas){this.igc=igc;igc.UnicastListener.SetMessageCallback();this.antennas=antennas;foreach(var a in antennas){a.EnableBroadcasting=true;a.Enabled=true;}}public void Subscribe(string tag,Action<MyIGCMessage>fn,bool broadcast=false){if(broadcast){var listener=igc.RegisterBroadcastListener(tag);var listenerId=(DateTime.UtcNow.Ticks-(seq++)).ToString();listener.SetMessageCallback(listenerId);listeners[listenerId]=listener;}actions[tag]=fn;}public virtual void Send(string tag,string data="",long?destination=null){if(destination.HasValue){igc.SendUnicastMessage(destination.Value,tag,data);}else{igc.SendBroadcastMessage(tag,data);}}public virtual void Update(string listenerId,UpdateType updateSource){if(updateSource==UpdateType.IGC){IMyMessageProvider listener=igc.UnicastListener;if(listeners.ContainsKey(listenerId)){listener=listeners[listenerId];}while(listener.HasPendingMessage){var message=listener.AcceptMessage();if(actions.ContainsKey(message.Tag)){actions[message.Tag](message);}}}}}public class Transmitter2:Transmitter{const int TIMEOUT_SWITCH_ON=200;const int TIMEOUT_SWITCH_OFF=200;public const int MIN_RANGE=10;public const int MAX_RANGE=50000;private DateTime?timestampSwitchOn=null;private DateTime?timestampSwitchOff=null;private readonly Queue<Action>messageQueue=new Queue<Action>();public Transmitter2(IMyIntergridCommunicationSystem igc,IMyRadioAntenna[]antennas):base(igc,antennas){foreach(var a in antennas){a.Radius=MIN_RANGE;}}public override void Send(string tag,string data="",long?destination=null){if(destination.HasValue){messageQueue.Enqueue(()=>igc.SendUnicastMessage(destination.Value,tag,data));}else{messageQueue.Enqueue(()=>igc.SendBroadcastMessage(tag,data));}if(!timestampSwitchOn.HasValue){if(timestampSwitchOff.HasValue){timestampSwitchOff=DateTime.UtcNow.AddMilliseconds(TIMEOUT_SWITCH_OFF);}else{foreach(var a in antennas){a.Radius=MAX_RANGE;}timestampSwitchOn=DateTime.UtcNow.AddMilliseconds(TIMEOUT_SWITCH_ON);}}}public override void Update(string listenerId,UpdateType updateSource){base.Update(listenerId,updateSource);switch(updateSource){case UpdateType.Update1:case UpdateType.Update10:case UpdateType.Update100:var now=DateTime.UtcNow;if(timestampSwitchOn.HasValue&&now>timestampSwitchOn){timestampSwitchOn=null;timestampSwitchOff=now.AddMilliseconds(TIMEOUT_SWITCH_OFF);while(messageQueue.Any()){messageQueue.Dequeue()();}}else if(timestampSwitchOff.HasValue&&now>timestampSwitchOff){timestampSwitchOff=null;foreach(var a in antennas){a.Radius=MIN_RANGE;}}break;}}}public class BlockArray<T>where T:class,IMyTerminalBlock{MyGridProgram program;Action<T>init;private List<T>list=new List<T>();private int index=0;public int Count=>list.Count;public T1 Aggregate<T1>(T1 a,Func<T1,T,T1>fn)=>list.Aggregate(a,fn);public BlockArray(MyGridProgram program,Action<T>init=null){this.program=program;this.init=init;UpdateBlocks();}public void UpdateBlocks(){index=0;list=new List<T>();program.GridTerminalSystem.GetBlocksOfType(list);list.ForEach(init);}public void ForEach(Action<T>fn=null){if(fn!=null){list.ForEach(fn);}}public T GetNext(Func<T,bool>filter=null){for(var count=0;count<list.Count;count++){index++;if(index>=list.Count){index=0;}T block=list[index];if(filter==null||filter(block)){return block;}}return null;}}public class TargetTracker2{public static readonly string[]names=new[]{"корова","пёс","кролик","конь","медвед","кот","болт","кабан","волк","бобр","жук","zombie","сом",};public static string GetName(long entityId){var name=names[entityId%names.Length];var index=entityId%89;return$"{name}-{index}";}const int MIN_CAM_COUN=10;const int SCAN_DELAY_MS=60;const int SCAN_RETRY_MS=25;const double DISTANCE_SCAN_DEFAULT=7500;const int TARGET_RELEASE_TIMEOUT=20;static readonly HashSet<MyDetectedEntityType>targetTypes=new HashSet<MyDetectedEntityType>{MyDetectedEntityType.SmallGrid,MyDetectedEntityType.LargeGrid};private readonly IMyTurretControlBlock[]turretControllers;private readonly IMyLargeTurretBase[]turrets;private readonly IMyCameraBlock[]cameras;private int camIndex=0;private SortedDictionary<long,TargetInfo>targets=new SortedDictionary<long,TargetInfo>();public event Action TargetListChanged;public int Count{get{return cameras.Length;}}public double TotalRange{get{return cameras.Aggregate(0d,(a,c)=>a+c.AvailableScanRange);}}public TargetTracker2(IMyCameraBlock[]cameras=null,IMyLargeTurretBase[]turrets=null,IMyTurretControlBlock[]turretControllers=null){this.cameras=cameras??new IMyCameraBlock[0];this.turrets=turrets??new IMyLargeTurretBase[0];this.turretControllers=turretControllers??new IMyTurretControlBlock[0];foreach(var cam in this.cameras){cam.Enabled=true;cam.EnableRaycast=true;}}public static TargetInfo Scan(IMyCameraBlock cam,double distance=DISTANCE_SCAN_DEFAULT,bool onlyEnemies=false){if(cam==null){return null;}var camPos=cam.GetPosition();var entity=cam.Raycast(distance);if(entity.IsEmpty()){return null;}if(!targetTypes.Contains(entity.Type)){return null;}if(onlyEnemies&&entity.Relationship!=MyRelationsBetweenPlayerAndBlock.Enemies){return null;}return TargetInfo.CreateTargetInfo(entity,camPos,DateTime.UtcNow);}public void LockTarget(TargetInfo target){if(AddOrUpdateTarget(target)){TargetListChanged?.Invoke();}}public void Merge(TargetInfo[]list){var changed=false;foreach(var t in list){changed|=AddOrUpdateTarget(t);}if(changed){TargetListChanged?.Invoke();}}public void ReleaseTarget(long targetId){targets.Remove(targetId);}public void Clear(){targets.Clear();}public int TargetCount=>targets.Count;public TargetInfo[]GetTargets(){return targets.Values.ToArray();}public TargetInfo GetByEntityId(long entityId){return targets.ContainsKey(entityId)?targets[entityId]:null;}public void Update(){var now=DateTime.UtcNow;var nextScan=now.AddMilliseconds(SCAN_DELAY_MS);var isChanged=UpdateFromTurrets(now,nextScan);if(Count>=MIN_CAM_COUN){UpdateOneFromCameras(now,nextScan);}foreach(var t in targets.ToArray()){if((now-t.Value.Timestamp).TotalSeconds>TARGET_RELEASE_TIMEOUT){ReleaseTarget(t.Value.Entity.EntityId);isChanged=true;}}if(isChanged){TargetListChanged?.Invoke();}}private bool AddOrUpdateTarget(TargetInfo target){var id=target.Entity.EntityId;if(targets.ContainsKey(id)){if(target.Timestamp>targets[id].Timestamp){targets[id]=target;}return false;}else{targets.Add(id,target);return true;}}private bool AddOrUpdateTarget(MyDetectedEntityInfo entity,Vector3D pos,DateTime now,DateTime nextScan){if(targets.ContainsKey(entity.EntityId)){var target=targets[entity.EntityId];if(target.Timestamp<now){target.Update(entity,now,nextScan);}return false;}else{targets.Add(entity.EntityId,TargetInfo.CreateTargetInfo(entity,pos,now,nextScan));return true;}}private void UpdateOneFromCameras(DateTime now,DateTime nextScan){TargetInfo target=targets.Values.FirstOrDefault(t=>t.NextScan<now);if(target==null){return;}var timePassed=now-target.Timestamp;var scanResult=ScanNextPosition(target,timePassed);if(scanResult.IsEmpty()){target.UpdateNextScan(now.AddMilliseconds(SCAN_RETRY_MS));}else{target.Update(scanResult,now,nextScan);}}private bool UpdateFromTurrets(DateTime now,DateTime nextScan){var changed=false;foreach(var t in turrets){if(!t.Closed&&t.HasTarget){var entity=t.GetTargetedEntity();changed|=AddOrUpdateTarget(entity,t.GetPosition(),now,nextScan);}}foreach(var t in turretControllers){if(!t.Closed&&t.HasTarget){var entity=t.GetTargetedEntity();changed|=AddOrUpdateTarget(entity,t.GetPosition(),now,nextScan);}}return changed;}private static Vector3D CalculateTargetLocation(TargetInfo info,TimeSpan timePassed){var target=info.Entity;return info.GetHitPosWorld()+(target.Velocity*Convert.ToSingle(timePassed.TotalSeconds));}private MyDetectedEntityInfo ScanNextPosition(TargetInfo prevTarget,TimeSpan timePassed){var calculatedTargetPos=CalculateTargetLocation(prevTarget,timePassed);var camera=GetNext(cameras,ref camIndex,cam=>cam.CanScan(calculatedTargetPos));if(camera==null){return default(MyDetectedEntityInfo);}var entity=camera.Raycast(calculatedTargetPos);if(entity.EntityId!=prevTarget.Entity.EntityId){return default(MyDetectedEntityInfo);}return entity;}public string GetDisplayState(Vector3D selfPos){var sb=new StringBuilder();foreach(var target in targets){var t=target.Value.Entity;var type=t.Type.ToString().Substring(0,1);var name=GetName(t.EntityId);var dist=(t.Position-selfPos).Length();var speed=t.Velocity.Length();sb.AppendLine($"{type} {name} {dist:0}m {speed:0}m/s");}return sb.ToString();}public static T GetNext<T>(T[]a,ref int index,Func<T,bool>filter=null){if(a.Length==0){return default(T);}for(var count=0;count<a.Length;count++){index=(index+1)%a.Length;T block=a[index];if(filter==null||filter(block)){return block;}}return default(T);}}public static class Helpers{public class InterceptResult{public Vector3D Position;public double TimeMs;}public static InterceptResult CalculateInterceptPoint(Vector3D ownPosition,double interceptSpeed,Vector3D targetPosition,Vector3D targetVelocity){Vector3D directionToTarget=Vector3D.Normalize(targetPosition-ownPosition);double targetSpeedlOrth=Vector3D.Dot(targetVelocity,directionToTarget);Vector3D targetVelOrth=directionToTarget*targetSpeedlOrth;Vector3D targetVelTang=targetVelocity-targetVelOrth;double targetSpeedlTang=targetVelTang.Length();if(targetSpeedlTang>=interceptSpeed){return null;}double missileSpeedTang=targetSpeedlTang;double missileSpeedOrth=Math.Sqrt(interceptSpeed*interceptSpeed-missileSpeedTang*missileSpeedTang);if(targetSpeedlOrth>=missileSpeedOrth){return null;}double timeS=Vector3D.Distance(ownPosition,targetPosition)/(missileSpeedOrth-targetSpeedlOrth);Vector3D point=targetPosition+targetVelocity*timeS;return new InterceptResult{Position=point,TimeMs=timeS*1000};}}public class DirectionController2{public const double MIN_SPEED=50;public const float DEFAULT_FACTOR=2;readonly IMyShipController remoteControl;readonly IEnumerable<IMyGyro>gyroList;readonly float factor;public DirectionController2(IMyShipController remoteControl,IEnumerable<IMyGyro>gyroList,float factor=DEFAULT_FACTOR){this.remoteControl=remoteControl;this.gyroList=gyroList;this.factor=factor;}public void ICBM(MyDetectedEntityInfo target){var grav=remoteControl.GetNaturalGravity();var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var ownSpeed=Math.Max(velocity.Length(),MIN_SPEED);var point=Helpers.CalculateInterceptPoint(ownPos,ownSpeed,target.Position,target.Velocity);var targetPos=point==null?target.Position:point.Position;var targetVector=targetPos-ownPos;if(grav.IsZero()||targetVector.Length()<3500){Aim(targetPos);}else{Vector3D direction=CompensateSideVelocity(grav,targetVector);var axis=GetAxis(remoteControl.WorldMatrix.Forward,direction);SetGyroByAxis(axis,gyroList,factor);}}public void KeepHorizon(Vector3D?grav=null){var direction=grav??remoteControl.GetNaturalGravity();if(!direction.IsZero()){var axis=GetAxis(remoteControl.WorldMatrix.Down,direction);SetGyroByAxis(axis,gyroList,factor);}}public void Aim(Vector3D targetPos){var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var targetVector=CompensateSideVelocity(velocity,targetPos-ownPos);var axis=GetAxis(remoteControl.WorldMatrix.Forward,targetVector);SetGyroByAxis(axis,gyroList,factor);}public bool Intercept(Vector3D targetPosition,Vector3 targetVelocity){var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var ownSpeed=Math.Max(velocity.Length(),MIN_SPEED);var interceptPoint=Helpers.CalculateInterceptPoint(ownPos,ownSpeed,targetPosition,targetVelocity);var aimingPointPosition=interceptPoint?.Position??targetPosition;var direction=aimingPointPosition-ownPos;var compensatedTargetVector=CompensateSideVelocity(velocity,direction);var axis=GetAxis(remoteControl.WorldMatrix.Forward,compensatedTargetVector);SetGyroByAxis(axis,gyroList,factor);return interceptPoint!=null;}public bool InterceptShot(MyDetectedEntityInfo target,double bulletSpeed){var ownPos=remoteControl.GetPosition();var ownVelocity=remoteControl.GetShipVelocities().LinearVelocity;var relativeTargetVelocity=target.Velocity-ownVelocity;var point=Helpers.CalculateInterceptPoint(ownPos,bulletSpeed,target.Position,relativeTargetVelocity);var targetVector=point==null?(target.Position-ownPos):(point.Position-ownPos);var axis=GetAxis(remoteControl.WorldMatrix.Forward,targetVector);SetGyroByAxis(axis,gyroList,factor);return point!=null;}public static Vector3D CompensateSideVelocity(Vector3D velocity,Vector3D targetVector,float ratio=1){var sideVelocity=Vector3D.Reject(velocity,Vector3D.Normalize(targetVector));var sameDirection=Vector3D.Dot(velocity,targetVector)>0;return sameDirection?velocity-(1+ratio)*sideVelocity:(1-ratio)*sideVelocity-velocity;}public static Vector3D GetAxis(Vector3D currentDirection,Vector3D targetDirection){var target=Vector3D.Normalize(targetDirection);var current=Vector3D.Normalize(currentDirection);var axis=target.Cross(current);if(target.Dot(current)<0){axis=Vector3D.Normalize(axis);}return axis;}public static void SetGyroByAxis(Vector3D axis,IEnumerable<IMyGyro>gyroList,float factor=DEFAULT_FACTOR){foreach(var gyro in gyroList){gyro.Yaw=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Up));gyro.Pitch=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Right));gyro.Roll=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Backward));}}}public class PID{public double Kp{get;set;}public double Ki{get;set;}public double Kd{get;set;}private Vector3D errorSum;private Vector3D lastError;private DateTime lastErrorTimestamp;private bool firstRun=true;private long periodMs;public PID(double kp,double ki,double kd,long periodMs=1000){Kp=kp;Ki=ki;Kd=kd;this.periodMs=periodMs;}protected virtual Vector3D GetIntegral(Vector3D currentError,Vector3D errorSum,double timeStep){return errorSum+currentError*timeStep;}public Vector3D Control(Vector3D axis,DateTime now){var timeStep=(now-lastErrorTimestamp).TotalMilliseconds/periodMs;Vector3D errorDerivative=(axis-lastError)/timeStep;if(firstRun){errorDerivative=Vector3D.Zero;firstRun=false;}errorSum=GetIntegral(axis,errorSum,timeStep);lastError=axis;return Kp*axis+Ki*errorSum+Kd*errorDerivative;}public virtual void Reset(){errorSum=Vector3D.Zero;lastError=Vector3D.Zero;firstRun=true;}}public class DecayingIntegralPID:PID{public double IntegralDecayRatio{get;set;}public DecayingIntegralPID(double kp,double ki,double kd,long periodMs,double decayRatio):base(kp,ki,kd,periodMs){IntegralDecayRatio=decayRatio;}protected override Vector3D GetIntegral(Vector3D currentError,Vector3D errorSum,double timeStep){return errorSum*(1.0-IntegralDecayRatio)+currentError*timeStep;}}public class Aimbot{private readonly PID pid=new DecayingIntegralPID(1,0.2,0.3,1000,0.1);private readonly IMyShipController remoteControl;private readonly IEnumerable<IMyGyro>gyroList;public Aimbot(IMyShipController remoteControl,IEnumerable<IMyGyro>gyroList){this.remoteControl=remoteControl;this.gyroList=gyroList;}public Vector3D Aim(MyDetectedEntityInfo target,double bulletSpeed){var ownPos=remoteControl.GetPosition();var ownVelocity=remoteControl.GetShipVelocities().LinearVelocity;var relativeTargetVelocity=target.Velocity-ownVelocity;var point=Helpers.CalculateInterceptPoint(ownPos,bulletSpeed,target.Position,relativeTargetVelocity);var targetVector=point==null?(target.Position-ownPos):(point.Position-ownPos);var axis=DirectionController2.GetAxis(remoteControl.WorldMatrix.Forward,targetVector);axis=pid.Control(axis,DateTime.UtcNow);DirectionController2.SetGyroByAxis(axis,gyroList);return axis;}public void Reset(){pid.Reset();}}public enum LaunchStage{Ready,Started,Dead,Invalid}public struct TorpedoStatus{public LaunchStage Stage;public string Name;public double Distance;public override string ToString(){return Stage==LaunchStage.Started?$"{Name}: {Stage} => {Distance:0}m":$"{Name}: {Stage}";}}public abstract class BaseTorpedo{public readonly string Id=DateTime.UtcNow.Ticks.ToString();protected readonly int delay;protected readonly int lifespan;protected readonly string name;protected readonly DirectionController2 tControl;protected readonly IMyRemoteControl tRemote;protected readonly IMyShipMergeBlock tClamp;protected readonly List<IMyGyro>listGyro=new List<IMyGyro>();protected readonly List<IMyThrust>listEngine=new List<IMyThrust>();protected readonly List<IMyGasGenerator>listH2Gen=new List<IMyGasGenerator>();protected DateTime startTime=DateTime.MaxValue;protected DateTime deathTime=DateTime.MaxValue;protected bool started=false;public long EntityId=>(tRemote?.EntityId).GetValueOrDefault();public string Name=>name;public Vector3D Position=>tRemote.GetPosition();public double Speed=>started&&IsAlive?tRemote.GetShipSpeed():0;public bool IsInvalid=>!listEngine.Any()||!listGyro.Any()||tRemote==null||tClamp==null;public LaunchStage Stage=>!IsAlive?LaunchStage.Dead:started?LaunchStage.Started:IsInvalid?LaunchStage.Invalid:LaunchStage.Ready;public bool IsAlive=>tRemote.IsFunctional&&listEngine.All(e=>e.IsFunctional&&e.CubeGrid.EntityId==tRemote.CubeGrid.EntityId)&&listGyro.All(g=>g.IsFunctional&&g.CubeGrid.EntityId==tRemote.CubeGrid.EntityId)&&DateTime.UtcNow<deathTime;protected BaseTorpedo(IMyBlockGroup group,int delay=2000,float factor=7,int lifespan=360){name=group.Name;this.delay=delay;this.lifespan=lifespan;group.GetBlocksOfType(listGyro);group.GetBlocksOfType(listEngine);group.GetBlocksOfType(listH2Gen);var tmp=new List<IMyTerminalBlock>();group.GetBlocks(tmp);tClamp=tmp.FirstOrDefault(b=>b is IMyShipMergeBlock)as IMyShipMergeBlock;tRemote=tmp.FirstOrDefault(b=>b is IMyRemoteControl)as IMyRemoteControl;tControl=new DirectionController2(tRemote,listGyro,factor);}public virtual void Start(){startTime=DateTime.UtcNow;deathTime=startTime.AddSeconds(lifespan);tClamp.Enabled=false;listGyro.ForEach(g=>{g.Enabled=true;g.GyroOverride=true;});listH2Gen.ForEach(g=>{g.Enabled=true;});listEngine.ForEach(e=>{e.Enabled=true;e.ThrustOverridePercentage=1;});started=true;}public virtual TorpedoStatus Update(TargetInfo target){double distance=0;if((DateTime.UtcNow-startTime).TotalMilliseconds>delay){if(target!=null){distance=(target.Entity.Position-Position).Length();SetDirection(target,distance);}}return new TorpedoStatus{Name=name,Stage=Stage,Distance=distance,};}protected abstract void SetDirection(TargetInfo targetInfo,double distance);}public class SpaceTorpedo:BaseTorpedo{const double INTERCEPT_DISTANCE=1200;public SpaceTorpedo(IMyBlockGroup group,int delay=2000,float factor=7,int lifespan=360):base(group,delay,factor,lifespan){}protected override void SetDirection(TargetInfo targetInfo,double distance){var targetPos=targetInfo.GetHitPosWorld();if(distance<INTERCEPT_DISTANCE){tControl.Intercept(targetPos,targetInfo.Entity.Velocity);}else{tControl.Aim(targetPos);}}}public class WeaponController{const int RAYCAST_DISTANCE=6500;const int TORPEDO_LIFESPAN=600;public const int RAILGUN_SPEED=2000;public const int ARTILLERY_SPEED=500;private TargetTracker2 tracker;private Transmitter2 transmitter;private IMyTextSurface lcdTargets;private IMyTextSurface lcdTorpedos;private IMyTextSurface lcdSystem;private IMyShipController cockpit;private IMySoundBlock sound;private IMySoundBlock soundEnemyLock;private IMyTextPanel[]hud;private IMySmallMissileLauncherReload[]railguns;private bool onlyEnemies;private int targetIndex;private long targetId;private DateTime?enemyLock;private DateTime lastUpdateHUD=DateTime.MinValue;private int aimbotTargetShotSpeed;public event Action<Exception>OnError;readonly Aimbot aimbot;readonly Dictionary<long,SpaceTorpedo>torpedos=new Dictionary<long,SpaceTorpedo>();readonly Dictionary<long,long>targeting=new Dictionary<long,long>();public WeaponController(IMyGyro[]gyros,IMyShipController cockpit,IMyCameraBlock[]cameras,IMyLargeTurretBase[]turrets,IMySmallMissileLauncherReload[]railguns,IMyTextPanel[]hud,IMyTextSurface lcdTargets,IMyTextSurface lcdTorpedos,IMyTextSurface lcdSystem,IMyIntergridCommunicationSystem igc,IMyRadioAntenna[]antennas,IMySoundBlock sound,IMySoundBlock soundEnemyLock){tracker=new TargetTracker2(cameras,turrets);tracker.TargetListChanged+=Tracker_TargetListChanged;transmitter=new Transmitter2(igc,antennas);transmitter.Subscribe(MsgTags.SYNC_TARGETS,Transmitter_SyncTargets,true);transmitter.Subscribe(MsgTags.REMOTE_LOCK_TARGET,Transmitter_RemoteLock,true);this.cockpit=cockpit;this.lcdTargets=lcdTargets;this.lcdTorpedos=lcdTorpedos;this.lcdSystem=lcdSystem;this.hud=hud;this.railguns=railguns;this.sound=sound;this.soundEnemyLock=soundEnemyLock;aimbot=new Aimbot(cockpit,gyros);}public TargetInfo Current=>tracker.GetByEntityId(targetId);public void ToggleFilter(){onlyEnemies=!onlyEnemies;}public void NextTarget(){if(targetIndex+1<tracker.TargetCount){targetIndex++;targetId=tracker.GetTargets()[targetIndex].Entity.EntityId;}}public void PrevTarget(){if(targetIndex-1>=0){targetIndex--;targetId=tracker.GetTargets()[targetIndex].Entity.EntityId;}}public void Scan(IMyCameraBlock cam){var target=TargetTracker2.Scan(cam,RAYCAST_DISTANCE,onlyEnemies);if(target!=null){sound?.Play();tracker.LockTarget(target);targetId=target.Entity.EntityId;FixTargetIndex();}}public void Reload(IMyBlockGroup[]groups){foreach(var gr in groups){var tmp=new SpaceTorpedo(gr,factor:2.5f,lifespan:TORPEDO_LIFESPAN);if(!torpedos.ContainsKey(tmp.EntityId)){torpedos.Add(tmp.EntityId,tmp);}}foreach(var t in torpedos.ToArray()){if(!t.Value.IsAlive){torpedos.Remove(t.Key);targeting.Remove(t.Key);}}}public void Aim(){aimbotTargetShotSpeed=aimbotTargetShotSpeed==ARTILLERY_SPEED?RAILGUN_SPEED:ARTILLERY_SPEED;aimbot.Reset();}public void ClearAimBotTarget(){aimbotTargetShotSpeed=0;}public void SetEnemyLock(){enemyLock=DateTime.UtcNow;soundEnemyLock?.Play();}public void ClearEnemyLock(){enemyLock=null;soundEnemyLock?.Stop();}public bool Launch(){var target=Current;var torpedo=torpedos.Values.FirstOrDefault(t=>t.Stage==LaunchStage.Ready);if(target==null||torpedo==null){return false;}targeting[torpedo.EntityId]=target.Entity.EntityId;torpedo.Start();return true;}private int updateIndex=0;public void UpdateNext(string argument,UpdateType updateSource){switch(updateIndex){case 0:transmitter.Update(argument,updateSource);tracker.Update();break;case 1:UpdateTorpedoTargets();break;case 2:UpdateAimBot();break;case 3:var selfPos=cockpit.GetPosition();UpdateHUD(selfPos);UpdateLcdTargets(selfPos);UpdateLcdSystem();break;}updateIndex=(updateIndex+1)%4;}public void Update(string argument,UpdateType updateSource){try{transmitter.Update(argument,updateSource);tracker.Update();var selfPos=cockpit.GetPosition();UpdateTorpedoTargets();UpdateAimBot();UpdateHUD(selfPos);UpdateLcdTargets(selfPos);UpdateLcdSystem();}catch(Exception e){OnError(e);}}public bool AimbotEnabled{get{return aimbotTargetShotSpeed>0;}}private void UpdateAimBot(){if(aimbotTargetShotSpeed>0){var target=Current;if(target!=null){aimbot.Aim(target.Entity,aimbotTargetShotSpeed);}}}private void UpdateTorpedoTargets(){var sb=new StringBuilder();foreach(var t in torpedos.Values){var targetId=targeting.GetValueOrDefault(t.EntityId);var target=tracker.GetByEntityId(targetId);var state=t.Update(target);sb.AppendLine(state.ToString());}lcdTorpedos?.WriteText(sb);}private HashSet<MyRelationsBetweenPlayerAndBlock>friends=new HashSet<MyRelationsBetweenPlayerAndBlock>{MyRelationsBetweenPlayerAndBlock.Owner,MyRelationsBetweenPlayerAndBlock.FactionShare,MyRelationsBetweenPlayerAndBlock.Friends,};private void UpdateHUD(Vector3D selfPos){var now=DateTime.UtcNow;if(hud.Any()&&(now-lastUpdateHUD).TotalMilliseconds>100){var targetName="NO TARGET";string dist=null;if(Current!=null){var t=Current.Entity;var d=(t.Position-selfPos).Length();var size=t.Type==MyDetectedEntityType.SmallGrid?"SM":"LG";var name=TargetTracker2.GetName(t.EntityId);targetName=friends.Contains(t.Relationship)?$"{size} — {t.Name}":$"{size} — {name}";dist=d.ToString("0m");}var aimbot="Off";if(aimbotTargetShotSpeed>0){switch(aimbotTargetShotSpeed){case RAILGUN_SPEED:aimbot="Rail";break;case ARTILLERY_SPEED:aimbot="Art";break;default:aimbot=aimbotTargetShotSpeed.ToString("0 m/s");break;}}var rg=railguns.Where(r=>r.IsWorking).ToArray();int rgReadyCount=0;float rgPercent=0;for(int i=0;i<rg.Length;i++){var value=GetRailgunChargeLevel(rg[i]);if(value>0.99){rgReadyCount++;}if(value<0.99&&value>rgPercent){rgPercent=value;}}var tCount=torpedos.Values.Count(t=>t.Stage==LaunchStage.Ready);var enemyLock=false;if(this.enemyLock.HasValue){var diff=(now-this.enemyLock.Value);enemyLock=diff.TotalSeconds>4||diff.Milliseconds<600;}var sprites=GetHudState(targetName,dist,aimbot,tCount,enemyLock,rg.Length,rgReadyCount,rgPercent);foreach(var lcd in hud){using(var frame=lcd.DrawFrame()){frame.AddRange(sprites);}}lastUpdateHUD=now;}}private MySprite[]GetHudState(string targetName,string dist,string aimbot,int tCount,bool enemyLock,int rgTotal,int rgReady,float rgChargeLevel){var list=new List<MySprite>();list.AddRange(Text("target",targetName,TextAlignment.CENTER,TOP));if(dist!=null){list.AddRange(Text("dist",dist,TextAlignment.LEFT,TOP));}list.AddRange(Text("torpedos",tCount.ToString(),TextAlignment.RIGHT,TOP));list.AddRange(Text("aimbot",aimbot,TextAlignment.LEFT,BOTTOM));if(enemyLock){list.AddRange(Text(null,"ENEMY LOCK",TextAlignment.CENTER,BOTTOM,Color.OrangeRed));}if(rgTotal>0){list.AddRange(Text("railgun",$"{rgReady} / {rgTotal}",TextAlignment.RIGHT,BOTTOM));list.Add(new MySprite(){Type=SpriteType.TEXTURE,Data="SquareSimple",Position=new Vector2(452,509),Size=new Vector2(Convert.ToInt32(60*rgChargeLevel),3),Color=Color.Teal,});}return list.ToArray();}const int TOP=0;const int BOTTOM=9;const int LABEL_HEIGHT=20;const int VALUE_HEIGHT=30;const int LINE_HEIGHT=51;private MySprite[]Text(string label,string text,TextAlignment alignment,byte line=TOP,Color?color=null){int x=0;switch(alignment){case TextAlignment.LEFT:x=0;break;case TextAlignment.RIGHT:x=512;break;case TextAlignment.CENTER:x=256;break;}int y=line*LINE_HEIGHT;var valueSprite=new MySprite(){Type=SpriteType.TEXT,Data=text,Position=new Vector2(x,y+LABEL_HEIGHT),RotationOrScale=1f,Color=color??Color.White,Alignment=alignment,FontId="White"};if(string.IsNullOrEmpty(label)){return new[]{valueSprite};}return new[]{new MySprite(){Type=SpriteType.TEXT,Data=label,Position=new Vector2(x,y),RotationOrScale=0.8f,Color=Color.Teal,Alignment=alignment,FontId="White"},valueSprite};}private void UpdateLcdSystem(){var filter=onlyEnemies?"Enemies":"All";var sb=new StringBuilder();sb.AppendLine($"Total range: {tracker.TotalRange:0.0}");sb.AppendLine($"Cam count: {tracker.Count}");sb.AppendLine($"Filter: {filter}");lcdSystem?.WriteText(sb);}private void UpdateLcdTargets(Vector3D selfPos){var sb=new StringBuilder();var targets=tracker.GetTargets();if(targets.Any()){for(var i=0;i<targets.Length;i++){var t=targets[i].Entity;var type=t.Type.ToString().Substring(0,1);var name=TargetTracker2.GetName(t.EntityId);var dist=(t.Position-selfPos).Length();var speed=t.Velocity.Length();var pointer=targetIndex==i?"> ":" ";sb.AppendLine($"{pointer}{type} {name} {dist:0}m {speed:0}m/s");}}else{sb.AppendLine("NO TARGETS");}lcdTargets?.WriteText(sb);}private void Tracker_TargetListChanged(){sound?.Play();FixTargetIndex();}private void FixTargetIndex(){var targets=tracker.GetTargets();targetIndex=Array.FindIndex(targets,t=>t.Entity.EntityId==targetId);if(targetIndex<0){targetIndex=0;targetId=targets.Any()?targets[0].Entity.EntityId:0;}}private void Transmitter_RemoteLock(MyIGCMessage message){try{var data=message.Data.ToString();var reader=new Serializer.StringReader(data);TargetInfo target;if(Serializer.TryParseTargetInfo(reader,out target)){tracker.LockTarget(target);}}catch(Exception ex){OnError?.Invoke(ex);}}private void Transmitter_SyncTargets(MyIGCMessage message){try{var data=message.Data.ToString();var reader=new Serializer.StringReader(data);TargetInfo[]targets;if(Serializer.TryParseTargetInfoArray(reader,out targets)){tracker.Merge(targets);}}catch(Exception ex){OnError?.Invoke(ex);}}private float GetRailgunChargeLevel(IMySmallMissileLauncherReload railgun,float max=500){if(railgun.BlockDefinition.SubtypeId!="LargeRailgun"){return 0f;}var lines=railgun.DetailedInfo.Split('\n');var chargeInfo=lines[1];var start=0;while(!char.IsDigit(chargeInfo[start])){start++;}var end=start+1;while(char.IsDigit(chargeInfo[end])||chargeInfo[end]=='.'){end++;}var strValue=chargeInfo.Substring(start,end-start);var current=Convert.ToSingle(strValue);float result=current/max;return result;}}private const string GROUP_PREFIX_TORPEDO="TORPEDO";private readonly RuntimeTracker tracker;private readonly IMyTextSurface trackerLcd;private readonly IMyCameraBlock camera;private readonly Grid grid;private readonly WeaponController weapons;private bool sameGrid<T>(T b)where T:IMyTerminalBlock{return b.CubeGrid==Me.CubeGrid;}public Program(){tracker=new RuntimeTracker(this);trackerLcd=Me.GetSurface(1);trackerLcd.ContentType=ContentType.TEXT_AND_IMAGE;grid=new Grid(GridTerminalSystem);camera=grid.GetCamera("CAMERA");var gyros=grid.GetBlocksOfType<IMyGyro>(sameGrid);var cockpit=grid.GetByFilterOrAny<IMyCockpit>(sameGrid);var cameras=grid.GetBlocksOfType<IMyCameraBlock>();var turrets=grid.GetBlocksOfType<IMyLargeTurretBase>();var railguns=grid.GetLargeRailguns();var antennas=grid.GetBlocksOfType<IMyRadioAntenna>();var lcdTargets=cockpit.GetSurface(0);var lcdTorpedos=cockpit.GetSurface(1);var lcdSystem=cockpit.GetSurface(2);var sound=grid.GetSound("SOUND","SoundBlockEnemyDetected");var soundEnemyLock=grid.GetSound("LOCK_SOUND","SoundBlockAlert1");var hud=grid.GetBlocksOfType<IMyTextPanel>(p=>p.CustomName.StartsWith("HUD"));weapons=new WeaponController(gyros,cockpit,cameras,turrets,railguns,hud,lcdTargets,lcdTorpedos,lcdSystem,IGC,antennas,sound,soundEnemyLock);weapons.OnError+=HandleError;Runtime.UpdateFrequency=UpdateFrequency.Update1;}private void HandleError(Exception ex){Echo(ex.ToString());}public void Main(string argument,UpdateType updateSource){tracker.AddRuntime();switch(argument){case"filter":weapons.ToggleFilter();break;case"prev":weapons.PrevTarget();break;case"next":weapons.NextTarget();break;case"lock":weapons.Scan(camera);break;case"reload":var groups=grid.GetBlockGroups(GROUP_PREFIX_TORPEDO);weapons.Reload(groups);break;case"start":weapons.Launch();break;}weapons.UpdateNext(argument,updateSource);tracker.AddInstructions();trackerLcd.WriteText(tracker.ToString());}