//7/12/2024 1:46:23 AM
public class Grid{readonly IMyGridTerminalSystem system;public Grid(IMyGridTerminalSystem system){this.system=system;}public IMyBlockGroup[]GetBlockGroups(string prefix=""){var groups=new List<IMyBlockGroup>();system.GetBlockGroups(groups,g=>g.Name.StartsWith(prefix,StringComparison.OrdinalIgnoreCase));return groups.ToArray();}public T[]GetBlocksOfType<T>(Func<T,bool>filter=null)where T:class,IMyTerminalBlock{var list=new List<T>();system.GetBlocksOfType(list,filter);return list.ToArray();}public T GetBlockWithName<T>(string name)where T:class,IMyTerminalBlock{return system.GetBlockWithName(name)as T;}public IMyCameraBlock GetCamera(string name){var camera=GetBlockWithName<IMyCameraBlock>(name);if(camera!=null){camera.Enabled=true;camera.EnableRaycast=true;}return camera;}public IMySmallMissileLauncherReload[]GetLargeRailguns(Func<IMySmallMissileLauncherReload,bool>filter=null){return GetBlocksOfType<IMySmallMissileLauncherReload>(b=>b.BlockDefinition.SubtypeId=="LargeRailgun"&&(filter==null||filter(b))).ToArray();}public IMySmallMissileLauncher[]GetArtillery(Func<IMySmallMissileLauncher,bool>filter=null){return GetBlocksOfType<IMySmallMissileLauncher>(b=>b.BlockDefinition.SubtypeId=="LargeBlockLargeCalibreGun"&&(filter==null||filter(b))).ToArray();}public IMyLargeMissileTurret[]GetArtilleryTurrets(Func<IMyLargeMissileTurret,bool>filter=null){return GetBlocksOfType<IMyLargeMissileTurret>(b=>b.BlockDefinition.SubtypeId=="LargeCalibreTurret"&&(filter==null||filter(b))).ToArray();}public IMySoundBlock GetSound(string name,string soundName="SoundBlockAlert2"){var sound=GetBlockWithName<IMySoundBlock>(name);if(sound!=null){sound.Enabled=true;sound.SelectedSound=soundName;sound.Volume=1;sound.Range=100;}return sound;}public T GetByFilterOrAny<T>(Func<T,bool>filter=null,Action<T>init=null)where T:class,IMyTerminalBlock{var all=new List<T>();system.GetBlocksOfType(all,filter);T res=null;if(filter!=null){res=all.FirstOrDefault(filter);}if(res==null){res=all.FirstOrDefault();}if(res!=null&&init!=null){init(res);}return res;}}public class LocalTime{private const double oneTickMs=1000/60;private IMyGridProgramRuntimeInfo runtime;private DateTime initial;private long currentTick=0;private TimeSpan offset=TimeSpan.Zero;private DateTime now;private double avg=0;public DateTime Now=>now;public long CurrentTick=>currentTick;public double Avg=>avg;public LocalTime(IMyGridProgramRuntimeInfo runtime,DateTime?initial=null){this.initial=initial??DateTime.MinValue;this.runtime=runtime;}public DateTime Update(UpdateType updateSource){switch(updateSource){case UpdateType.Update1:avg=avg*0.99+runtime.LastRunTimeMs*0.01;currentTick++;offset=TimeSpan.Zero;break;case UpdateType.Update10:currentTick+=10;offset=TimeSpan.Zero;break;case UpdateType.Update100:currentTick+=100;offset=TimeSpan.Zero;break;default:offset+=runtime.TimeSinceLastRun;break;}now=initial.AddMilliseconds(currentTick*oneTickMs)+offset;return now;}}public class TargetInfo{const int HIT_POINT_DEPTH=5;public MyDetectedEntityInfo Entity{get;private set;}public DateTime Timestamp{get;private set;}public DateTime NextScan{get;private set;}public Vector3D HitPosRelative{get;private set;}public Vector3D GetHitPosWorld(){return Entity.Position+Vector3D.Transform(HitPosRelative,Entity.Orientation);}public TargetInfo(MyDetectedEntityInfo entity=default(MyDetectedEntityInfo),DateTime timestamp=default(DateTime),DateTime nextScan=default(DateTime),Vector3D hitPosRelative=default(Vector3D)){Entity=entity;Timestamp=timestamp;NextScan=nextScan;HitPosRelative=hitPosRelative;}public TargetInfo Update(MyDetectedEntityInfo entity,DateTime timestamp,DateTime nextScan){Entity=entity;Timestamp=timestamp;NextScan=nextScan;return this;}public void UpdateNextScan(DateTime nextScan){NextScan=nextScan;}public static TargetInfo CreateTargetInfo(MyDetectedEntityInfo entity,Vector3D camPos,DateTime timestamp,DateTime?nextScan=null){var relativeHitPos=default(Vector3D);if(entity.HitPosition.HasValue){var hitPos=entity.HitPosition.Value;var correctedHitPos=hitPos+Vector3D.Normalize(hitPos-camPos)*HIT_POINT_DEPTH;var invertedMatrix=MatrixD.Invert(entity.Orientation);relativeHitPos=Vector3D.Transform(correctedHitPos-entity.Position,invertedMatrix);}return new TargetInfo(entity,timestamp,nextScan??timestamp,relativeHitPos);}}public static class Serializer{const char DIV=';';public class StringReader{private readonly string[]lines;private int nextPos=0;public StringReader(string value){lines=value.Split('\n');}public string GetNextLine(){return nextPos>=lines.Length?"":lines[nextPos++];}}public static void SerializeVector3D(Vector3D v,StringBuilder sb){sb.AppendLine(v.ToString());}public static void SerializeDateTime(DateTime d,StringBuilder sb){sb.AppendLine(d.ToBinary().ToString());}public static void SerializeMatrixD(MatrixD m,StringBuilder sb){var a=new double[]{m.M11,m.M12,m.M13,m.M14,m.M21,m.M22,m.M23,m.M24,m.M31,m.M32,m.M33,m.M34,m.M41,m.M42,m.M43,m.M44,};sb.AppendLine(string.Join(DIV.ToString(),a));}public static void SerializeMyDetectedEntityInfo(MyDetectedEntityInfo entity,StringBuilder sb){sb.AppendLine(entity.EntityId.ToString());sb.AppendLine(entity.Type.ToString());sb.AppendLine(entity.HitPosition?.ToString()??string.Empty);SerializeMatrixD(entity.Orientation,sb);sb.AppendLine(new Vector3D(entity.Velocity).ToString());sb.AppendLine(entity.Relationship.ToString());sb.AppendLine(entity.BoundingBox.Min.ToString());sb.AppendLine(entity.BoundingBox.Max.ToString());sb.AppendLine(entity.TimeStamp.ToString());}public static void SerializeTargetInfo(TargetInfo t,StringBuilder sb){SerializeMyDetectedEntityInfo(t.Entity,sb);SerializeVector3D(t.HitPosRelative,sb);SerializeDateTime(t.Timestamp,sb);}public static void SerializeTargetInfoArray(TargetInfo[]a,StringBuilder sb){sb.AppendLine(a.Length.ToString());foreach(var t in a){SerializeTargetInfo(t,sb);}}public static bool TryParseMatrixD(StringReader reader,out MatrixD m){try{var a=reader.GetNextLine().Split(DIV).Select(s=>double.Parse(s)).ToArray();m=new MatrixD(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]);return true;}catch{m=MatrixD.Zero;return false;}}public static bool TryParseNullableVector3D(StringReader reader,out Vector3D?v){var str=reader.GetNextLine();if(string.IsNullOrEmpty(str)){v=null;return true;}Vector3D tmp;if(Vector3D.TryParse(str,out tmp)){v=tmp;return true;}v=null;return false;}public static bool TryParseBoundingBoxD(StringReader reader,out BoundingBoxD b){string strMin=reader.GetNextLine();string strMax=reader.GetNextLine();Vector3D min,max;if(Vector3D.TryParse(strMin,out min)&&Vector3D.TryParse(strMax,out max)){b=new BoundingBoxD(min,max);return true;}b=new BoundingBoxD();return false;}public static bool TryParseMyDetectedEntityInfo(StringReader reader,out MyDetectedEntityInfo entity){var success=true;long entityId;success&=long.TryParse(reader.GetNextLine(),out entityId);MyDetectedEntityType type;success&=MyDetectedEntityType.TryParse(reader.GetNextLine(),out type);Vector3D?hitPosition;success&=TryParseNullableVector3D(reader,out hitPosition);MatrixD orientation;success&=TryParseMatrixD(reader,out orientation);Vector3D velocity;success&=Vector3D.TryParse(reader.GetNextLine(),out velocity);MyRelationsBetweenPlayerAndBlock relationship;success&=MyRelationsBetweenPlayerAndBlock.TryParse(reader.GetNextLine(),out relationship);BoundingBoxD boundingBox;success&=TryParseBoundingBoxD(reader,out boundingBox);long timestamp;success&=long.TryParse(reader.GetNextLine(),out timestamp);entity=success?new MyDetectedEntityInfo(entityId,string.Empty,type,hitPosition,orientation,velocity,relationship,boundingBox,timestamp):new MyDetectedEntityInfo();return success;}public static bool TryParseVector3D(StringReader reader,out Vector3D v){return Vector3D.TryParse(reader.GetNextLine(),out v);}public static bool TryParseDateTime(StringReader reader,out DateTime d){long ts;if(long.TryParse(reader.GetNextLine(),out ts)){d=DateTime.FromBinary(ts);return true;}d=DateTime.MinValue;return false;}public static bool TryParseTargetInfo(StringReader reader,out TargetInfo targetInfo){targetInfo=new TargetInfo();MyDetectedEntityInfo entity;if(!TryParseMyDetectedEntityInfo(reader,out entity))return false;Vector3D hitPos;if(!TryParseVector3D(reader,out hitPos))return false;DateTime timestamp;if(!TryParseDateTime(reader,out timestamp))return false;targetInfo=new TargetInfo(entity,timestamp,timestamp,hitPos);return true;}public static bool TryParseTargetInfoArray(StringReader reader,out TargetInfo[]result){TargetInfo target;int length;if(!int.TryParse(reader.GetNextLine(),out length)){result=null;return false;}result=new TargetInfo[length];for(var i=0;i<length;i++){if(TryParseTargetInfo(reader,out target)){result[i]=target;}else{result=null;return false;}}return true;}}public class TargetTracker{public static readonly string[]names=new[]{"корова","пёс","кролик","конь","медвед","кот","болт","кабан","волк","бобр","жук","zombie","сом",};public static string GetName(long entityId){var name=names[entityId%names.Length];var index=entityId%89;return$"{name}-{index}";}const int SCAN_DELAY_MS=20;const double DISTANCE_SCAN_DEFAULT=7500;const int TARGET_RELEASE_TIMEOUT=2;static readonly HashSet<MyDetectedEntityType>targetTypes=new HashSet<MyDetectedEntityType>{MyDetectedEntityType.SmallGrid,MyDetectedEntityType.LargeGrid};public readonly IMyCameraBlock[]cameras;private int camIndex=0;public TargetInfo Current;public event Action TargetLocked;public event Action TargetReleased;public int Count{get{return cameras.Length;}}public double TotalRange{get{return cameras.Aggregate(0d,(a,c)=>a+c.AvailableScanRange);}}public TargetTracker(IMyCameraBlock[]cameras){this.cameras=cameras;foreach(var cam in this.cameras){cam.Enabled=true;cam.EnableRaycast=true;}}private static TargetInfo GetTargetInfo(DateTime now,IMyCameraBlock cam,MyDetectedEntityInfo entity){if(entity.IsEmpty()){return null;}if(!targetTypes.Contains(entity.Type)){return null;}var camPos=cam.GetPosition();return TargetInfo.CreateTargetInfo(entity,camPos,now);}public static TargetInfo Scan(DateTime now,IMyCameraBlock[]cams,Vector3D?targetPos){if(!targetPos.HasValue){return null;}var cam=cams.FirstOrDefault(x=>x.CanScan(targetPos.Value));if(cam==null){return null;}var entity=cam.Raycast(targetPos.Value);return GetTargetInfo(now,cam,entity);}public static TargetInfo Scan(DateTime now,IMyCameraBlock cam,double distance=DISTANCE_SCAN_DEFAULT){if(cam==null){return null;}var entity=cam.Raycast(distance);return GetTargetInfo(now,cam,entity);}public void LockTarget(TargetInfo target){if(target!=null){Current=target;TargetLocked?.Invoke();}}public void Clear(){if(Current!=null){Current=null;TargetReleased?.Invoke();}}public void Update(DateTime now){if(Current==null){return;}var prevTarget=Current;if(now<prevTarget.NextScan){return;}var timePassed=now-prevTarget.Timestamp;var entity=ScanNextPosition(prevTarget,timePassed);if(entity.IsEmpty()){if(timePassed.TotalSeconds>TARGET_RELEASE_TIMEOUT){Clear();}}else{Current.Update(entity,now,now.AddMilliseconds(SCAN_DELAY_MS));}}private static Vector3D CalculateTargetLocation(TargetInfo info,TimeSpan timePassed){var target=info.Entity;return info.GetHitPosWorld()+(target.Velocity*Convert.ToSingle(timePassed.TotalSeconds));}private MyDetectedEntityInfo ScanNextPosition(TargetInfo prevTarget,TimeSpan timePassed){var calculatedTargetPos=CalculateTargetLocation(prevTarget,timePassed);var camera=GetNext(cameras,ref camIndex,cam=>cam.CanScan(calculatedTargetPos));if(camera==null){return default(MyDetectedEntityInfo);}var entity=camera.Raycast(calculatedTargetPos);if(entity.EntityId!=prevTarget.Entity.EntityId){return default(MyDetectedEntityInfo);}return entity;}public static T GetNext<T>(T[]a,ref int index,Func<T,bool>filter=null){if(a.Length==0){return default(T);}for(var count=0;count<a.Length;count++){index=(index+1)%a.Length;T block=a[index];if(filter==null||filter(block)){return block;}}return default(T);}}public static class Helpers{public class InterceptResult{public Vector3D Position;public double TimeMs;}public static InterceptResult CalculateInterceptPoint(Vector3D ownPosition,double interceptSpeed,Vector3D targetPosition,Vector3D targetVelocity){Vector3D directionToTarget=Vector3D.Normalize(targetPosition-ownPosition);double targetSpeedlOrth=Vector3D.Dot(targetVelocity,directionToTarget);Vector3D targetVelOrth=directionToTarget*targetSpeedlOrth;Vector3D targetVelTang=targetVelocity-targetVelOrth;double targetSpeedlTang=targetVelTang.Length();if(targetSpeedlTang>=interceptSpeed){return null;}double missileSpeedTang=targetSpeedlTang;double missileSpeedOrth=Math.Sqrt(interceptSpeed*interceptSpeed-missileSpeedTang*missileSpeedTang);if(targetSpeedlOrth>=missileSpeedOrth){return null;}double timeS=Vector3D.Distance(ownPosition,targetPosition)/(missileSpeedOrth-targetSpeedlOrth);Vector3D point=targetPosition+targetVelocity*timeS;return new InterceptResult{Position=point,TimeMs=timeS*1000};}}public class DirectionController2{public const double MIN_SPEED=50;public const float DEFAULT_FACTOR=2;readonly IMyShipController remoteControl;readonly IEnumerable<IMyGyro>gyroList;readonly float factor;public DirectionController2(IMyShipController remoteControl,IEnumerable<IMyGyro>gyroList,float factor=DEFAULT_FACTOR){this.remoteControl=remoteControl;this.gyroList=gyroList;this.factor=factor;}public void ICBM(MyDetectedEntityInfo target){var grav=remoteControl.GetNaturalGravity();var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var ownSpeed=Math.Max(velocity.Length(),MIN_SPEED);var point=Helpers.CalculateInterceptPoint(ownPos,ownSpeed,target.Position,target.Velocity);var targetPos=point==null?target.Position:point.Position;var targetVector=targetPos-ownPos;if(grav.IsZero()||targetVector.Length()<3500){Aim(targetPos);}else{Vector3D direction=CompensateSideVelocity(grav,targetVector);var axis=GetAxis(remoteControl.WorldMatrix.Forward,direction);SetGyroByAxis(axis,gyroList,factor);}}public void KeepHorizon(Vector3D?grav=null){var direction=grav??remoteControl.GetNaturalGravity();if(!direction.IsZero()){var axis=GetAxis(remoteControl.WorldMatrix.Down,direction);SetGyroByAxis(axis,gyroList,factor);}}public void Aim(Vector3D targetPos){var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var targetVector=CompensateSideVelocity(velocity,targetPos-ownPos);var axis=GetAxis(remoteControl.WorldMatrix.Forward,targetVector);SetGyroByAxis(axis,gyroList,factor);}public bool Intercept(Vector3D targetPosition,Vector3 targetVelocity){var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var ownSpeed=Math.Max(velocity.Length(),MIN_SPEED);var interceptPoint=Helpers.CalculateInterceptPoint(ownPos,ownSpeed,targetPosition,targetVelocity);var aimingPointPosition=interceptPoint?.Position??targetPosition;var direction=aimingPointPosition-ownPos;var compensatedTargetVector=CompensateSideVelocity(velocity,direction);var axis=GetAxis(remoteControl.WorldMatrix.Forward,compensatedTargetVector);SetGyroByAxis(axis,gyroList,factor);return interceptPoint!=null;}public bool InterceptShot(MyDetectedEntityInfo target,double bulletSpeed){var ownPos=remoteControl.GetPosition();var ownVelocity=remoteControl.GetShipVelocities().LinearVelocity;var relativeTargetVelocity=target.Velocity-ownVelocity;var point=Helpers.CalculateInterceptPoint(ownPos,bulletSpeed,target.Position,relativeTargetVelocity);var targetVector=point==null?(target.Position-ownPos):(point.Position-ownPos);var axis=GetAxis(remoteControl.WorldMatrix.Forward,targetVector);SetGyroByAxis(axis,gyroList,factor);return point!=null;}public static Vector3D CompensateSideVelocity(Vector3D velocity,Vector3D targetVector,float ratio=1){var sideVelocity=Vector3D.Reject(velocity,Vector3D.Normalize(targetVector));var sameDirection=Vector3D.Dot(velocity,targetVector)>0;return sameDirection?velocity-(1+ratio)*sideVelocity:(1-ratio)*sideVelocity-velocity;}public static Vector3D GetAxis(Vector3D currentDirection,Vector3D targetDirection){var target=Vector3D.Normalize(targetDirection);var current=Vector3D.Normalize(currentDirection);var axis=target.Cross(current);if(target.Dot(current)<0){axis=Vector3D.Normalize(axis);}return axis;}public static void SetGyroByAxis(Vector3D axis,IEnumerable<IMyGyro>gyroList,float factor=DEFAULT_FACTOR){foreach(var gyro in gyroList){gyro.Yaw=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Up));gyro.Pitch=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Right));gyro.Roll=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Backward));}}}public class PID{public double Kp{get;set;}public double Ki{get;set;}public double Kd{get;set;}private Vector3D errorSum;private Vector3D lastError;private DateTime lastErrorTimestamp;private bool firstRun=true;public Vector3D LastError{get{return this.lastError;}}public PID(double kp,double ki,double kd){Kp=kp;Ki=ki;Kd=kd;}protected virtual Vector3D GetIntegral(Vector3D currentError,Vector3D errorSum,double dt){return errorSum+currentError*dt;}public Vector3D Control(Vector3D axis,DateTime now,bool proportionalOnly=false){var Sp=Kp*axis;if(proportionalOnly){firstRun=true;return Sp;}if(firstRun){errorSum=Vector3D.Zero;lastError=Vector3D.Zero;lastErrorTimestamp=now;firstRun=false;}var dt=(now-lastErrorTimestamp).TotalSeconds;Vector3D errorDerivative=(axis-lastError)/dt;errorSum=GetIntegral(axis,errorSum,dt);lastError=axis;lastErrorTimestamp=now;return Sp+Ki*errorSum+Kd*errorDerivative;}public virtual void Reset(){firstRun=true;}}public class DecayingIntegralPID:PID{public double IntegralDecayRatio{get;set;}public DecayingIntegralPID(double kp,double ki,double kd,double decayRatio):base(kp,ki,kd){IntegralDecayRatio=decayRatio;}protected override Vector3D GetIntegral(Vector3D currentError,Vector3D errorSum,double timeStep){return(1.0-IntegralDecayRatio)*errorSum+currentError*timeStep;}}public enum AimbotState{UNKNOWN,READY,TOO_CLOSE,TOO_FAR,}public class Aimbot{private const double PROPORTIONAL_MODE_LIMIT=0.07;private const double MIN_DISTANCE=600;private const double MAX_DISTANCE=1900;private const double ACCURACY_LIMIT=0.012;private readonly PID pid=new DecayingIntegralPID(1,1,0,0);private readonly IMyShipController remoteControl;private readonly IEnumerable<IMyGyro>gyroList;public Aimbot(IMyShipController remoteControl,IEnumerable<IMyGyro>gyroList){this.remoteControl=remoteControl;this.gyroList=gyroList;}public AimbotState Aim(TargetInfo targetInfo,double bulletSpeed,DateTime now){var target=targetInfo.Entity;var ownPos=remoteControl.CenterOfMass;var ownVelocity=remoteControl.GetShipVelocities().LinearVelocity;var targetPos=targetInfo.GetHitPosWorld();var relativeTargetVelocity=target.Velocity-ownVelocity;var point=Helpers.CalculateInterceptPoint(ownPos,bulletSpeed,targetPos,relativeTargetVelocity);var targetVector=point==null?(targetPos-ownPos):(point.Position-ownPos);var axis=DirectionController2.GetAxis(remoteControl.WorldMatrix.Forward,targetVector);var proportionalMode=axis.Length()>PROPORTIONAL_MODE_LIMIT;axis=pid.Control(axis,now,proportionalMode);DirectionController2.SetGyroByAxis(axis,gyroList);var distance=targetVector.Length();if(distance<MIN_DISTANCE){return AimbotState.TOO_CLOSE;}else if(distance>MAX_DISTANCE){return AimbotState.TOO_FAR;}else if(!proportionalMode&&pid.LastError.Length()<ACCURACY_LIMIT){return AimbotState.READY;}return AimbotState.UNKNOWN;}public AimbotState Reset(){pid.Reset();return AimbotState.UNKNOWN;}}public enum FiringMode{Auto,Forward}public enum ForwardWeapon{Artillery,Railgun,}public class WeaponState{public int TorpedosCount{get;set;}public int RalgunsCount{get;set;}public float RalgunsСharge{get;set;}public int RalgunsReadyCount{get;set;}public int TurretsCount{get;set;}public FiringMode TurretsFiringMode{get;set;}}public class HudState{public double AvgRuntime{get;set;}public Vector3D?AITarget{get;set;}public TargetInfo Target{get;set;}public ForwardWeapon?Aimbot{get;set;}public WeaponState Weapon{get;set;}public bool EnemyLock{get;set;}}public class HUD{const int BEACON_RADIUS=70;private static readonly HashSet<MyRelationsBetweenPlayerAndBlock>friends=new HashSet<MyRelationsBetweenPlayerAndBlock>{MyRelationsBetweenPlayerAndBlock.Owner,MyRelationsBetweenPlayerAndBlock.FactionShare,MyRelationsBetweenPlayerAndBlock.Friends,MyRelationsBetweenPlayerAndBlock.Neutral,};private readonly IMyTextPanel[]displays;private readonly IMyBeacon beacon;private readonly Func<DateTime,HudState>getState;private DateTime lastUpdateHUD;public HUD(IMyTextPanel[]displays,IMyBeacon beacon,Func<DateTime,HudState>getState){this.getState=getState;this.beacon=beacon;this.beacon.Enabled=true;this.beacon.Radius=BEACON_RADIUS;this.displays=displays;foreach(var d in displays){d.Enabled=true;d.ContentType=ContentType.SCRIPT;d.BackgroundColor=Color.Black;d.BackgroundAlpha=0;}}public void Update(DateTime now,Vector3D selfPos){lastUpdateHUD=now;var state=getState(now);var w=state.Weapon;string targetName=null;string dist=null;if(state.Target!=null){var t=state.Target.Entity;var d=(t.Position-selfPos).Length();var size=t.Type==MyDetectedEntityType.SmallGrid?"SM":"LG";var name=TargetTracker.GetName(t.EntityId);targetName=friends.Contains(t.Relationship)?$"{size} ∙ {t.Name}":$"{size} ∙ {name}";dist=d.ToString("0m");}var tm=w.TurretsFiringMode==FiringMode.Forward?"Fwd":"Auto";var turrets=w.TurretsCount>0?$"{w.TurretsCount} ∙ {tm}":tm;var aimbot=GetAimbotText(state.Aimbot);var ai="empty";if(state.AITarget.HasValue){var aiDist=(state.AITarget.Value-selfPos).Length();ai=$"{aiDist:0}m";}var sprites=GetSprites(ai,targetName,dist,aimbot,turrets,w.TorpedosCount,state.EnemyLock,w.RalgunsCount,w.RalgunsReadyCount,w.RalgunsСharge);foreach(var lcd in displays){using(var frame=lcd.DrawFrame()){frame.AddRange(sprites);if(state.AITarget.HasValue){lcd.ContentType=ContentType.TEXT_AND_IMAGE;frame.AddRange(GetTargetSprite(lcd,state.AITarget.Value));lcd.ContentType=ContentType.SCRIPT;}}}var ti=targetName==null?"NO TARGET":$"{targetName} ∙ {dist}";var p=w.RalgunsСharge*100;var rp=p>0?$" ∙ {p:0}%":"";beacon.HudText=$"{ti} | AI: {ai}\n{aimbot} | {tm} | Rail: {w.RalgunsReadyCount}{rp}\nAvg: {state.AvgRuntime:0.000ms}";}private string GetAimbotText(ForwardWeapon?aimbot){switch(aimbot){case ForwardWeapon.Railgun:return"Rail";case ForwardWeapon.Artillery:return"Art";default:return"Off";}}const float CAM_DISTANCE=3.75f;const float LCD_HALF_WIDTH=1.1f;private MySprite[]GetTargetSprite(IMyTextPanel screen,Vector3D targetPos){var c=Color.Orange;var m=screen.WorldMatrix;var screenPos=screen.GetPosition();var camPos=screenPos+m.Backward*CAM_DISTANCE;var targetVector=targetPos-camPos;var rate=CAM_DISTANCE/targetVector.Length();var v=targetVector.Dot(m.Down)*rate;var h=targetVector.Dot(m.Right)*rate;var d=targetVector.Dot(m.Forward);var maxPos=Math.Max(Math.Abs(h),Math.Abs(v));if(d>0&&maxPos<LCD_HALF_WIDTH){var x=Convert.ToInt32(256*(1+h/LCD_HALF_WIDTH));var y=Convert.ToInt32(256*(1+v/LCD_HALF_WIDTH));return new MySprite[]{new MySprite{Type=SpriteType.TEXTURE,Data="SquareHollow",Position=new Vector2(x-16,y),Size=new Vector2(32,32),Color=c}};}else{var x=Convert.ToInt32(256*(1+h/maxPos));var y=Convert.ToInt32(256*(1+v/maxPos));var data=d<0?"Triangle":"SquareSimple";return new MySprite[]{new MySprite{Type=SpriteType.TEXTURE,Data=data,Position=new Vector2(x>256?x-12:x,y>256?y-12:y),Size=new Vector2(12,12),Color=c}};}}private MySprite[]GetSprites(string aiTarget,string targetName,string dist,string aimbot,string turrets,int tCount,bool enemyLock,int rgTotal,int rgReady,float rgChargeLevel){var list=new List<MySprite>();list.AddRange(Text("target",targetName??"NO TARGET",TextAlignment.CENTER,TOP));if(dist!=null){list.AddRange(Text("dist",dist,TextAlignment.LEFT,TOP));}list.AddRange(Text("AI target",aiTarget,TextAlignment.RIGHT,TOP));list.AddRange(Text("torpedos",tCount.ToString(),TextAlignment.RIGHT,TOP+1));list.AddRange(Text("aimbot",aimbot,TextAlignment.CENTER,BOTTOM));list.AddRange(Text("turrets",turrets,TextAlignment.LEFT,BOTTOM));if(enemyLock){list.AddRange(Text(null,"ENEMY LOCK",TextAlignment.CENTER,BOTTOM-1,color:Color.OrangeRed));}if(rgTotal>0){list.AddRange(Text("railgun",$"{rgReady} / {rgTotal}",TextAlignment.RIGHT,BOTTOM));list.Add(new MySprite(){Type=SpriteType.TEXTURE,Data="SquareSimple",Position=new Vector2(452,509),Size=new Vector2(Convert.ToInt32(60*rgChargeLevel),3),Color=Color.Teal,});}return list.ToArray();}const int TOP=0;const int BOTTOM=9;const int LABEL_HEIGHT=20;const int VALUE_HEIGHT=30;const int LINE_HEIGHT=51;const int CELL_WIDTH=128;private MySprite[]Text(string label,string text,TextAlignment alignment,byte line=TOP,byte offset=0,Color?color=null){int x=0;switch(alignment){case TextAlignment.LEFT:x=0+offset*CELL_WIDTH;break;case TextAlignment.RIGHT:x=512-offset*CELL_WIDTH;break;case TextAlignment.CENTER:x=256;break;}int y=line*LINE_HEIGHT;var valueSprite=new MySprite(){Type=SpriteType.TEXT,Data=text,Position=new Vector2(x,y+LABEL_HEIGHT),RotationOrScale=1f,Color=color??Color.White,Alignment=alignment,FontId="White"};if(string.IsNullOrEmpty(label)){return new[]{valueSprite};}return new[]{new MySprite{Type=SpriteType.TEXT,Data=label,Position=new Vector2(x,y),RotationOrScale=0.8f,Color=Color.Teal,Alignment=alignment,FontId="White"},valueSprite};}}public enum LaunchStage{Ready,Started,Dead,Invalid}public struct TorpedoStatus{public LaunchStage Stage;public string Name;public double Distance;public override string ToString(){return Stage==LaunchStage.Started?$"{Name}: {Stage} => {Distance:0}m":$"{Name}: {Stage}";}}public abstract class BaseTorpedo{protected readonly int delay;protected readonly int lifespan;protected readonly string name;protected readonly DirectionController2 tControl;protected readonly IMyRemoteControl tRemote;protected readonly IMyShipMergeBlock tClamp;protected readonly List<IMyGyro>listGyro=new List<IMyGyro>();protected readonly List<IMyThrust>listEngine=new List<IMyThrust>();protected readonly List<IMyGasGenerator>listH2Gen=new List<IMyGasGenerator>();protected DateTime startTime=DateTime.MaxValue;protected DateTime deathTime=DateTime.MaxValue;protected bool started=false;public long EntityId=>(tRemote?.EntityId).GetValueOrDefault();public string Name=>name;public Vector3D Position=>tRemote.GetPosition();public double GetSpeed(DateTime now)=>started&&IsAlive(now)?tRemote.GetShipSpeed():0;public bool IsInvalid=>!listEngine.Any()||!listGyro.Any()||tRemote==null||tClamp==null;public LaunchStage GetStage(DateTime now)=>!IsAlive(now)?LaunchStage.Dead:started?LaunchStage.Started:IsInvalid?LaunchStage.Invalid:LaunchStage.Ready;public bool IsAlive(DateTime now)=>tRemote.IsFunctional&&listEngine.All(e=>e.IsFunctional&&e.CubeGrid.EntityId==tRemote.CubeGrid.EntityId)&&listGyro.All(g=>g.IsFunctional&&g.CubeGrid.EntityId==tRemote.CubeGrid.EntityId)&&now<deathTime;protected BaseTorpedo(IMyBlockGroup group,int delay=2000,float factor=7,int lifespan=360){name=group.Name;this.delay=delay;this.lifespan=lifespan;group.GetBlocksOfType(listGyro);group.GetBlocksOfType(listEngine);group.GetBlocksOfType(listH2Gen);var tmp=new List<IMyTerminalBlock>();group.GetBlocks(tmp);tClamp=tmp.FirstOrDefault(b=>b is IMyShipMergeBlock)as IMyShipMergeBlock;tRemote=tmp.FirstOrDefault(b=>b is IMyRemoteControl)as IMyRemoteControl;tControl=new DirectionController2(tRemote,listGyro,factor);}public virtual void Start(DateTime now){startTime=now;deathTime=startTime.AddSeconds(lifespan);tClamp.Enabled=false;listGyro.ForEach(g=>{g.Enabled=true;g.GyroOverride=true;});listH2Gen.ForEach(g=>{g.Enabled=true;});listEngine.ForEach(e=>{e.Enabled=true;e.ThrustOverridePercentage=1;});started=true;}public virtual TorpedoStatus Update(DateTime now,TargetInfo target){double distance=0;if((now-startTime).TotalMilliseconds>delay){if(target!=null){distance=(target.Entity.Position-Position).Length();SetDirection(target,distance);}}return new TorpedoStatus{Name=name,Stage=GetStage(now),Distance=distance,};}protected abstract void SetDirection(TargetInfo targetInfo,double distance);}public class SpaceTorpedo:BaseTorpedo{const double INTERCEPT_DISTANCE=800;public SpaceTorpedo(IMyBlockGroup group,int delay=2000,float factor=7,int lifespan=480):base(group,delay,factor,lifespan){}protected override void SetDirection(TargetInfo targetInfo,double distance){var targetPos=targetInfo.GetHitPosWorld();if(distance<INTERCEPT_DISTANCE){tControl.Intercept(targetPos,targetInfo.Entity.Velocity);}else{tControl.Aim(targetPos);}}}public class WeaponController{const int RAYCAST_DISTANCE=6500;const int TORPEDO_LIFESPAN=600;const int BEACON_RADIUS=70;public const int AIMBOT_RAILGUN_SPEED=2000;public const int AIMBOT_ARTILLERY_SPEED=500;private LocalTime localTime;private TargetTracker tracker;private IMyTextSurface lcdTorpedos;private IMyTextSurface lcdSystem;private IMyShipController cockpit;private IMySoundBlock sound;private IMySoundBlock soundEnemyLock;private IMySmallMissileLauncherReload[]railguns;private IMySmallMissileLauncher[]artillery;private IMyLargeMissileTurret[]turrets;public bool EnemyLock{get;private set;}public FiringMode FiringMode{get;private set;}public ForwardWeapon?Aimbot{get;private set;}public TargetInfo CurrentTarget=>tracker.Current;public WeaponState GetState(DateTime now){var railguns=this.railguns.Where(r=>r.IsWorking).ToArray();int rgReadyCount=0;float rgPercent=0;for(int i=0;i<railguns.Length;i++){var value=GetRailgunChargeLevel(railguns[i]);if(value>0.99){rgReadyCount++;}if(value<0.99&&value>rgPercent){rgPercent=value;}}var torpedosCount=torpedos.Values.Count(t=>t.GetStage(now)==LaunchStage.Ready);var turretsCount=turrets.Count(t=>t.IsWorking);return new WeaponState{RalgunsСharge=rgPercent,RalgunsCount=railguns.Length,RalgunsReadyCount=rgReadyCount,TorpedosCount=torpedosCount,TurretsCount=turretsCount,TurretsFiringMode=FiringMode,};}private AimbotState lastAimbotState=AimbotState.UNKNOWN;private DateTime lastAimbotStateUpdated;private void SetAimbotState(DateTime now,AimbotState state){if(state!=lastAimbotState){lastAimbotStateUpdated=now;}lastAimbotState=state;}public event Action<Exception>OnError;readonly Aimbot aimbot;readonly Dictionary<long,SpaceTorpedo>torpedos=new Dictionary<long,SpaceTorpedo>();public WeaponController(LocalTime localTime,IMyGyro[]gyros,IMyShipController cockpit,IMyCameraBlock[]cameras,IMyLargeMissileTurret[]turrets,IMySmallMissileLauncherReload[]railguns,IMySmallMissileLauncher[]artillery,IMyTextSurface lcdTorpedos,IMyTextSurface lcdSystem,IMySoundBlock sound,IMySoundBlock soundEnemyLock){this.localTime=localTime;tracker=new TargetTracker(cameras);tracker.TargetLocked+=Tracker_TargetChanged;tracker.TargetReleased+=Tracker_TargetChanged;this.cockpit=cockpit;this.lcdTorpedos=lcdTorpedos;this.lcdSystem=lcdSystem;this.railguns=railguns;this.artillery=artillery;this.turrets=turrets;this.sound=sound;this.soundEnemyLock=soundEnemyLock;aimbot=new Aimbot(cockpit,gyros);}public void Scan(IMyCameraBlock cam){var now=localTime.Now;var target=TargetTracker.Scan(now,cam,RAYCAST_DISTANCE);if(target!=null){tracker.LockTarget(target);}}public void Scan(Vector3D?targetPos){var now=localTime.Now;var target=TargetTracker.Scan(now,tracker.cameras,targetPos);if(target!=null){tracker.LockTarget(target);}}public void Reload(IMyBlockGroup[]groups){var now=localTime.Now;foreach(var gr in groups){var tmp=new SpaceTorpedo(gr,factor:2f,lifespan:TORPEDO_LIFESPAN);if(!torpedos.ContainsKey(tmp.EntityId)){torpedos.Add(tmp.EntityId,tmp);}}foreach(var t in torpedos.ToArray()){if(!t.Value.IsAlive(now)){torpedos.Remove(t.Key);}}}public void ToggleAimbot(){var now=localTime.Now;switch(Aimbot){case null:Aimbot=ForwardWeapon.Artillery;break;case ForwardWeapon.Artillery:Aimbot=ForwardWeapon.Railgun;break;default:Aimbot=null;break;}SetAimbotState(now,aimbot.Reset());}public void SetEnemyLock(){EnemyLock=true;soundEnemyLock?.Play();}public void ClearEnemyLock(){EnemyLock=false;soundEnemyLock?.Stop();}public void ToggleFiringMode(){FiringMode=FiringMode==FiringMode.Forward?FiringMode.Auto:FiringMode.Forward;foreach(var t in turrets){if(FiringMode==FiringMode.Forward){t.Range=0;t.EnableIdleRotation=false;t.SyncEnableIdleRotation();}else{t.Range=1000;t.EnableIdleRotation=true;t.SyncEnableIdleRotation();}}}public bool Launch(){var now=localTime.Now;var torpedo=torpedos.Values.FirstOrDefault(t=>t.GetStage(now)==LaunchStage.Ready);if(torpedo==null){return false;}torpedo.Start(now);return true;}private bool Exec(Action action){try{action();}catch(Exception e){OnError(e);}return true;}private IEnumerator<bool>GetEventLoop(){while(true){yield return Exec(()=>tracker.Update(localTime.Now));yield return Exec(()=>UpdateAimbot(localTime.Now));yield return Exec(()=>tracker.Update(localTime.Now));yield return Exec(()=>UpdateTorpedoTargets(localTime.Now));yield return Exec(()=>UpdateLcdSystem());}}private IEnumerator<bool>actions=null;public void UpdateNext(){var a=actions??(actions=GetEventLoop());if(!a.MoveNext()){a.Dispose();actions=null;}}public bool AimbotIsActive{get{return Aimbot.HasValue&&tracker.Current!=null;}}private void UpdateAimbot(DateTime now){if(FiringMode==FiringMode.Forward){foreach(var t in turrets){t.Range=0;t.SetManualAzimuthAndElevation(0,0);t.SyncAzimuth();t.SyncElevation();}}if(Aimbot.HasValue){var target=tracker.Current;if(target!=null){SetAimbotState(now,aimbot.Aim(target,GetBulletSpeed(Aimbot.Value),now));if(lastAimbotState==AimbotState.READY&&(now-lastAimbotStateUpdated).TotalMilliseconds>500){IMyUserControllableGun[]list=null;IMyLargeMissileTurret[]listTurrets=null;switch(Aimbot){case ForwardWeapon.Railgun:list=railguns.Where(r=>r.IsWorking).ToArray();break;case ForwardWeapon.Artillery:list=artillery.Where(r=>r.IsWorking).ToArray();if(FiringMode==FiringMode.Forward){listTurrets=turrets.Where(r=>r.IsWorking&&r.Azimuth<0.001&&r.Elevation<0.001).ToArray();}break;}if(list!=null&&list.Any()){foreach(var r in list){r.ShootOnce();}}if(listTurrets!=null&&listTurrets.Any()){foreach(var r in listTurrets){r.ShootOnce();}}}}}}private double GetBulletSpeed(ForwardWeapon value){switch(value){case ForwardWeapon.Railgun:return AIMBOT_RAILGUN_SPEED;case ForwardWeapon.Artillery:return AIMBOT_ARTILLERY_SPEED;}throw new Exception();}private void UpdateTorpedoTargets(DateTime now){var sb=new StringBuilder();var target=tracker.Current;foreach(var t in torpedos.Values){var state=t.Update(now,target);sb.AppendLine(state.ToString());}lcdTorpedos?.WriteText(sb);}private void UpdateLcdSystem(){var sb=new StringBuilder();sb.AppendLine($"Total range: {tracker.TotalRange:0.0}");sb.AppendLine($"Cam count: {tracker.Count}");lcdSystem?.WriteText(sb);}private void Tracker_TargetChanged(){sound?.Play();}private float GetRailgunChargeLevel(IMySmallMissileLauncherReload railgun,float max=500){if(railgun.BlockDefinition.SubtypeId!="LargeRailgun"){return 0f;}var lines=railgun.DetailedInfo.Split('\n');var chargeInfo=lines[1];var start=0;while(!char.IsDigit(chargeInfo[start])){start++;}var end=start+1;while(char.IsDigit(chargeInfo[end])||chargeInfo[end]=='.'){end++;}var strValue=chargeInfo.Substring(start,end-start);var current=Convert.ToSingle(strValue);float result=current/max;return result;}}private const string GROUP_PREFIX_TORPEDO="TORPEDO";private readonly IMyCameraBlock camera;private readonly Grid grid;private readonly LocalTime localTime;private readonly WeaponController weapons;private bool sameGrid<T>(T b)where T:IMyTerminalBlock{return b.CubeGrid==Me.CubeGrid;}public Program(){grid=new Grid(GridTerminalSystem);localTime=new LocalTime(Runtime);camera=grid.GetCamera("CAMERA");var gyros=grid.GetBlocksOfType<IMyGyro>(sameGrid);var cockpit=grid.GetByFilterOrAny<IMyCockpit>(sameGrid);var cameras=grid.GetBlocksOfType<IMyCameraBlock>();var turrets=grid.GetArtilleryTurrets();var railguns=grid.GetLargeRailguns();var artillery=grid.GetArtillery();var beacon=grid.GetBlockWithName<IMyBeacon>("ws_beacon");var lcdTargets=cockpit.GetSurface(0);var lcdTorpedos=cockpit.GetSurface(1);var lcdSystem=cockpit.GetSurface(2);var sound=grid.GetSound("SOUND","SoundBlockEnemyDetected");var soundEnemyLock=grid.GetSound("LOCK_SOUND","SoundBlockAlert1");var hud=grid.GetBlocksOfType<IMyTextPanel>(p=>p.CustomName.StartsWith("HUD"));weapons=new WeaponController(localTime,gyros,cockpit,cameras,turrets,railguns,artillery,lcdTorpedos,lcdSystem,sound,soundEnemyLock);weapons.OnError+=HandleError;Runtime.UpdateFrequency=UpdateFrequency.Update1;}private void HandleError(Exception ex){Echo(ex.ToString());}public void Main(string argument,UpdateType updateSource){var now=localTime.Update(updateSource);switch(argument){case"lock":weapons.Scan(camera);break;case"reload":var groups=grid.GetBlockGroups(GROUP_PREFIX_TORPEDO);weapons.Reload(groups);break;case"start":weapons.Launch();break;}weapons.UpdateNext();}