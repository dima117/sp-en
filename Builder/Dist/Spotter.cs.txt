//10/22/2023 6:53:49 PM
public class Transmitter{public const string TAG_ICBM_STATE="TAG_ICBM_STATE";public const string TAG_TARGET_POSITION="TAG_TARGET_POSITION";public const string TAG_ICBM_CONNECT="TAG_ICBM_CONNECT";public const int MIN_RANGE=10;public const int MAX_RANGE=50000;private BlockArray<IMyRadioAntenna>blocks;private IMyIntergridCommunicationSystem igc;private Dictionary<string,Action<MyIGCMessage>>actions=new Dictionary<string,Action<MyIGCMessage>>();private Dictionary<string,IMyBroadcastListener>listeners=new Dictionary<string,IMyBroadcastListener>();public Transmitter(MyGridProgram program){igc=program.IGC;blocks=new BlockArray<IMyRadioAntenna>(program,a=>{a.Radius=MIN_RANGE;a.EnableBroadcasting=true;a.Enabled=true;});}public void Subscribe(string tag,Action<MyIGCMessage>fn,bool broadcast=false){if(broadcast){var listener=igc.RegisterBroadcastListener(tag);var listenerId=Guid.NewGuid().ToString();listener.SetMessageCallback(listenerId);listeners.Add(listenerId,listener);}actions.Add(tag,fn);}public void Send(string tag,object data,long?destination=null){blocks.ForEach(a=>a.Radius=MAX_RANGE);if(destination.HasValue){igc.SendUnicastMessage(destination.Value,tag,data);}else{igc.SendBroadcastMessage(tag,data);}blocks.ForEach(a=>a.Radius=MIN_RANGE);}public void Update(string listenerId,UpdateType updateSource){if(updateSource==UpdateType.IGC){IMyMessageProvider listener=igc.UnicastListener;if(listeners.ContainsKey(listenerId)){listener=listeners[listenerId];}while(listener.HasPendingMessage){var message=listener.AcceptMessage();if(actions.ContainsKey(message.Tag)){actions[message.Tag](message);}}}}}private static readonly HashSet<MyDetectedEntityType>gridTypes=new HashSet<MyDetectedEntityType>{MyDetectedEntityType.SmallGrid,MyDetectedEntityType.LargeGrid};IMyCameraBlock cam;IMyTextSurface lcdTarget;IMyTextSurface lcdIcbm;Transmitter tsm;MyDetectedEntityInfo?target;public Program(){var list1=new List<IMyCameraBlock>();GridTerminalSystem.GetBlocksOfType(list1);cam=list1.First();cam.EnableRaycast=true;var list2=new List<IMyCockpit>();GridTerminalSystem.GetBlocksOfType(list2);lcdTarget=list2.FirstOrDefault()?.GetSurface(0);lcdIcbm=list2.FirstOrDefault()?.GetSurface(3);tsm=new Transmitter(this);tsm.Subscribe(Transmitter.TAG_ICBM_STATE,UpdateIcbmState);Runtime.UpdateFrequency=UpdateFrequency.Update10;}public void UpdateIcbmState(MyIGCMessage message){lcdIcbm.WriteText(message.Data.ToString());}public void UpdateTargetState(){if(lcdTarget!=null){if(target.HasValue){var dist=(target.Value.Position-cam.GetPosition()).Length();lcdTarget.WriteText($"{target.Value.Type}\ndist: {dist:0}m");}else{lcdTarget.WriteText("NO TARGET");}}}public void Main(string argument,UpdateType updateSource){tsm.Update(argument,updateSource);switch(argument){case"connect":tsm.Send(Transmitter.TAG_ICBM_CONNECT,string.Empty);break;case"shot":var entity=cam.Raycast(5000);if(gridTypes.Contains(entity.Type)){target=entity;}break;case"start":if(target.HasValue){tsm.Send(Transmitter.TAG_TARGET_POSITION,target.Value.Position);}break;case"reset":target=null;break;}UpdateTargetState();}