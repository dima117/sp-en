//12/24/2023 3:18:13 PM
public class MsgTags{public const string LOCK_TARGET="@LOCK_TARGET";public const string UPDATE_TARGET_POS="@UPDATE_TARGET_POS";public const string CLEAR_TARGET_POS="@CLEAR_TARGET_POS";}public class Transmitter{private int seq=0;private IMyIntergridCommunicationSystem igc;private List<IMyRadioAntenna>blocks=new List<IMyRadioAntenna>();private Dictionary<string,Action<MyIGCMessage>>actions=new Dictionary<string,Action<MyIGCMessage>>();private Dictionary<string,IMyBroadcastListener>listeners=new Dictionary<string,IMyBroadcastListener>();public Transmitter(MyGridProgram program){igc=program.IGC;igc.UnicastListener.SetMessageCallback();program.GridTerminalSystem.GetBlocksOfType(blocks);blocks.ForEach(a=>{a.EnableBroadcasting=true;a.Enabled=true;});}public void Subscribe(string tag,Action<MyIGCMessage>fn,bool broadcast=false){if(broadcast){var listener=igc.RegisterBroadcastListener(tag);var listenerId=(DateTime.UtcNow.Ticks-(seq++)).ToString();listener.SetMessageCallback(listenerId);listeners[listenerId]=listener;}actions[tag]=fn;}public virtual void Send(string tag,string data="",long?destination=null){if(destination.HasValue){igc.SendUnicastMessage(destination.Value,tag,data);}else{igc.SendBroadcastMessage(tag,data);}}public virtual void Update(string listenerId,UpdateType updateSource){if(updateSource==UpdateType.IGC){IMyMessageProvider listener=igc.UnicastListener;if(listeners.ContainsKey(listenerId)){listener=listeners[listenerId];}while(listener.HasPendingMessage){var message=listener.AcceptMessage();if(actions.ContainsKey(message.Tag)){actions[message.Tag](message);}}}}}public struct TargetInfo{public readonly MyDetectedEntityInfo Entity;public readonly Vector3D HitPos;public readonly DateTime Timestamp;public readonly double ScanDelayMs;public TargetInfo(MyDetectedEntityInfo entity=default(MyDetectedEntityInfo),DateTime timestamp=default(DateTime),double scanDelayMs=default(double),Vector3D hitPos=default(Vector3D)){Entity=entity;Timestamp=timestamp;ScanDelayMs=scanDelayMs;HitPos=hitPos;}public TargetInfo Update(MyDetectedEntityInfo entity,DateTime timestamp,double scanDelayMs){return new TargetInfo(entity,timestamp,scanDelayMs,HitPos);}public static TargetInfo CreateTargetInfo(MyDetectedEntityInfo entity,DateTime timestamp,Vector3D camPos){var relativeHitPos=default(Vector3D);if(entity.HitPosition.HasValue){var hitPos=entity.HitPosition.Value;var correctedHitPos=hitPos+Vector3D.Normalize(hitPos-camPos);var invertedMatrix=MatrixD.Invert(entity.Orientation);relativeHitPos=Vector3D.Transform(correctedHitPos-entity.Position,invertedMatrix);}return new TargetInfo(entity,timestamp,0,relativeHitPos);}}public static class Serializer{const char DIV=';';public class StringReader{private readonly string[]lines;private int nextPos=0;public StringReader(string value){lines=value.Split('\n');}public string GetNextLine(){return lines[nextPos++];}}public static void SerializeVector3D(Vector3D v,StringBuilder sb){sb.AppendLine(v.ToString());}public static void SerializeDateTime(DateTime d,StringBuilder sb){sb.AppendLine(d.ToBinary().ToString());}public static void SerializeMatrixD(MatrixD m,StringBuilder sb){var a=new double[]{m.M11,m.M12,m.M13,m.M14,m.M21,m.M22,m.M23,m.M24,m.M31,m.M32,m.M33,m.M34,m.M41,m.M42,m.M43,m.M44,};sb.AppendLine(string.Join(DIV.ToString(),a));}public static void SerializeMyDetectedEntityInfo(MyDetectedEntityInfo entity,StringBuilder sb){sb.AppendLine(entity.EntityId.ToString());sb.AppendLine(entity.Type.ToString());sb.AppendLine(entity.HitPosition?.ToString()??string.Empty);SerializeMatrixD(entity.Orientation,sb);sb.AppendLine(new Vector3D(entity.Velocity).ToString());sb.AppendLine(entity.Relationship.ToString());sb.AppendLine(entity.BoundingBox.Min.ToString());sb.AppendLine(entity.BoundingBox.Max.ToString());sb.AppendLine(entity.TimeStamp.ToString());}public static void SerializeTargetInfo(TargetInfo t,StringBuilder sb){SerializeMyDetectedEntityInfo(t.Entity,sb);SerializeVector3D(t.HitPos,sb);SerializeDateTime(t.Timestamp,sb);}public static bool TryParseMatrixD(StringReader reader,out MatrixD m){try{var a=reader.GetNextLine().Split(DIV).Select(s=>double.Parse(s)).ToArray();m=new MatrixD(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]);return true;}catch{m=MatrixD.Zero;return false;}}public static bool TryParseNullableVector3D(StringReader reader,out Vector3D?v){var str=reader.GetNextLine();if(string.IsNullOrEmpty(str)){v=null;return true;}Vector3D tmp;if(Vector3D.TryParse(str,out tmp)){v=tmp;return true;}v=null;return false;}public static bool TryParseBoundingBoxD(StringReader reader,out BoundingBoxD b){string strMin=reader.GetNextLine();string strMax=reader.GetNextLine();Vector3D min,max;if(Vector3D.TryParse(strMin,out min)&&Vector3D.TryParse(strMax,out max)){b=new BoundingBoxD(min,max);return true;}b=new BoundingBoxD();return false;}public static bool TryParseMyDetectedEntityInfo(StringReader reader,out MyDetectedEntityInfo entity){var success=true;long entityId;success&=long.TryParse(reader.GetNextLine(),out entityId);MyDetectedEntityType type;success&=MyDetectedEntityType.TryParse(reader.GetNextLine(),out type);Vector3D?hitPosition;success&=TryParseNullableVector3D(reader,out hitPosition);MatrixD orientation;success&=TryParseMatrixD(reader,out orientation);Vector3D velocity;success&=Vector3D.TryParse(reader.GetNextLine(),out velocity);MyRelationsBetweenPlayerAndBlock relationship;success&=MyRelationsBetweenPlayerAndBlock.TryParse(reader.GetNextLine(),out relationship);BoundingBoxD boundingBox;success&=TryParseBoundingBoxD(reader,out boundingBox);long timestamp;success&=long.TryParse(reader.GetNextLine(),out timestamp);entity=success?new MyDetectedEntityInfo(entityId,string.Empty,type,hitPosition,orientation,velocity,relationship,boundingBox,timestamp):new MyDetectedEntityInfo();return success;}public static bool TryParseVector3D(StringReader reader,out Vector3D v){return Vector3D.TryParse(reader.GetNextLine(),out v);}public static bool TryParseDateTime(StringReader reader,out DateTime d){long ts;if(long.TryParse(reader.GetNextLine(),out ts)){d=DateTime.FromBinary(ts);return true;}d=DateTime.MinValue;return false;}public static bool TryParseTargetInfo(StringReader reader,out TargetInfo targetInfo){targetInfo=new TargetInfo();MyDetectedEntityInfo entity;if(!TryParseMyDetectedEntityInfo(reader,out entity))return false;Vector3D hitPos;if(!TryParseVector3D(reader,out hitPos))return false;DateTime timestamp;if(!TryParseDateTime(reader,out timestamp))return false;targetInfo=new TargetInfo(entity,timestamp,0,hitPos);return true;}}private static readonly HashSet<MyDetectedEntityType>gridTypes=new HashSet<MyDetectedEntityType>{MyDetectedEntityType.SmallGrid,MyDetectedEntityType.LargeGrid};IMyCameraBlock cam;IMyTextSurface lcdTarget;IMyTextSurface lcdIcbm;HiddenTransmitter tsm;MyDetectedEntityInfo?target;public Program(){var list1=new List<IMyCameraBlock>();GridTerminalSystem.GetBlocksOfType(list1);cam=list1.First();cam.EnableRaycast=true;var list2=new List<IMyCockpit>();GridTerminalSystem.GetBlocksOfType(list2);var control=list2.FirstOrDefault(x=>x.CubeGrid.EntityId==Me.CubeGrid.EntityId);lcdTarget=control?.GetSurface(0);lcdIcbm=control?.GetSurface(3);tsm=new HiddenTransmitter(this);tsm.Subscribe(HiddenTransmitter.TAG_ICBM_STATE,UpdateIcbmState);Runtime.UpdateFrequency=UpdateFrequency.Update10;}public void UpdateIcbmState(MyIGCMessage message){var text=message.Data.ToString();Echo(text);lcdIcbm?.WriteText(text);}public void UpdateTargetState(){if(lcdTarget!=null){if(target.HasValue){var dist=(target.Value.Position-cam.GetPosition()).Length();lcdTarget.WriteText($"{target.Value.Type}\ndist: {dist:0}m");}else{lcdTarget.WriteText("NO TARGET");}}}public void Main(string argument,UpdateType updateSource){tsm.Update(argument,updateSource);switch(argument){case"scan":var entity=cam.Raycast(15000);if(gridTypes.Contains(entity.Type)){target=entity;var obj=TargetInfo.CreateTargetInfo(entity,DateTime.UtcNow,cam.GetPosition());var sb=new StringBuilder();Serializer.SerializeTargetInfo(obj,sb);var message=sb.ToString();tsm.Send(HiddenTransmitter.TAG_TARGET_POSITION,message);Me.CustomData=message;}break;case"reset":target=null;break;}UpdateTargetState();}