//2/19/2024 12:57:28 AM
public class RuntimeTracker{public int Capacity{get;set;}public double MaxRuntime{get;private set;}public double MaxInstructions{get;private set;}public double AverageRuntime{get;private set;}public double AverageInstructions{get;private set;}public double LastRuntime{get;private set;}public double LastInstructions{get;private set;}readonly Queue<double>runtimes=new Queue<double>();readonly Queue<double>instructions=new Queue<double>();readonly int instructionLimit;readonly MyGridProgram program;double runtimeSum=0;double instructionsSum=0;public RuntimeTracker(MyGridProgram program,int capacity=120){this.program=program;Capacity=capacity;instructionLimit=program.Runtime.MaxInstructionCount;}public void AddRuntime(){LastRuntime=program.Runtime.LastRunTimeMs;runtimes.Enqueue(LastRuntime);runtimeSum+=LastRuntime;if(runtimes.Count>Capacity){var firstRuntime=runtimes.Dequeue();runtimeSum-=firstRuntime;}AverageRuntime=runtimeSum/runtimes.Count();MaxRuntime=runtimes.Max();}public void AddInstructions(){LastInstructions=program.Runtime.CurrentInstructionCount;instructions.Enqueue(LastInstructions);instructionsSum+=LastInstructions;if(instructions.Count>Capacity){var firstInstructions=instructions.Dequeue();instructionsSum-=firstInstructions;}AverageInstructions=instructionsSum/instructions.Count();MaxInstructions=instructions.Max();}public override string ToString(){return$"Runtime: {LastRuntime:0.00}ms/{AverageRuntime:0.00}ms/{MaxRuntime:0.00}ms\n"+$"Instructions: {LastInstructions:0}/{AverageInstructions:0}/{MaxInstructions:0}\n"+$"Complexity: {AverageInstructions:0}/{instructionLimit:0} ({AverageInstructions/instructionLimit:0.00}%)";}}public class Grid{readonly IMyGridTerminalSystem system;public Grid(IMyGridTerminalSystem system){this.system=system;}public IMyBlockGroup[]GetBlockGroups(string prefix=""){var groups=new List<IMyBlockGroup>();system.GetBlockGroups(groups,g=>g.Name.StartsWith(prefix,StringComparison.OrdinalIgnoreCase));return groups.ToArray();}public T[]GetBlocksOfType<T>(Func<T,bool>filter=null)where T:class,IMyTerminalBlock{var list=new List<T>();system.GetBlocksOfType(list,filter);return list.ToArray();}public T GetBlockWithName<T>(string name)where T:class,IMyTerminalBlock{return system.GetBlockWithName(name)as T;}public T GetByFilterOrAny<T>(Func<T,bool>filter=null,Action<T>init=null)where T:class,IMyTerminalBlock{var all=new List<T>();system.GetBlocksOfType(all,filter);T res=null;if(filter!=null){res=all.FirstOrDefault(filter);}if(res==null){res=all.FirstOrDefault();}if(res!=null&&init!=null){init(res);}return res;}}public class CenterOfMassPosition{public CenterOfMassPosition(Vector3D local,Vector3D world){Local=local;World=world;}public readonly Vector3D Local;public readonly Vector3D World;}public class CenterOfMass{public CenterOfMass(CenterOfMassPosition physicalValue,CenterOfMassPosition virtualValue){Physical=physicalValue;Virtual=virtualValue;}public readonly CenterOfMassPosition Physical;public readonly CenterOfMassPosition Virtual;}public class GravityDrive{private bool enabled;readonly IMyShipController controller;readonly List<IMyArtificialMassBlock>massBlocks=new List<IMyArtificialMassBlock>();readonly List<IMyGyro>gyroBlocks=new List<IMyGyro>();readonly List<IMyGravityGenerator>allGens=new List<IMyGravityGenerator>();readonly List<IMyGravityGenerator>upGens=new List<IMyGravityGenerator>();readonly List<IMyGravityGenerator>downGens=new List<IMyGravityGenerator>();readonly List<IMyGravityGenerator>leftGens=new List<IMyGravityGenerator>();readonly List<IMyGravityGenerator>rightGens=new List<IMyGravityGenerator>();readonly List<IMyGravityGenerator>fowardGens=new List<IMyGravityGenerator>();readonly List<IMyGravityGenerator>backwardGens=new List<IMyGravityGenerator>();const float GRAVITY_RATIO=9.8f;const float DAMPENERS_RATIO=0.1f;const float ROTATION_RATIO=10f;public GravityDrive(IMyShipController cockpit,IMyBlockGroup group){this.controller=cockpit;group.GetBlocksOfType(gyroBlocks,b=>b.IsSameConstructAs(cockpit));group.GetBlocksOfType(massBlocks,b=>b.IsSameConstructAs(cockpit));group.GetBlocksOfType(allGens,b=>b.IsSameConstructAs(cockpit));foreach(var block in allGens){if(cockpit.WorldMatrix.Forward==block.WorldMatrix.Down)fowardGens.Add(block);else if(cockpit.WorldMatrix.Backward==block.WorldMatrix.Down)backwardGens.Add(block);else if(cockpit.WorldMatrix.Left==block.WorldMatrix.Down)leftGens.Add(block);else if(cockpit.WorldMatrix.Right==block.WorldMatrix.Down)rightGens.Add(block);else if(cockpit.WorldMatrix.Up==block.WorldMatrix.Down)upGens.Add(block);else if(cockpit.WorldMatrix.Down==block.WorldMatrix.Down)downGens.Add(block);}}public CenterOfMass CalculateCenterOfMass(){var invertedMatrix=MatrixD.Invert(controller.WorldMatrix.GetOrientation());var centerOfMass=controller.CenterOfMass;var localCenterOfMass=Vector3D.Transform(centerOfMass,invertedMatrix);var virtualMassPositions=massBlocks.Aggregate(Vector3D.Zero,(a,b)=>a+b.GetPosition());var virtualCenterOfMass=virtualMassPositions/massBlocks.Count;var localVirtualCenterOfMass=Vector3D.Transform(virtualCenterOfMass,invertedMatrix);return new CenterOfMass(physicalValue:new CenterOfMassPosition(localCenterOfMass,centerOfMass),virtualValue:new CenterOfMassPosition(localVirtualCenterOfMass,virtualCenterOfMass));}public bool Enabled{get{return enabled;}set{ToggleEngine(value);}}public bool DampenersOverride=>controller.DampenersOverride;public void Update(){MyShipVelocities velocities=controller.GetShipVelocities();UpdateGenerators(velocities.LinearVelocity);UpdateGyro(velocities.AngularVelocity);}private void UpdateGyro(Vector3D worldAngularVelocity){Vector3D rot=worldAngularVelocity*100*worldAngularVelocity.LengthSquared();rot+=controller.WorldMatrix.Right*controller.RotationIndicator.X*ROTATION_RATIO;rot+=controller.WorldMatrix.Up*controller.RotationIndicator.Y*ROTATION_RATIO;rot+=controller.WorldMatrix.Backward*controller.RollIndicator*ROTATION_RATIO;foreach(var gyro in gyroBlocks){gyro.Yaw=(float)rot.Dot(gyro.WorldMatrix.Up);gyro.Pitch=(float)rot.Dot(gyro.WorldMatrix.Right);gyro.Roll=(float)rot.Dot(gyro.WorldMatrix.Backward);}}private void UpdateGenerators(Vector3D worldVelocity){Vector3 input=controller.MoveIndicator;MatrixD matrix=MatrixD.Transpose(controller.WorldMatrix);Vector3 localVelocity=Vector3D.TransformNormal(worldVelocity,matrix);SetGravityAcceleration(input.X,localVelocity.X,rightGens,leftGens);SetGravityAcceleration(input.Y,localVelocity.Y,upGens,downGens);SetGravityAcceleration(input.Z,localVelocity.Z,backwardGens,fowardGens);}private bool IsZero(float value)=>Math.Abs(value)<0.00001;private void SetGravityAcceleration(float input,float velocity,IList<IMyGravityGenerator>positive,IList<IMyGravityGenerator>negative){var value=IsZero(input)&&DampenersOverride?-velocity*DAMPENERS_RATIO:input;var enabled=Enabled&&!IsZero(value);var acceleration=value*GRAVITY_RATIO;foreach(var x in positive){x.GravityAcceleration=acceleration;x.Enabled=enabled;}foreach(var x in negative){x.GravityAcceleration=-acceleration;x.Enabled=enabled;}}void ToggleEngine(bool enabled){this.enabled=enabled;foreach(IMyArtificialMassBlock b in massBlocks){b.Enabled=enabled;}foreach(IMyGravityGenerator b in allGens){b.Enabled=enabled;b.GravityAcceleration=0f;}foreach(IMyGyro b in gyroBlocks){b.GyroOverride=enabled;b.Yaw=0f;b.Pitch=0f;b.Roll=0f;}}}readonly RuntimeTracker tracker;readonly IMyTextSurface lcd;readonly Grid grid;readonly GravityDrive gdrive;public Program(){tracker=new RuntimeTracker(this);lcd=Me.GetSurface(1);lcd.ContentType=ContentType.TEXT_AND_IMAGE;grid=new Grid(GridTerminalSystem);var cockpit=grid.GetBlockWithName<IMyCockpit>("cockpit_main");var group=GridTerminalSystem.GetBlockGroupWithName("ws_gdrive");gdrive=new GravityDrive(cockpit,group);Runtime.UpdateFrequency=UpdateFrequency.Update1;}public void Main(string argument,UpdateType updateSource){tracker.AddRuntime();switch(argument){case"gd-on":gdrive.Enabled=true;break;case"gd-off":gdrive.Enabled=false;break;case"gd-info":UpdateGdInfo();break;default:gdrive.Update();break;}tracker.AddInstructions();lcd.WriteText(tracker.ToString());}private string Format(double p,double v,string textP,string textN){double r=v-p;string label=r>0?textP:textN;return$"{label}: {r:0.0}";}private string FormatGPS(Vector3D point,string label){return$"GPS:{label}:{point.X:0.00}:{point.Y:0.00}:{point.Z:0.00}:#FF89F175:";}private void UpdateGdInfo(){var x=gdrive.CalculateCenterOfMass();var p=x.Physical.Local;var v=x.Virtual.Local;var sb=new StringBuilder();sb.AppendLine(Format(p.Z,v.Z,"Fwd","Bck"));sb.AppendLine(Format(p.X,v.X,"Rgt","Lft"));sb.AppendLine(Format(p.Z,v.Z,"Top","Btm"));Me.GetSurface(0).WriteText(sb);Me.CustomData=FormatGPS(x.Physical.World,"GD Center")+"\n"+FormatGPS(x.Virtual.World,"GD Virtual center");}