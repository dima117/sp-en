//5/3/2024 12:58:12 AM
public class RuntimeTracker{public int Capacity{get;set;}public double MaxRuntime{get;private set;}public double MaxInstructions{get;private set;}public double AverageRuntime{get;private set;}public double AverageInstructions{get;private set;}public double LastRuntime{get;private set;}public double LastInstructions{get;private set;}readonly Queue<double>runtimes=new Queue<double>();readonly Queue<double>instructions=new Queue<double>();readonly int instructionLimit;readonly MyGridProgram program;double runtimeSum=0;double instructionsSum=0;public RuntimeTracker(MyGridProgram program,int capacity=120){this.program=program;Capacity=capacity;instructionLimit=program.Runtime.MaxInstructionCount;}public void AddRuntime(){LastRuntime=program.Runtime.LastRunTimeMs;runtimes.Enqueue(LastRuntime);runtimeSum+=LastRuntime;if(runtimes.Count>Capacity){var firstRuntime=runtimes.Dequeue();runtimeSum-=firstRuntime;}AverageRuntime=runtimeSum/runtimes.Count();MaxRuntime=runtimes.Max();}public void AddInstructions(){LastInstructions=program.Runtime.CurrentInstructionCount;instructions.Enqueue(LastInstructions);instructionsSum+=LastInstructions;if(instructions.Count>Capacity){var firstInstructions=instructions.Dequeue();instructionsSum-=firstInstructions;}AverageInstructions=instructionsSum/instructions.Count();MaxInstructions=instructions.Max();}public override string ToString(){return$"Runtime: {LastRuntime:0.00}ms/{AverageRuntime:0.00}ms/{MaxRuntime:0.00}ms\n"+$"Instructions: {LastInstructions:0}/{AverageInstructions:0}/{MaxInstructions:0}\n"+$"Complexity: {AverageInstructions:0}/{instructionLimit:0} ({AverageInstructions/instructionLimit:0.00}%)";}}public class Grid{readonly IMyGridTerminalSystem system;public Grid(IMyGridTerminalSystem system){this.system=system;}public IMyBlockGroup[]GetBlockGroups(string prefix=""){var groups=new List<IMyBlockGroup>();system.GetBlockGroups(groups,g=>g.Name.StartsWith(prefix,StringComparison.OrdinalIgnoreCase));return groups.ToArray();}public T[]GetBlocksOfType<T>(Func<T,bool>filter=null)where T:class,IMyTerminalBlock{var list=new List<T>();system.GetBlocksOfType(list,filter);return list.ToArray();}public T GetBlockWithName<T>(string name)where T:class,IMyTerminalBlock{return system.GetBlockWithName(name)as T;}public IMyCameraBlock GetCamera(string name){var camera=GetBlockWithName<IMyCameraBlock>(name);if(camera!=null){camera.Enabled=true;camera.EnableRaycast=true;}return camera;}public IMySmallMissileLauncherReload[]GetLargeRailguns(Func<IMySmallMissileLauncherReload,bool>filter=null){return GetBlocksOfType<IMySmallMissileLauncherReload>(b=>b.BlockDefinition.SubtypeId=="LargeRailgun"&&(filter==null||filter(b))).ToArray();}public IMySoundBlock GetSound(string name,string soundName="SoundBlockAlert2"){var sound=GetBlockWithName<IMySoundBlock>(name);if(sound!=null){sound.Enabled=true;sound.SelectedSound=soundName;sound.Volume=1;sound.Range=100;}return sound;}public T GetByFilterOrAny<T>(Func<T,bool>filter=null,Action<T>init=null)where T:class,IMyTerminalBlock{var all=new List<T>();system.GetBlocksOfType(all,filter);T res=null;if(filter!=null){res=all.FirstOrDefault(filter);}if(res==null){res=all.FirstOrDefault();}if(res!=null&&init!=null){init(res);}return res;}}public class BlockArray<T>where T:class,IMyTerminalBlock{MyGridProgram program;Action<T>init;private List<T>list=new List<T>();private int index=0;public int Count=>list.Count;public T1 Aggregate<T1>(T1 a,Func<T1,T,T1>fn)=>list.Aggregate(a,fn);public BlockArray(MyGridProgram program,Action<T>init=null){this.program=program;this.init=init;UpdateBlocks();}public void UpdateBlocks(){index=0;list=new List<T>();program.GridTerminalSystem.GetBlocksOfType(list);list.ForEach(init);}public void ForEach(Action<T>fn=null){if(fn!=null){list.ForEach(fn);}}public T GetNext(Func<T,bool>filter=null){for(var count=0;count<list.Count;count++){index++;if(index>=list.Count){index=0;}T block=list[index];if(filter==null||filter(block)){return block;}}return null;}}public class TargetInfo{public MyDetectedEntityInfo Entity{get;private set;}public DateTime Timestamp{get;private set;}public DateTime NextScan{get;private set;}public Vector3D HitPosRelative{get;private set;}public Vector3D GetHitPosWorld(){return Entity.Position+Vector3D.Transform(HitPosRelative,Entity.Orientation);}public TargetInfo(MyDetectedEntityInfo entity=default(MyDetectedEntityInfo),DateTime timestamp=default(DateTime),DateTime nextScan=default(DateTime),Vector3D hitPosRelative=default(Vector3D)){Entity=entity;Timestamp=timestamp;NextScan=nextScan;HitPosRelative=hitPosRelative;}public TargetInfo Update(MyDetectedEntityInfo entity,DateTime timestamp,DateTime nextScan){Entity=entity;Timestamp=timestamp;NextScan=nextScan;return this;}public void UpdateNextScan(DateTime nextScan){NextScan=nextScan;}public static TargetInfo CreateTargetInfo(MyDetectedEntityInfo entity,Vector3D camPos,DateTime timestamp,DateTime?nextScan=null){var relativeHitPos=default(Vector3D);if(entity.HitPosition.HasValue){var hitPos=entity.HitPosition.Value;var correctedHitPos=hitPos+Vector3D.Normalize(hitPos-camPos);var invertedMatrix=MatrixD.Invert(entity.Orientation);relativeHitPos=Vector3D.Transform(correctedHitPos-entity.Position,invertedMatrix);}return new TargetInfo(entity,timestamp,nextScan??timestamp,relativeHitPos);}}public class TargetTracker2{public static readonly string[]names=new[]{"корова","пёс","кролик","конь","медвед","кот","болт","кабан","волк","бобр","жук","zombie","сом",};public static string GetName(long entityId){var name=names[entityId%names.Length];var index=entityId%89;return$"{name}-{index}";}const int MIN_CAM_COUN=10;const int SCAN_DELAY_MS=60;const int SCAN_RETRY_MS=25;const double DISTANCE_SCAN_DEFAULT=7500;const int TARGET_RELEASE_TIMEOUT=20;static readonly HashSet<MyDetectedEntityType>targetTypes=new HashSet<MyDetectedEntityType>{MyDetectedEntityType.SmallGrid,MyDetectedEntityType.LargeGrid};private readonly IMyTurretControlBlock[]turretControllers;private readonly IMyLargeTurretBase[]turrets;private readonly IMyCameraBlock[]cameras;private int camIndex=0;private SortedDictionary<long,TargetInfo>targets=new SortedDictionary<long,TargetInfo>();public event Action TargetListChanged;public int Count{get{return cameras.Length;}}public double TotalRange{get{return cameras.Aggregate(0d,(a,c)=>a+c.AvailableScanRange);}}public TargetTracker2(IMyCameraBlock[]cameras=null,IMyLargeTurretBase[]turrets=null,IMyTurretControlBlock[]turretControllers=null){this.cameras=cameras??new IMyCameraBlock[0];this.turrets=turrets??new IMyLargeTurretBase[0];this.turretControllers=turretControllers??new IMyTurretControlBlock[0];foreach(var cam in this.cameras){cam.Enabled=true;cam.EnableRaycast=true;}}public static TargetInfo Scan(IMyCameraBlock cam,double distance=DISTANCE_SCAN_DEFAULT,bool onlyEnemies=false){if(cam==null){return null;}var camPos=cam.GetPosition();var entity=cam.Raycast(distance);if(entity.IsEmpty()){return null;}if(!targetTypes.Contains(entity.Type)){return null;}if(onlyEnemies&&entity.Relationship!=MyRelationsBetweenPlayerAndBlock.Enemies){return null;}return TargetInfo.CreateTargetInfo(entity,camPos,DateTime.UtcNow);}public void LockTarget(TargetInfo target){if(AddOrUpdateTarget(target)){TargetListChanged?.Invoke();}}public void Merge(TargetInfo[]list){var changed=false;foreach(var t in list){changed|=AddOrUpdateTarget(t);}if(changed){TargetListChanged?.Invoke();}}public void ReleaseTarget(long targetId){targets.Remove(targetId);}public void Clear(){targets.Clear();}public int TargetCount=>targets.Count;public TargetInfo[]GetTargets(){return targets.Values.ToArray();}public TargetInfo GetByEntityId(long entityId){return targets.ContainsKey(entityId)?targets[entityId]:null;}public void Update(){var now=DateTime.UtcNow;var nextScan=now.AddMilliseconds(SCAN_DELAY_MS);var isChanged=UpdateFromTurrets(now,nextScan);if(Count>=MIN_CAM_COUN){UpdateOneFromCameras(now,nextScan);}foreach(var t in targets.ToArray()){if((now-t.Value.Timestamp).TotalSeconds>TARGET_RELEASE_TIMEOUT){ReleaseTarget(t.Value.Entity.EntityId);isChanged=true;}}if(isChanged){TargetListChanged?.Invoke();}}private bool AddOrUpdateTarget(TargetInfo target){var id=target.Entity.EntityId;if(targets.ContainsKey(id)){if(target.Timestamp>targets[id].Timestamp){targets[id]=target;}return false;}else{targets.Add(id,target);return true;}}private bool AddOrUpdateTarget(MyDetectedEntityInfo entity,Vector3D pos,DateTime now,DateTime nextScan){if(targets.ContainsKey(entity.EntityId)){var target=targets[entity.EntityId];if(target.Timestamp<now){target.Update(entity,now,nextScan);}return false;}else{targets.Add(entity.EntityId,TargetInfo.CreateTargetInfo(entity,pos,now,nextScan));return true;}}private void UpdateOneFromCameras(DateTime now,DateTime nextScan){TargetInfo target=targets.Values.FirstOrDefault(t=>t.NextScan<now);if(target==null){return;}var timePassed=now-target.Timestamp;var scanResult=ScanNextPosition(target,timePassed);if(scanResult.IsEmpty()){target.UpdateNextScan(now.AddMilliseconds(SCAN_RETRY_MS));}else{target.Update(scanResult,now,nextScan);}}private bool UpdateFromTurrets(DateTime now,DateTime nextScan){var changed=false;foreach(var t in turrets){if(!t.Closed&&t.HasTarget){var entity=t.GetTargetedEntity();changed|=AddOrUpdateTarget(entity,t.GetPosition(),now,nextScan);}}foreach(var t in turretControllers){if(!t.Closed&&t.HasTarget){var entity=t.GetTargetedEntity();changed|=AddOrUpdateTarget(entity,t.GetPosition(),now,nextScan);}}return changed;}private static Vector3D CalculateTargetLocation(TargetInfo info,TimeSpan timePassed){var target=info.Entity;return info.GetHitPosWorld()+(target.Velocity*Convert.ToSingle(timePassed.TotalSeconds));}private MyDetectedEntityInfo ScanNextPosition(TargetInfo prevTarget,TimeSpan timePassed){var calculatedTargetPos=CalculateTargetLocation(prevTarget,timePassed);var camera=GetNext(cameras,ref camIndex,cam=>cam.CanScan(calculatedTargetPos));if(camera==null){return default(MyDetectedEntityInfo);}var entity=camera.Raycast(calculatedTargetPos);if(entity.EntityId!=prevTarget.Entity.EntityId){return default(MyDetectedEntityInfo);}return entity;}public string GetDisplayState(Vector3D selfPos){var sb=new StringBuilder();foreach(var target in targets){var t=target.Value.Entity;var type=t.Type.ToString().Substring(0,1);var name=GetName(t.EntityId);var dist=(t.Position-selfPos).Length();var speed=t.Velocity.Length();sb.AppendLine($"{type} {name} {dist:0}m {speed:0}m/s");}return sb.ToString();}public static T GetNext<T>(T[]a,ref int index,Func<T,bool>filter=null){if(a.Length==0){return default(T);}for(var count=0;count<a.Length;count++){index=(index+1)%a.Length;T block=a[index];if(filter==null||filter(block)){return block;}}return default(T);}}public class MsgTags{public const string REMOTE_LOCK_TARGET="@REMOTE_LOCK_TARGET";public const string REMOTE_START="@REMOTE_START";public const string GET_STATUS="@GET_STATUS";public const string REMOTE_STATUS="@REMOTE_STATUS";public const string SYNC_TARGETS="@SYNC_TARGETS";}public class Transmitter{private int seq=0;protected IMyIntergridCommunicationSystem igc;protected IMyRadioAntenna[]antennas;private Dictionary<string,Action<MyIGCMessage>>actions=new Dictionary<string,Action<MyIGCMessage>>();private Dictionary<string,IMyBroadcastListener>listeners=new Dictionary<string,IMyBroadcastListener>();public Transmitter(IMyIntergridCommunicationSystem igc,IMyRadioAntenna[]antennas){this.igc=igc;igc.UnicastListener.SetMessageCallback();this.antennas=antennas;foreach(var a in antennas){a.EnableBroadcasting=true;a.Enabled=true;}}public void Subscribe(string tag,Action<MyIGCMessage>fn,bool broadcast=false){if(broadcast){var listener=igc.RegisterBroadcastListener(tag);var listenerId=(DateTime.UtcNow.Ticks-(seq++)).ToString();listener.SetMessageCallback(listenerId);listeners[listenerId]=listener;}actions[tag]=fn;}public virtual void Send(string tag,string data="",long?destination=null){if(destination.HasValue){igc.SendUnicastMessage(destination.Value,tag,data);}else{igc.SendBroadcastMessage(tag,data);}}public virtual void Update(string listenerId,UpdateType updateSource){if(updateSource==UpdateType.IGC){IMyMessageProvider listener=igc.UnicastListener;if(listeners.ContainsKey(listenerId)){listener=listeners[listenerId];}while(listener.HasPendingMessage){var message=listener.AcceptMessage();if(actions.ContainsKey(message.Tag)){actions[message.Tag](message);}}}}}public class Transmitter2:Transmitter{const int TIMEOUT_SWITCH_ON=200;const int TIMEOUT_SWITCH_OFF=200;public const int MIN_RANGE=10;public const int MAX_RANGE=50000;private DateTime?timestampSwitchOn=null;private DateTime?timestampSwitchOff=null;private readonly Queue<Action>messageQueue=new Queue<Action>();public Transmitter2(IMyIntergridCommunicationSystem igc,IMyRadioAntenna[]antennas):base(igc,antennas){foreach(var a in antennas){a.Radius=MIN_RANGE;}}public override void Send(string tag,string data="",long?destination=null){if(destination.HasValue){messageQueue.Enqueue(()=>igc.SendUnicastMessage(destination.Value,tag,data));}else{messageQueue.Enqueue(()=>igc.SendBroadcastMessage(tag,data));}if(!timestampSwitchOn.HasValue){if(timestampSwitchOff.HasValue){timestampSwitchOff=DateTime.UtcNow.AddMilliseconds(TIMEOUT_SWITCH_OFF);}else{foreach(var a in antennas){a.Radius=MAX_RANGE;}timestampSwitchOn=DateTime.UtcNow.AddMilliseconds(TIMEOUT_SWITCH_ON);}}}public override void Update(string listenerId,UpdateType updateSource){base.Update(listenerId,updateSource);switch(updateSource){case UpdateType.Update1:case UpdateType.Update10:case UpdateType.Update100:var now=DateTime.UtcNow;if(timestampSwitchOn.HasValue&&now>timestampSwitchOn){timestampSwitchOn=null;timestampSwitchOff=now.AddMilliseconds(TIMEOUT_SWITCH_OFF);while(messageQueue.Any()){messageQueue.Dequeue()();}}else if(timestampSwitchOff.HasValue&&now>timestampSwitchOff){timestampSwitchOff=null;foreach(var a in antennas){a.Radius=MIN_RANGE;}}break;}}}public static class Serializer{const char DIV=';';public class StringReader{private readonly string[]lines;private int nextPos=0;public StringReader(string value){lines=value.Split('\n');}public string GetNextLine(){return nextPos>=lines.Length?"":lines[nextPos++];}}public static void SerializeVector3D(Vector3D v,StringBuilder sb){sb.AppendLine(v.ToString());}public static void SerializeDateTime(DateTime d,StringBuilder sb){sb.AppendLine(d.ToBinary().ToString());}public static void SerializeMatrixD(MatrixD m,StringBuilder sb){var a=new double[]{m.M11,m.M12,m.M13,m.M14,m.M21,m.M22,m.M23,m.M24,m.M31,m.M32,m.M33,m.M34,m.M41,m.M42,m.M43,m.M44,};sb.AppendLine(string.Join(DIV.ToString(),a));}public static void SerializeMyDetectedEntityInfo(MyDetectedEntityInfo entity,StringBuilder sb){sb.AppendLine(entity.EntityId.ToString());sb.AppendLine(entity.Type.ToString());sb.AppendLine(entity.HitPosition?.ToString()??string.Empty);SerializeMatrixD(entity.Orientation,sb);sb.AppendLine(new Vector3D(entity.Velocity).ToString());sb.AppendLine(entity.Relationship.ToString());sb.AppendLine(entity.BoundingBox.Min.ToString());sb.AppendLine(entity.BoundingBox.Max.ToString());sb.AppendLine(entity.TimeStamp.ToString());}public static void SerializeTargetInfo(TargetInfo t,StringBuilder sb){SerializeMyDetectedEntityInfo(t.Entity,sb);SerializeVector3D(t.HitPosRelative,sb);SerializeDateTime(t.Timestamp,sb);}public static void SerializeTargetInfoArray(TargetInfo[]a,StringBuilder sb){sb.AppendLine(a.Length.ToString());foreach(var t in a){SerializeTargetInfo(t,sb);}}public static bool TryParseMatrixD(StringReader reader,out MatrixD m){try{var a=reader.GetNextLine().Split(DIV).Select(s=>double.Parse(s)).ToArray();m=new MatrixD(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]);return true;}catch{m=MatrixD.Zero;return false;}}public static bool TryParseNullableVector3D(StringReader reader,out Vector3D?v){var str=reader.GetNextLine();if(string.IsNullOrEmpty(str)){v=null;return true;}Vector3D tmp;if(Vector3D.TryParse(str,out tmp)){v=tmp;return true;}v=null;return false;}public static bool TryParseBoundingBoxD(StringReader reader,out BoundingBoxD b){string strMin=reader.GetNextLine();string strMax=reader.GetNextLine();Vector3D min,max;if(Vector3D.TryParse(strMin,out min)&&Vector3D.TryParse(strMax,out max)){b=new BoundingBoxD(min,max);return true;}b=new BoundingBoxD();return false;}public static bool TryParseMyDetectedEntityInfo(StringReader reader,out MyDetectedEntityInfo entity){var success=true;long entityId;success&=long.TryParse(reader.GetNextLine(),out entityId);MyDetectedEntityType type;success&=MyDetectedEntityType.TryParse(reader.GetNextLine(),out type);Vector3D?hitPosition;success&=TryParseNullableVector3D(reader,out hitPosition);MatrixD orientation;success&=TryParseMatrixD(reader,out orientation);Vector3D velocity;success&=Vector3D.TryParse(reader.GetNextLine(),out velocity);MyRelationsBetweenPlayerAndBlock relationship;success&=MyRelationsBetweenPlayerAndBlock.TryParse(reader.GetNextLine(),out relationship);BoundingBoxD boundingBox;success&=TryParseBoundingBoxD(reader,out boundingBox);long timestamp;success&=long.TryParse(reader.GetNextLine(),out timestamp);entity=success?new MyDetectedEntityInfo(entityId,string.Empty,type,hitPosition,orientation,velocity,relationship,boundingBox,timestamp):new MyDetectedEntityInfo();return success;}public static bool TryParseVector3D(StringReader reader,out Vector3D v){return Vector3D.TryParse(reader.GetNextLine(),out v);}public static bool TryParseDateTime(StringReader reader,out DateTime d){long ts;if(long.TryParse(reader.GetNextLine(),out ts)){d=DateTime.FromBinary(ts);return true;}d=DateTime.MinValue;return false;}public static bool TryParseTargetInfo(StringReader reader,out TargetInfo targetInfo){targetInfo=new TargetInfo();MyDetectedEntityInfo entity;if(!TryParseMyDetectedEntityInfo(reader,out entity))return false;Vector3D hitPos;if(!TryParseVector3D(reader,out hitPos))return false;DateTime timestamp;if(!TryParseDateTime(reader,out timestamp))return false;targetInfo=new TargetInfo(entity,timestamp,timestamp,hitPos);return true;}public static bool TryParseTargetInfoArray(StringReader reader,out TargetInfo[]result){TargetInfo target;int length;if(!int.TryParse(reader.GetNextLine(),out length)){result=null;return false;}result=new TargetInfo[length];for(var i=0;i<length;i++){if(TryParseTargetInfo(reader,out target)){result[i]=target;}else{result=null;return false;}}return true;}}readonly RuntimeTracker tracker;readonly IMyTextSurface lcd;readonly Grid grid;readonly TargetTracker2 tt;readonly Transmitter2 tsm;readonly IMyCameraBlock cam;readonly IMyCockpit cockpit;readonly IMySoundBlock sound;readonly IMyTextPanel lcdTargets;public Program(){tracker=new RuntimeTracker(this);lcd=Me.GetSurface(1);lcd.ContentType=ContentType.TEXT_AND_IMAGE;grid=new Grid(GridTerminalSystem);cam=grid.GetByFilterOrAny<IMyCameraBlock>();if(cam!=null){cam.Enabled=true;cam.EnableRaycast=true;}cockpit=grid.GetByFilterOrAny<IMyCockpit>();lcdTargets=grid.GetByFilterOrAny<IMyTextPanel>();sound=grid.GetByFilterOrAny<IMySoundBlock>();if(sound!=null){sound.Enabled=true;sound.SelectedSound="ArcSoundBlockAlert2";sound.Volume=1;sound.Range=100;}var turrets=grid.GetBlocksOfType<IMyLargeTurretBase>();tt=new TargetTracker2(turrets:turrets);tt.TargetListChanged+=TargetListChanged;var antennas=grid.GetBlocksOfType<IMyRadioAntenna>();tsm=new Transmitter2(IGC,antennas);Runtime.UpdateFrequency=UpdateFrequency.Update10;}private void TargetListChanged(){sound?.Play();var msg=new StringBuilder();Serializer.SerializeTargetInfoArray(tt.GetTargets(),msg);tsm.Send(MsgTags.SYNC_TARGETS,msg.ToString());}private void UpdateTargetsLcd(){var pos=cockpit.GetPosition();var info=tt.GetDisplayState(pos);var text=string.IsNullOrEmpty(info)?"NO TARGET":info;lcdTargets?.WriteText(text);}public void Main(string argument,UpdateType updateSource){tracker.AddRuntime();tsm.Update(argument,updateSource);tt.Update();switch(argument){case"scan":var target=TargetTracker2.Scan(cam);if(target!=null){tt.LockTarget(target);}break;}UpdateTargetsLcd();tracker.AddInstructions();lcd.WriteText(tracker.ToString());}