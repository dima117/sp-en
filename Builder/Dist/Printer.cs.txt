//7/30/2024 11:59:11 PM
public class RuntimeTracker{public int Capacity{get;set;}public double MaxRuntime{get;private set;}public double MaxInstructions{get;private set;}public double AverageRuntime{get;private set;}public double AverageInstructions{get;private set;}public double LastRuntime{get;private set;}public double LastInstructions{get;private set;}readonly Queue<double>runtimes=new Queue<double>();readonly Queue<double>instructions=new Queue<double>();readonly int instructionLimit;readonly MyGridProgram program;double runtimeSum=0;double instructionsSum=0;public RuntimeTracker(MyGridProgram program,int capacity=120){this.program=program;Capacity=capacity;instructionLimit=program.Runtime.MaxInstructionCount;}public void AddRuntime(){LastRuntime=program.Runtime.LastRunTimeMs;runtimes.Enqueue(LastRuntime);runtimeSum+=LastRuntime;if(runtimes.Count>Capacity){var firstRuntime=runtimes.Dequeue();runtimeSum-=firstRuntime;}AverageRuntime=runtimeSum/runtimes.Count();MaxRuntime=runtimes.Max();}public void AddInstructions(){LastInstructions=program.Runtime.CurrentInstructionCount;instructions.Enqueue(LastInstructions);instructionsSum+=LastInstructions;if(instructions.Count>Capacity){var firstInstructions=instructions.Dequeue();instructionsSum-=firstInstructions;}AverageInstructions=instructionsSum/instructions.Count();MaxInstructions=instructions.Max();}public override string ToString(){return$"Runtime: {LastRuntime:0.00}ms/{AverageRuntime:0.00}ms/{MaxRuntime:0.00}ms\n"+$"Instructions: {LastInstructions:0}/{AverageInstructions:0}/{MaxInstructions:0}\n"+$"Complexity: {AverageInstructions:0}/{instructionLimit:0} ({AverageInstructions/instructionLimit:0.00}%)";}}public class Grid{readonly IMyGridTerminalSystem system;public Grid(IMyGridTerminalSystem system){this.system=system;}public IMyBlockGroup[]GetBlockGroups(string prefix=""){var groups=new List<IMyBlockGroup>();system.GetBlockGroups(groups,g=>g.Name.StartsWith(prefix,StringComparison.OrdinalIgnoreCase));return groups.ToArray();}public T[]GetBlocksOfType<T>(Func<T,bool>filter=null)where T:class,IMyTerminalBlock{var list=new List<T>();system.GetBlocksOfType(list,filter);return list.ToArray();}public T GetBlockWithName<T>(string name)where T:class,IMyTerminalBlock{return system.GetBlockWithName(name)as T;}public IMyCameraBlock GetCamera(string name){var camera=GetBlockWithName<IMyCameraBlock>(name);if(camera!=null){camera.Enabled=true;camera.EnableRaycast=true;}return camera;}public IMySmallMissileLauncherReload[]GetLargeRailguns(Func<IMySmallMissileLauncherReload,bool>filter=null){return GetBlocksOfType<IMySmallMissileLauncherReload>(b=>b.BlockDefinition.SubtypeId=="LargeRailgun"&&(filter==null||filter(b))).ToArray();}public IMySmallMissileLauncher[]GetArtillery(Func<IMySmallMissileLauncher,bool>filter=null){return GetBlocksOfType<IMySmallMissileLauncher>(b=>b.BlockDefinition.SubtypeId=="LargeBlockLargeCalibreGun"&&(filter==null||filter(b))).ToArray();}public IMyLargeMissileTurret[]GetArtilleryTurrets(Func<IMyLargeMissileTurret,bool>filter=null){return GetBlocksOfType<IMyLargeMissileTurret>(b=>b.BlockDefinition.SubtypeId=="LargeCalibreTurret"&&(filter==null||filter(b))).ToArray();}public IMySoundBlock GetSound(string name,string soundName="SoundBlockAlert2"){var sound=GetBlockWithName<IMySoundBlock>(name);if(sound!=null){sound.Enabled=true;sound.SelectedSound=soundName;sound.Volume=1;sound.Range=100;}return sound;}public T GetByFilterOrAny<T>(Func<T,bool>filter=null,Action<T>init=null)where T:class,IMyTerminalBlock{var all=new List<T>();system.GetBlocksOfType(all,filter);T res=null;if(filter!=null){res=all.FirstOrDefault(filter);}if(res==null){res=all.FirstOrDefault();}if(res!=null&&init!=null){init(res);}return res;}}public class TargetInfo{const int HIT_POINT_DEPTH=5;public MyDetectedEntityInfo Entity{get;private set;}public DateTime Timestamp{get;private set;}public DateTime NextScan{get;private set;}public Vector3D HitPosRelative{get;private set;}public Vector3D GetHitPosWorld(){return Entity.Position+Vector3D.Transform(HitPosRelative,Entity.Orientation);}public TargetInfo(MyDetectedEntityInfo entity=default(MyDetectedEntityInfo),DateTime timestamp=default(DateTime),DateTime nextScan=default(DateTime),Vector3D hitPosRelative=default(Vector3D)){Entity=entity;Timestamp=timestamp;NextScan=nextScan;HitPosRelative=hitPosRelative;}public TargetInfo Update(MyDetectedEntityInfo entity,DateTime timestamp,DateTime nextScan){Entity=entity;Timestamp=timestamp;NextScan=nextScan;return this;}public void UpdateNextScan(DateTime nextScan){NextScan=nextScan;}public static TargetInfo CreateTargetInfo(MyDetectedEntityInfo entity,Vector3D camPos,DateTime timestamp,DateTime?nextScan=null){var relativeHitPos=default(Vector3D);if(entity.HitPosition.HasValue){var hitPos=entity.HitPosition.Value;var correctedHitPos=hitPos+Vector3D.Normalize(hitPos-camPos)*HIT_POINT_DEPTH;var invertedMatrix=MatrixD.Invert(entity.Orientation);relativeHitPos=Vector3D.Transform(correctedHitPos-entity.Position,invertedMatrix);}return new TargetInfo(entity,timestamp,nextScan??timestamp,relativeHitPos);}}public static class Serializer{const char DIV=';';public class StringReader{private readonly string[]lines;private int nextPos=0;public StringReader(string value){lines=value.Split('\n');}public string GetNextLine(){return nextPos>=lines.Length?"":lines[nextPos++];}}public static void SerializeVector3D(Vector3D v,StringBuilder sb){sb.AppendLine(v.ToString());}public static void SerializeDateTime(DateTime d,StringBuilder sb){sb.AppendLine(d.ToBinary().ToString());}public static void SerializeMatrixD(MatrixD m,StringBuilder sb){var a=new double[]{m.M11,m.M12,m.M13,m.M14,m.M21,m.M22,m.M23,m.M24,m.M31,m.M32,m.M33,m.M34,m.M41,m.M42,m.M43,m.M44,};sb.AppendLine(string.Join(DIV.ToString(),a));}public static void SerializeMyDetectedEntityInfo(MyDetectedEntityInfo entity,StringBuilder sb){sb.AppendLine(entity.EntityId.ToString());sb.AppendLine(entity.Type.ToString());sb.AppendLine(entity.HitPosition?.ToString()??string.Empty);SerializeMatrixD(entity.Orientation,sb);sb.AppendLine(new Vector3D(entity.Velocity).ToString());sb.AppendLine(entity.Relationship.ToString());sb.AppendLine(entity.BoundingBox.Min.ToString());sb.AppendLine(entity.BoundingBox.Max.ToString());sb.AppendLine(entity.TimeStamp.ToString());}public static void SerializeTargetInfo(TargetInfo t,StringBuilder sb){SerializeMyDetectedEntityInfo(t.Entity,sb);SerializeVector3D(t.HitPosRelative,sb);SerializeDateTime(t.Timestamp,sb);}public static void SerializeTargetInfoArray(TargetInfo[]a,StringBuilder sb){sb.AppendLine(a.Length.ToString());foreach(var t in a){SerializeTargetInfo(t,sb);}}public static bool TryParseMatrixD(StringReader reader,out MatrixD m){try{var a=reader.GetNextLine().Split(DIV).Select(s=>double.Parse(s)).ToArray();m=new MatrixD(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]);return true;}catch{m=MatrixD.Zero;return false;}}public static bool TryParseNullableVector3D(StringReader reader,out Vector3D?v){var str=reader.GetNextLine();if(string.IsNullOrEmpty(str)){v=null;return true;}Vector3D tmp;if(Vector3D.TryParse(str,out tmp)){v=tmp;return true;}v=null;return false;}public static bool TryParseBoundingBoxD(StringReader reader,out BoundingBoxD b){string strMin=reader.GetNextLine();string strMax=reader.GetNextLine();Vector3D min,max;if(Vector3D.TryParse(strMin,out min)&&Vector3D.TryParse(strMax,out max)){b=new BoundingBoxD(min,max);return true;}b=new BoundingBoxD();return false;}public static bool TryParseMyDetectedEntityInfo(StringReader reader,out MyDetectedEntityInfo entity){var success=true;long entityId;success&=long.TryParse(reader.GetNextLine(),out entityId);MyDetectedEntityType type;success&=MyDetectedEntityType.TryParse(reader.GetNextLine(),out type);Vector3D?hitPosition;success&=TryParseNullableVector3D(reader,out hitPosition);MatrixD orientation;success&=TryParseMatrixD(reader,out orientation);Vector3D velocity;success&=Vector3D.TryParse(reader.GetNextLine(),out velocity);MyRelationsBetweenPlayerAndBlock relationship;success&=MyRelationsBetweenPlayerAndBlock.TryParse(reader.GetNextLine(),out relationship);BoundingBoxD boundingBox;success&=TryParseBoundingBoxD(reader,out boundingBox);long timestamp;success&=long.TryParse(reader.GetNextLine(),out timestamp);entity=success?new MyDetectedEntityInfo(entityId,string.Empty,type,hitPosition,orientation,velocity,relationship,boundingBox,timestamp):new MyDetectedEntityInfo();return success;}public static bool TryParseVector3D(StringReader reader,out Vector3D v){return Vector3D.TryParse(reader.GetNextLine(),out v);}public static bool TryParseDateTime(StringReader reader,out DateTime d){long ts;if(long.TryParse(reader.GetNextLine(),out ts)){d=DateTime.FromBinary(ts);return true;}d=DateTime.MinValue;return false;}public static bool TryParseTargetInfo(StringReader reader,out TargetInfo targetInfo){targetInfo=new TargetInfo();MyDetectedEntityInfo entity;if(!TryParseMyDetectedEntityInfo(reader,out entity))return false;Vector3D hitPos;if(!TryParseVector3D(reader,out hitPos))return false;DateTime timestamp;if(!TryParseDateTime(reader,out timestamp))return false;targetInfo=new TargetInfo(entity,timestamp,timestamp,hitPos);return true;}public static bool TryParseTargetInfoArray(StringReader reader,out TargetInfo[]result){TargetInfo target;int length;if(!int.TryParse(reader.GetNextLine(),out length)){result=null;return false;}result=new TargetInfo[length];for(var i=0;i<length;i++){if(TryParseTargetInfo(reader,out target)){result[i]=target;}else{result=null;return false;}}return true;}}public static class Helpers{public class InterceptResult{public Vector3D Position;public double TimeMs;}public static InterceptResult CalculateInterceptPoint(Vector3D ownPosition,double interceptSpeed,Vector3D targetPosition,Vector3D targetVelocity){Vector3D directionToTarget=Vector3D.Normalize(targetPosition-ownPosition);double targetSpeedlOrth=Vector3D.Dot(targetVelocity,directionToTarget);Vector3D targetVelOrth=directionToTarget*targetSpeedlOrth;Vector3D targetVelTang=targetVelocity-targetVelOrth;double targetSpeedlTang=targetVelTang.Length();if(targetSpeedlTang>=interceptSpeed){return null;}double missileSpeedTang=targetSpeedlTang;double missileSpeedOrth=Math.Sqrt(interceptSpeed*interceptSpeed-missileSpeedTang*missileSpeedTang);if(targetSpeedlOrth>=missileSpeedOrth){return null;}double timeS=Vector3D.Distance(ownPosition,targetPosition)/(missileSpeedOrth-targetSpeedlOrth);Vector3D point=targetPosition+targetVelocity*timeS;return new InterceptResult{Position=point,TimeMs=timeS*1000};}}public class DirectionController2{public const double MIN_SPEED=50;public const float DEFAULT_FACTOR=2;readonly IMyShipController remoteControl;readonly IEnumerable<IMyGyro>gyroList;readonly float factor;public DirectionController2(IMyShipController remoteControl,IEnumerable<IMyGyro>gyroList,float factor=DEFAULT_FACTOR){this.remoteControl=remoteControl;this.gyroList=gyroList;this.factor=factor;}public void ICBM(MyDetectedEntityInfo target){var grav=remoteControl.GetNaturalGravity();var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var ownSpeed=Math.Max(velocity.Length(),MIN_SPEED);var point=Helpers.CalculateInterceptPoint(ownPos,ownSpeed,target.Position,target.Velocity);var targetPos=point==null?target.Position:point.Position;var targetVector=targetPos-ownPos;if(grav.IsZero()||targetVector.Length()<3500){Aim(targetPos);}else{Vector3D direction=CompensateSideVelocity(grav,targetVector);var axis=GetAxis(remoteControl.WorldMatrix.Forward,direction);SetGyroByAxis(axis,gyroList,factor);}}public void KeepHorizon(Vector3D?grav=null){var direction=grav??remoteControl.GetNaturalGravity();if(!direction.IsZero()){var axis=GetAxis(remoteControl.WorldMatrix.Down,direction);SetGyroByAxis(axis,gyroList,factor);}}public void Aim(Vector3D targetPos){var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var targetVector=CompensateSideVelocity(velocity,targetPos-ownPos);var axis=GetAxis(remoteControl.WorldMatrix.Forward,targetVector);SetGyroByAxis(axis,gyroList,factor);}public bool Intercept(Vector3D targetPosition,Vector3 targetVelocity){var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var ownSpeed=Math.Max(velocity.Length(),MIN_SPEED);var interceptPoint=Helpers.CalculateInterceptPoint(ownPos,ownSpeed,targetPosition,targetVelocity);var aimingPointPosition=interceptPoint?.Position??targetPosition;var direction=aimingPointPosition-ownPos;var compensatedTargetVector=CompensateSideVelocity(velocity,direction);var axis=GetAxis(remoteControl.WorldMatrix.Forward,compensatedTargetVector);SetGyroByAxis(axis,gyroList,factor);return interceptPoint!=null;}public bool InterceptShot(MyDetectedEntityInfo target,double bulletSpeed){var ownPos=remoteControl.GetPosition();var ownVelocity=remoteControl.GetShipVelocities().LinearVelocity;var relativeTargetVelocity=target.Velocity-ownVelocity;var point=Helpers.CalculateInterceptPoint(ownPos,bulletSpeed,target.Position,relativeTargetVelocity);var targetVector=point==null?(target.Position-ownPos):(point.Position-ownPos);var axis=GetAxis(remoteControl.WorldMatrix.Forward,targetVector);SetGyroByAxis(axis,gyroList,factor);return point!=null;}public static Vector3D CompensateSideVelocity(Vector3D velocity,Vector3D targetVector,float ratio=1){var sideVelocity=Vector3D.Reject(velocity,Vector3D.Normalize(targetVector));var sameDirection=Vector3D.Dot(velocity,targetVector)>0;return sameDirection?velocity-(1+ratio)*sideVelocity:(1-ratio)*sideVelocity-velocity;}public static Vector3D GetAxis(Vector3D currentDirection,Vector3D targetDirection){var target=Vector3D.Normalize(targetDirection);var current=Vector3D.Normalize(currentDirection);var axis=target.Cross(current);if(target.Dot(current)<0){axis=Vector3D.Normalize(axis);}return axis;}public static void SetGyroByAxis(Vector3D axis,IEnumerable<IMyGyro>gyroList,float factor=DEFAULT_FACTOR){foreach(var gyro in gyroList){gyro.Yaw=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Up));gyro.Pitch=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Right));gyro.Roll=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Backward));}}}const float MAX_SPEED_H=0.5f;const float MAX_SPEED_V=0.2f;const int REPEAT=3;const float BLOCK_SIZE=2.5f;class Settings{public uint width;public uint height;public Action<uint,uint>start;int index=0;public Settings(Action<uint,uint>start,uint height=50,uint width=22){this.start=start;this.height=height;this.width=width;}public void Prev(){if(index>0){index--;}}public void Next(){if(index<5){index++;}}public void Apply(){switch(index){case 0:height++;break;case 1:height--;break;case 2:width++;break;case 3:width--;break;case 4:start(width,height);break;}}private string Cur(int i){return index==i?"> ":"";}public override string ToString(){var sb=new StringBuilder();sb.AppendLine("Parameters:\n--");sb.AppendLine($"{Cur(0)}Height ++ {height}");sb.AppendLine($"{Cur(1)}Height --");sb.AppendLine($"{Cur(2)}Width ++ {width}");sb.AppendLine($"{Cur(3)}Width --");sb.AppendLine($"{Cur(4)}Start");return sb.ToString();}}class PrintState{public Vector3D position;public uint level=0;public bool moveTop=false;public bool moveRight=true;public uint repeat=REPEAT;public uint maxLevel;public uint offset;public Vector3D GetCurrentPoint(MatrixD wm){var up=wm.Up*level*BLOCK_SIZE;var offset=(moveRight?wm.Right:wm.Left)*this.offset*BLOCK_SIZE;return position+up+offset;}public void Serialize(StringBuilder sb){Serializer.SerializeVector3D(position,sb);sb.AppendLine(level.ToString());sb.AppendLine(moveTop.ToString());sb.AppendLine(moveRight.ToString());sb.AppendLine(repeat.ToString());sb.AppendLine(maxLevel.ToString());sb.AppendLine(offset.ToString());}public static bool TryParse(Serializer.StringReader reader,out PrintState v){var success=true;Vector3D position;success&=Serializer.TryParseVector3D(reader,out position);uint level;success&=uint.TryParse(reader.GetNextLine(),out level);bool moveTop;success&=bool.TryParse(reader.GetNextLine(),out moveTop);bool moveRight;success&=bool.TryParse(reader.GetNextLine(),out moveRight);uint repeat;success&=uint.TryParse(reader.GetNextLine(),out repeat);uint maxLevel;success&=uint.TryParse(reader.GetNextLine(),out maxLevel);uint offset;success&=uint.TryParse(reader.GetNextLine(),out offset);v=success?new PrintState{position=position,level=level,moveTop=moveTop,moveRight=moveRight,repeat=repeat,maxLevel=maxLevel,offset=offset,}:null;return success;}}class X<T>where T:IMyTerminalBlock{public readonly T[]up;public readonly T[]down;public readonly T[]left;public readonly T[]right;public readonly T[]forward;public readonly T[]back;public readonly T[]all;public X(MatrixD anchor,IEnumerable<T>blocks,Func<MatrixD,Vector3D>fn){all=blocks.ToArray();forward=all.Where(b=>anchor.Forward==fn(b.WorldMatrix)).ToArray();back=all.Where(b=>anchor.Backward==fn(b.WorldMatrix)).ToArray();up=all.Where(b=>anchor.Up==fn(b.WorldMatrix)).ToArray();down=all.Where(b=>anchor.Down==fn(b.WorldMatrix)).ToArray();left=all.Where(b=>anchor.Left==fn(b.WorldMatrix)).ToArray();right=all.Where(b=>anchor.Right==fn(b.WorldMatrix)).ToArray();}public override string ToString(){return$"- up: {up.Length}, down: {down.Length}\n"+$"- left: {left.Length}, right: {right.Length}\n"+$"- forward: {forward.Length}, back: {back.Length}";}}class OneDimensionMovementController{enum ThrustDirection{None,Forward,Backward,}private readonly IMyThrust[]forward;private readonly IMyThrust[]back;private readonly float vMax;public OneDimensionMovementController(IMyThrust[]forward,IMyThrust[]back,float vMax){this.forward=forward;this.back=back;this.vMax=vMax;}public static void SetThrust(IMyThrust[]thrusters,float mass,float a){var totalThrust=mass*a;foreach(var t in thrusters){var thrust=Math.Max(0,Math.Min(t.MaxThrust,totalThrust));t.ThrustOverride=thrust;totalThrust-=thrust;}}public static void ControlThrusters(float mass,IMyThrust[]forward,IMyThrust[]back,double velocity,double distance,float vMax){var direction=ThrustDirection.None;const float aMax=1f;var thrustForward=forward.Sum(t=>t.MaxThrust);var thrustBack=back.Sum(t=>t.MaxThrust);var fa=Math.Min(thrustForward/mass,aMax);var ba=Math.Min(thrustBack/mass,aMax);if(velocity<0){direction=ThrustDirection.Forward;}else{var t=velocity/ba;var s=(velocity*t)-ba*t*t/2;if(s>=distance){direction=ThrustDirection.Backward;}else if(velocity<vMax){direction=ThrustDirection.Forward;}}SetThrust(forward,mass,direction==ThrustDirection.Forward?fa:0);SetThrust(back,mass,direction==ThrustDirection.Backward?ba:0);}public void Update(float mass,double velocity,double currentPos,double targetPos){if(targetPos>currentPos){ControlThrusters(mass,forward,back,velocity,targetPos-currentPos,vMax);}else{ControlThrusters(mass,back,forward,-velocity,currentPos-targetPos,vMax);}}}const float FACTOR=1.4f;readonly IMyCockpit cockpit;readonly IMyGyro[]gyros;readonly IMyShipConnector connector;readonly RuntimeTracker tracker;readonly IMyTextSurface lcd;readonly IMyTextSurface lcdStatus;readonly IMyTextSurface lcdDebug;private readonly Grid grid;private readonly X<IMyThrust>thrusters;private readonly OneDimensionMovementController moveX;private readonly OneDimensionMovementController moveY;private readonly OneDimensionMovementController moveZ;private readonly Settings settings;private MatrixD?orientation;private DateTime pauseTimestamp=DateTime.MaxValue;private PrintState printState;private bool IsOnPause(DateTime now){return pauseTimestamp>now;}private void Pause(DateTime ts){pauseTimestamp=ts;cockpit.DampenersOverride=true;foreach(var t in thrusters.all){t.ThrustOverride=0;}}private void Resume(){pauseTimestamp=DateTime.MinValue;}private bool sameGrid<T>(T b)where T:IMyTerminalBlock{return b.CubeGrid==Me.CubeGrid;}public Program(){grid=new Grid(GridTerminalSystem);tracker=new RuntimeTracker(this);lcd=Me.GetSurface(1);lcd.ContentType=ContentType.TEXT_AND_IMAGE;connector=grid.GetBlocksOfType<IMyShipConnector>(sameGrid).First();cockpit=grid.GetBlocksOfType<IMyCockpit>(sameGrid).First();gyros=grid.GetBlocksOfType<IMyGyro>(sameGrid);var t=grid.GetBlocksOfType<IMyThrust>(sameGrid);thrusters=new X<IMyThrust>(cockpit.WorldMatrix,t,m=>m.Backward);moveX=new OneDimensionMovementController(thrusters.right,thrusters.left,MAX_SPEED_H);moveY=new OneDimensionMovementController(thrusters.up,thrusters.down,MAX_SPEED_V);moveZ=new OneDimensionMovementController(thrusters.back,thrusters.forward,MAX_SPEED_V);settings=new Settings(Start);lcdStatus=cockpit.GetSurface(0);lcdDebug=cockpit.GetSurface(2);var reader=new Serializer.StringReader(Me.CustomData);MatrixD tmp;if(Serializer.TryParseMatrixD(reader,out tmp)){orientation=tmp;}PrintState ps;if(PrintState.TryParse(reader,out ps)){printState=ps;}Pause(DateTime.MaxValue);Runtime.UpdateFrequency=UpdateFrequency.Update1;}private void SaveState(){if(orientation==null){Me.CustomData=string.Empty;return;}var sb=new StringBuilder();Serializer.SerializeMatrixD(orientation.Value,sb);if(printState!=null){printState.Serialize(sb);}Me.CustomData=sb.ToString();}private void SetDirection(){if(connector.Status==MyShipConnectorStatus.Connected){var cubeGrid=connector.OtherConnector.CubeGrid;IMyShipController[]list=grid.GetBlocksOfType<IMyShipController>(w=>w.CubeGrid==cubeGrid);var cockpit=list.FirstOrDefault(b=>b.CustomName.ToLower().Contains("[csp]"))??list.FirstOrDefault();orientation=cockpit?.WorldMatrix;SaveState();}}private void Lock(){if(orientation.HasValue){connector.Disconnect();foreach(var gyro in gyros){gyro.GyroOverride=true;gyro.GyroPower=1;}}}private void Unlock(){foreach(var gyro in gyros){gyro.GyroOverride=false;gyro.GyroPower=0.3f;}}private void Move(DateTime now){if(printState==null||IsOnPause(now)){return;}if(printState.level<0||printState.level>=printState.maxLevel){Pause(DateTime.MaxValue);return;}var mass=cockpit.CalculateShipMass().TotalMass;var velocity=cockpit.GetShipVelocities().LinearVelocity;var matrix=MatrixD.Invert(cockpit.WorldMatrix.GetOrientation());var target=printState.GetCurrentPoint(orientation.Value)-printState.position;var offset=cockpit.GetPosition()-printState.position;var targetLocal=Vector3D.Transform(target,matrix);var offsetLocal=Vector3D.Transform(offset,matrix);var velocityLocal=Vector3D.Transform(velocity,matrix);cockpit.DampenersOverride=false;moveX.Update(mass,velocityLocal.X,offsetLocal.X,targetLocal.X);moveY.Update(mass,velocityLocal.Y,offsetLocal.Y,targetLocal.Y);moveZ.Update(mass,velocityLocal.Z,offsetLocal.Z,targetLocal.Z);var sb=new StringBuilder();sb.AppendLine("Print state:\n--");sb.AppendLine($"Height: {offsetLocal.Y:0.00} / {targetLocal.Y:0.00}");sb.AppendLine($"Offset: {offsetLocal.X:0.00} / {targetLocal.X:0.00}");sb.AppendLine($"Diff: {(target-offset).Length():0.00}");sb.AppendLine($"Velocity: X {velocityLocal.X:0.00} / Y {velocityLocal.Y:0.00}");sb.AppendLine($"Level: {printState.level}, iteration left: {printState.repeat}, direction {(printState.moveRight?"RIGHT":"LEFT")}");sb.AppendLine("--\n> Stop");lcdDebug.WriteText(sb);if((target-offset).Length()<0.5&&velocityLocal.X<0.5&&velocityLocal.Y<0.5){if(printState.moveTop){printState.repeat=REPEAT;printState.moveTop=false;printState.moveRight=!printState.moveRight;}else{printState.repeat--;if(printState.repeat>0){printState.moveRight=!printState.moveRight;}else{printState.level++;printState.moveTop=true;}}SaveState();Pause(now.AddSeconds(5));}}private void Align(){if(!orientation.HasValue){return;}var m=orientation.Value;var axisDown=DirectionController2.GetAxis(cockpit.WorldMatrix.Down,m.Down);var axisForward=DirectionController2.GetAxis(cockpit.WorldMatrix.Forward,m.Forward);foreach(var gyro in gyros){gyro.Yaw=FACTOR*Convert.ToSingle(axisForward.Dot(gyro.WorldMatrix.Up));gyro.Pitch=FACTOR*Convert.ToSingle(axisDown.Dot(gyro.WorldMatrix.Right));gyro.Roll=FACTOR*Convert.ToSingle(axisDown.Dot(gyro.WorldMatrix.Backward));gyro.GyroOverride=true;}}public void Main(string argument,UpdateType updateSource){var now=DateTime.UtcNow;tracker.AddRuntime();Align();if(printState==null){switch(argument){case"init":SetDirection();Lock();break;case"reset":orientation=null;Me.CustomData=string.Empty;Unlock();break;case"up":settings.Prev();break;case"down":settings.Next();break;case"apply":settings.Apply();break;}lcdDebug.WriteText(settings.ToString());}else{switch(argument){case"apply":printState=null;cockpit.DampenersOverride=true;foreach(var t in thrusters.all){t.ThrustOverride=0;}break;default:Move(now);break;}}switch(argument){case"pause":if(IsOnPause(now)){Resume();}else{Pause(DateTime.MaxValue);}break;}var sb=new StringBuilder();sb.AppendLine($"Locked: {orientation.HasValue}");sb.AppendLine($"Id printing: {printState!=null}");sb.AppendLine($"Is on pause: {IsOnPause(now)}");lcdStatus.WriteText(sb);tracker.AddInstructions();lcd.WriteText(tracker.ToString());}private void Start(uint width,uint length){orientation=cockpit.WorldMatrix;printState=new PrintState{maxLevel=length,offset=width/2+1,position=cockpit.GetPosition(),};foreach(var t in thrusters.all){t.Enabled=true;}SaveState();Resume();}private string FormatGPS(Vector3D point,string label){return$"GPS:{label}:{point.X:0.00}:{point.Y:0.00}:{point.Z:0.00}:#FF89F175:";}