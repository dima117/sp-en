//12/30/2023 9:44:35 PM
public class RuntimeTracker{public int Capacity{get;set;}public double MaxRuntime{get;private set;}public double MaxInstructions{get;private set;}public double AverageRuntime{get;private set;}public double AverageInstructions{get;private set;}public double LastRuntime{get;private set;}public double LastInstructions{get;private set;}readonly Queue<double>runtimes=new Queue<double>();readonly Queue<double>instructions=new Queue<double>();readonly int instructionLimit;readonly MyGridProgram program;double runtimeSum=0;double instructionsSum=0;public RuntimeTracker(MyGridProgram program,int capacity=120){this.program=program;Capacity=capacity;instructionLimit=program.Runtime.MaxInstructionCount;}public void AddRuntime(){LastRuntime=program.Runtime.LastRunTimeMs;runtimes.Enqueue(LastRuntime);runtimeSum+=LastRuntime;if(runtimes.Count>Capacity){var firstRuntime=runtimes.Dequeue();runtimeSum-=firstRuntime;}AverageRuntime=runtimeSum/runtimes.Count();MaxRuntime=runtimes.Max();}public void AddInstructions(){LastInstructions=program.Runtime.CurrentInstructionCount;instructions.Enqueue(LastInstructions);instructionsSum+=LastInstructions;if(instructions.Count>Capacity){var firstInstructions=instructions.Dequeue();instructionsSum-=firstInstructions;}AverageInstructions=instructionsSum/instructions.Count();MaxInstructions=instructions.Max();}public override string ToString(){return$"Runtime: {LastRuntime:0.00}ms/{AverageRuntime:0.00}ms/{MaxRuntime:0.00}ms\n"+$"Instructions: {LastInstructions:0}/{AverageInstructions:0}/{MaxInstructions:0}\n"+$"Complexity: {AverageInstructions:0}/{instructionLimit:0} ({AverageInstructions/instructionLimit:0.00}%)";}}public class MsgTags{public const string LOCK_TARGET="@LOCK_TARGET";public const string UPDATE_TARGET_POS="@UPDATE_TARGET_POS";public const string CLEAR_TARGET_POS="@CLEAR_TARGET_POS";}public class Transmitter{private int seq=0;protected IMyIntergridCommunicationSystem igc;protected List<IMyRadioAntenna>blocks=new List<IMyRadioAntenna>();private Dictionary<string,Action<MyIGCMessage>>actions=new Dictionary<string,Action<MyIGCMessage>>();private Dictionary<string,IMyBroadcastListener>listeners=new Dictionary<string,IMyBroadcastListener>();public Transmitter(MyGridProgram program){igc=program.IGC;igc.UnicastListener.SetMessageCallback();program.GridTerminalSystem.GetBlocksOfType(blocks);blocks.ForEach(a=>{a.EnableBroadcasting=true;a.Enabled=true;});}public void Subscribe(string tag,Action<MyIGCMessage>fn,bool broadcast=false){if(broadcast){var listener=igc.RegisterBroadcastListener(tag);var listenerId=(DateTime.UtcNow.Ticks-(seq++)).ToString();listener.SetMessageCallback(listenerId);listeners[listenerId]=listener;}actions[tag]=fn;}public virtual void Send(string tag,string data="",long?destination=null){if(destination.HasValue){igc.SendUnicastMessage(destination.Value,tag,data);}else{igc.SendBroadcastMessage(tag,data);}}public virtual void Update(string listenerId,UpdateType updateSource){if(updateSource==UpdateType.IGC){IMyMessageProvider listener=igc.UnicastListener;if(listeners.ContainsKey(listenerId)){listener=listeners[listenerId];}while(listener.HasPendingMessage){var message=listener.AcceptMessage();if(actions.ContainsKey(message.Tag)){actions[message.Tag](message);}}}}}public struct TargetInfo{public readonly MyDetectedEntityInfo Entity;public readonly Vector3D HitPos;public readonly DateTime Timestamp;public readonly double ScanDelayMs;public TargetInfo(MyDetectedEntityInfo entity=default(MyDetectedEntityInfo),DateTime timestamp=default(DateTime),double scanDelayMs=default(double),Vector3D hitPos=default(Vector3D)){Entity=entity;Timestamp=timestamp;ScanDelayMs=scanDelayMs;HitPos=hitPos;}public TargetInfo Update(MyDetectedEntityInfo entity,DateTime timestamp,double scanDelayMs){return new TargetInfo(entity,timestamp,scanDelayMs,HitPos);}public static TargetInfo CreateTargetInfo(MyDetectedEntityInfo entity,DateTime timestamp,Vector3D camPos){var relativeHitPos=default(Vector3D);if(entity.HitPosition.HasValue){var hitPos=entity.HitPosition.Value;var correctedHitPos=hitPos+Vector3D.Normalize(hitPos-camPos);var invertedMatrix=MatrixD.Invert(entity.Orientation);relativeHitPos=Vector3D.Transform(correctedHitPos-entity.Position,invertedMatrix);}return new TargetInfo(entity,timestamp,0,relativeHitPos);}}public static class Serializer{const char DIV=';';public class StringReader{private readonly string[]lines;private int nextPos=0;public StringReader(string value){lines=value.Split('\n');}public string GetNextLine(){return lines[nextPos++];}}public static void SerializeVector3D(Vector3D v,StringBuilder sb){sb.AppendLine(v.ToString());}public static void SerializeDateTime(DateTime d,StringBuilder sb){sb.AppendLine(d.ToBinary().ToString());}public static void SerializeMatrixD(MatrixD m,StringBuilder sb){var a=new double[]{m.M11,m.M12,m.M13,m.M14,m.M21,m.M22,m.M23,m.M24,m.M31,m.M32,m.M33,m.M34,m.M41,m.M42,m.M43,m.M44,};sb.AppendLine(string.Join(DIV.ToString(),a));}public static void SerializeMyDetectedEntityInfo(MyDetectedEntityInfo entity,StringBuilder sb){sb.AppendLine(entity.EntityId.ToString());sb.AppendLine(entity.Type.ToString());sb.AppendLine(entity.HitPosition?.ToString()??string.Empty);SerializeMatrixD(entity.Orientation,sb);sb.AppendLine(new Vector3D(entity.Velocity).ToString());sb.AppendLine(entity.Relationship.ToString());sb.AppendLine(entity.BoundingBox.Min.ToString());sb.AppendLine(entity.BoundingBox.Max.ToString());sb.AppendLine(entity.TimeStamp.ToString());}public static void SerializeTargetInfo(TargetInfo t,StringBuilder sb){SerializeMyDetectedEntityInfo(t.Entity,sb);SerializeVector3D(t.HitPos,sb);SerializeDateTime(t.Timestamp,sb);}public static bool TryParseMatrixD(StringReader reader,out MatrixD m){try{var a=reader.GetNextLine().Split(DIV).Select(s=>double.Parse(s)).ToArray();m=new MatrixD(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]);return true;}catch{m=MatrixD.Zero;return false;}}public static bool TryParseNullableVector3D(StringReader reader,out Vector3D?v){var str=reader.GetNextLine();if(string.IsNullOrEmpty(str)){v=null;return true;}Vector3D tmp;if(Vector3D.TryParse(str,out tmp)){v=tmp;return true;}v=null;return false;}public static bool TryParseBoundingBoxD(StringReader reader,out BoundingBoxD b){string strMin=reader.GetNextLine();string strMax=reader.GetNextLine();Vector3D min,max;if(Vector3D.TryParse(strMin,out min)&&Vector3D.TryParse(strMax,out max)){b=new BoundingBoxD(min,max);return true;}b=new BoundingBoxD();return false;}public static bool TryParseMyDetectedEntityInfo(StringReader reader,out MyDetectedEntityInfo entity){var success=true;long entityId;success&=long.TryParse(reader.GetNextLine(),out entityId);MyDetectedEntityType type;success&=MyDetectedEntityType.TryParse(reader.GetNextLine(),out type);Vector3D?hitPosition;success&=TryParseNullableVector3D(reader,out hitPosition);MatrixD orientation;success&=TryParseMatrixD(reader,out orientation);Vector3D velocity;success&=Vector3D.TryParse(reader.GetNextLine(),out velocity);MyRelationsBetweenPlayerAndBlock relationship;success&=MyRelationsBetweenPlayerAndBlock.TryParse(reader.GetNextLine(),out relationship);BoundingBoxD boundingBox;success&=TryParseBoundingBoxD(reader,out boundingBox);long timestamp;success&=long.TryParse(reader.GetNextLine(),out timestamp);entity=success?new MyDetectedEntityInfo(entityId,string.Empty,type,hitPosition,orientation,velocity,relationship,boundingBox,timestamp):new MyDetectedEntityInfo();return success;}public static bool TryParseVector3D(StringReader reader,out Vector3D v){return Vector3D.TryParse(reader.GetNextLine(),out v);}public static bool TryParseDateTime(StringReader reader,out DateTime d){long ts;if(long.TryParse(reader.GetNextLine(),out ts)){d=DateTime.FromBinary(ts);return true;}d=DateTime.MinValue;return false;}public static bool TryParseTargetInfo(StringReader reader,out TargetInfo targetInfo){targetInfo=new TargetInfo();MyDetectedEntityInfo entity;if(!TryParseMyDetectedEntityInfo(reader,out entity))return false;Vector3D hitPos;if(!TryParseVector3D(reader,out hitPos))return false;DateTime timestamp;if(!TryParseDateTime(reader,out timestamp))return false;targetInfo=new TargetInfo(entity,timestamp,0,hitPos);return true;}}public static class Helpers{public class InterceptResult{public Vector3D Position;public double TimeMs;}public static InterceptResult CalculateInterceptPoint(Vector3D ownPosition,double interceptSpeed,Vector3D targetPosition,Vector3D targetVelocity){Vector3D directionToTarget=Vector3D.Normalize(targetPosition-ownPosition);double targetSpeedlOrth=Vector3D.Dot(targetVelocity,directionToTarget);Vector3D targetVelOrth=directionToTarget*targetSpeedlOrth;Vector3D targetVelTang=targetVelocity-targetVelOrth;double targetSpeedlTang=targetVelTang.Length();if(targetSpeedlTang>=interceptSpeed){return null;}double missileSpeedTang=targetSpeedlTang;double missileSpeedOrth=Math.Sqrt(interceptSpeed*interceptSpeed-missileSpeedTang*missileSpeedTang);if(targetSpeedlOrth>=missileSpeedOrth){return null;}double timeS=Vector3D.Distance(ownPosition,targetPosition)/(missileSpeedOrth-targetSpeedlOrth);Vector3D point=targetPosition+targetVelocity*timeS;return new InterceptResult{Position=point,TimeMs=timeS*1000};}}public class DirectionController2{public const double MIN_SPEED=50;readonly IMyShipController remoteControl;readonly IEnumerable<IMyGyro>gyroList;readonly float factor;public DirectionController2(IMyShipController remoteControl,IEnumerable<IMyGyro>gyroList,float factor){this.remoteControl=remoteControl;this.gyroList=gyroList;this.factor=factor;}public void ICBM(Vector3D targetPos){var grav=remoteControl.GetNaturalGravity();var ownPos=remoteControl.GetPosition();var targetVector=targetPos-ownPos;if(grav.IsZero()||targetVector.Length()<3500){Aim(targetPos);}else{Vector3D direction=CompensateSideVelocity(grav,targetVector);var axis=GetAxis(remoteControl.WorldMatrix.Forward,direction);SetGyroByAxis(axis);}}public void KeepHorizon(){var grav=remoteControl.GetNaturalGravity();if(!grav.IsZero()){var axis=GetAxis(remoteControl.WorldMatrix.Down,grav);SetGyroByAxis(axis);}}public void Aim(Vector3D targetPos){var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var targetVector=CompensateSideVelocity(velocity,targetPos-ownPos);var axis=GetAxis(remoteControl.WorldMatrix.Forward,targetVector);SetGyroByAxis(axis);}public void Intercept(MyDetectedEntityInfo target){var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var ownSpeed=Math.Max(velocity.Length(),MIN_SPEED);var point=Helpers.CalculateInterceptPoint(ownPos,ownSpeed,target.Position,target.Velocity);var direction=point==null?new Vector3D(target.Velocity):(point.Position-ownPos);var targetVector=CompensateSideVelocity(velocity,direction);var axis=GetAxis(remoteControl.WorldMatrix.Forward,targetVector);SetGyroByAxis(axis);}public static Vector3D CompensateSideVelocity(Vector3D velocity,Vector3D targetVector,float ratio=1){var sideVelocity=Vector3D.Reject(velocity,Vector3D.Normalize(targetVector));var sameDirection=Vector3D.Dot(velocity,targetVector)>0;return sameDirection?velocity-(1+ratio)*sideVelocity:(1-ratio)*sideVelocity-velocity;}public static Vector3D GetAxis(Vector3D currentDirection,Vector3D targetDirection){var target=Vector3D.Normalize(targetDirection);var current=Vector3D.Normalize(currentDirection);var axis=target.Cross(current);if(target.Dot(current)<0){axis=Vector3D.Normalize(axis);}return axis;}public void SetGyroByAxis(Vector3D axis){foreach(var gyro in gyroList){gyro.Yaw=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Up));gyro.Pitch=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Right));gyro.Roll=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Backward));}}}public enum LaunchStage{Ready,Started,Dead,Invalid}public struct TorpedoStatus{public LaunchStage Stage;public string Name;public double Distance;public override string ToString(){return Stage==LaunchStage.Started?$"{Name}: {Stage} => {Distance:0}m":$"{Name}: {Stage}";}}public class Torpedo{public readonly string Id=DateTime.UtcNow.Ticks.ToString();readonly int delay;readonly int lifespan;readonly string name;readonly DirectionController2 tControl;readonly List<IMyGyro>listGyro=new List<IMyGyro>();readonly List<IMyThrust>listEngine=new List<IMyThrust>();readonly List<IMyGasGenerator>listH2Gen=new List<IMyGasGenerator>();readonly IMyRemoteControl tRemote;readonly IMyShipMergeBlock tClamp;DateTime startTime=DateTime.MaxValue;DateTime deathTime=DateTime.MaxValue;public Vector3D Position=>tRemote.GetPosition();public double Speed=>Started&&IsAlive?tRemote.GetShipSpeed():0;public bool IsReady=>listEngine.Any()&&listGyro.Any()&&tRemote!=null&&tClamp!=null;public bool Started{get;private set;}public LaunchStage Stage=>!IsAlive?LaunchStage.Dead:Started?LaunchStage.Started:IsReady?LaunchStage.Ready:LaunchStage.Invalid;public long EntityId=>(tRemote?.EntityId).GetValueOrDefault();public bool IsAlive=>tRemote.IsFunctional&&listEngine.All(e=>e.IsFunctional&&e.CubeGrid.EntityId==tRemote.CubeGrid.EntityId)&&listGyro.All(g=>g.IsFunctional&&g.CubeGrid.EntityId==tRemote.CubeGrid.EntityId)&&DateTime.UtcNow<deathTime;public Torpedo(IMyBlockGroup group,int delay=3000,float factor=7,int lifespan=360){name=group.Name;this.delay=delay;this.lifespan=lifespan;group.GetBlocksOfType(listGyro);group.GetBlocksOfType(listEngine);group.GetBlocksOfType(listH2Gen);var tmp=new List<IMyTerminalBlock>();group.GetBlocks(tmp);tClamp=tmp.FirstOrDefault(b=>b is IMyShipMergeBlock)as IMyShipMergeBlock;tRemote=tmp.FirstOrDefault(b=>b is IMyRemoteControl)as IMyRemoteControl;tControl=new DirectionController2(tRemote,listGyro,factor);}public void Start(){startTime=DateTime.UtcNow;deathTime=startTime.AddSeconds(lifespan);tClamp.Enabled=false;listGyro.ForEach(g=>{g.Enabled=true;g.GyroOverride=true;});listH2Gen.ForEach(g=>{g.Enabled=true;});listEngine.ForEach(e=>{e.Enabled=true;e.ThrustOverridePercentage=1;});Started=true;}public TorpedoStatus Update(TargetInfo?info){double distance=0;if((DateTime.UtcNow-startTime).TotalMilliseconds>delay){if(info.HasValue){var target=info.Value.Entity;tControl.Intercept(target);distance=(target.Position-Position).Length();}}return new TorpedoStatus{Name=name,Stage=Stage,Distance=distance,};}}public class BlockArray<T>where T:class,IMyTerminalBlock{MyGridProgram program;Action<T>init;private List<T>list=new List<T>();private int index=0;public int Count=>list.Count;public T1 Aggregate<T1>(T1 a,Func<T1,T,T1>fn)=>list.Aggregate(a,fn);public BlockArray(MyGridProgram program,Action<T>init=null){this.program=program;this.init=init;UpdateBlocks();}public void UpdateBlocks(){index=0;list=new List<T>();program.GridTerminalSystem.GetBlocksOfType(list);list.ForEach(init);}public void ForEach(Action<T>fn=null){if(fn!=null){list.ForEach(fn);}}public T GetNext(Func<T,bool>filter=null){for(var count=0;count<list.Count;count++){index++;if(index>=list.Count){index=0;}T block=list[index];if(filter==null||filter(block)){return block;}}return null;}}public class TargetTracker{const double DISTANCE_RESERVE=50;const double DISTANCE_SCAN_DEFAULT=5000;static readonly HashSet<MyDetectedEntityType>targetTypes=new HashSet<MyDetectedEntityType>{MyDetectedEntityType.SmallGrid,MyDetectedEntityType.LargeGrid};public static TargetInfo?Scan(IMyCameraBlock cam,double distance=DISTANCE_SCAN_DEFAULT,bool onlyEnemies=false){if(cam==null){return null;}var target=cam.Raycast(distance);if(target.IsEmpty()){return null;}if(!targetTypes.Contains(target.Type)){return null;}if(onlyEnemies&&target.Relationship!=MyRelationsBetweenPlayerAndBlock.Enemies){return null;}var camPos=cam.GetPosition();return TargetInfo.CreateTargetInfo(target,DateTime.UtcNow,camPos);}private BlockArray<IMyCameraBlock>camArray;public TargetInfo?Current;static Vector3D CalculateTargetLocation(TargetInfo info,TimeSpan timePassed){var target=info.Entity;return target.Position+(target.Velocity*Convert.ToSingle(timePassed.TotalSeconds))+Vector3D.Transform(info.HitPos,target.Orientation);}public TargetTracker(MyGridProgram program){camArray=new BlockArray<IMyCameraBlock>(program,cam=>{cam.Enabled=true;cam.EnableRaycast=true;});}public int Count{get{return camArray.Count;}}public double TotalRange{get{return camArray.Aggregate<double>(0,(a,c)=>a+c.AvailableScanRange);}}public void UpdateCamArray(){camArray.UpdateBlocks();}public void LockOn(TargetInfo target){Current=target;}public void Clear(){Current=null;}private TargetInfo?TryGetUpdatedEntity(TargetInfo prevTarget,TimeSpan timePassed,DateTime now){var calculatedTargetPos=CalculateTargetLocation(prevTarget,timePassed);var camera=camArray.GetNext(cam=>cam.CanScan(calculatedTargetPos));if(camera==null){return null;}var target=camera.Raycast(calculatedTargetPos);if(target.IsEmpty()||target.EntityId!=prevTarget.Entity.EntityId){return null;}var camPos=camera.GetPosition();var distance=(target.Position-camPos).Length()+DISTANCE_RESERVE;var scanDelayMs=distance/camArray.Count/2;return prevTarget.Update(target,now,scanDelayMs);}public void Update(){if(!Current.HasValue){return;}var now=DateTime.UtcNow;var prevTarget=Current.Value;var timePassed=now-prevTarget.Timestamp;if(timePassed.TotalMilliseconds<prevTarget.ScanDelayMs){return;}var target=TryGetUpdatedEntity(prevTarget,timePassed,now);if(target.HasValue){Current=target.Value;}else if(timePassed.TotalSeconds>2){Clear();}}}const int DISTANCE=15000;const int LIFESPAN=600;const string BLOCK_NAME_CAMERA="CAMERA";const string BLOCK_NAME_SOUND="SOUND";const string GROUP_PREFIX_TORPEDO="TORPEDO";bool onlyEnemies=false;readonly RuntimeTracker tracker;readonly IMyTextSurface lcd;readonly Transmitter tsm;readonly TargetTracker tt;readonly IMyCameraBlock cam;readonly IMyTextSurface lcdTarget;readonly IMyTextSurface lcdSystem;readonly IMyTextSurface lcdTorpedos;readonly IMySoundBlock sound;readonly List<Torpedo>torpedos=new List<Torpedo>();public Program(){tracker=new RuntimeTracker(this);lcd=Me.GetSurface(1);lcd.ContentType=ContentType.TEXT_AND_IMAGE;tsm=new Transmitter(this);tsm.Subscribe(MsgTags.LOCK_TARGET,RemoteLock,true);tt=new TargetTracker(this);cam=GridTerminalSystem.GetBlockWithName(BLOCK_NAME_CAMERA)as IMyCameraBlock;cam.EnableRaycast=true;var list2=new List<IMyCockpit>();GridTerminalSystem.GetBlocksOfType(list2);var control=list2.FirstOrDefault(x=>x.CubeGrid.EntityId==Me.CubeGrid.EntityId);lcdTorpedos=control?.GetSurface(0);lcdTarget=control?.GetSurface(1);lcdSystem=control?.GetSurface(2);sound=GridTerminalSystem.GetBlockWithName(BLOCK_NAME_SOUND)as IMySoundBlock;if(sound!=null){sound.SelectedSound="ArcSoundBlockAlert2";sound.LoopPeriod=300;sound.Range=50;sound.Enabled=true;}Runtime.UpdateFrequency=UpdateFrequency.Update1;}private void RemoteLock(MyIGCMessage message){try{var data=message.Data.ToString();var reader=new Serializer.StringReader(data);TargetInfo target;if(Serializer.TryParseTargetInfo(reader,out target)){tt.LockOn(target);if(tt.Current.HasValue){sound?.Play();}}Me.CustomData=data;}catch(Exception ex){Me.CustomData=ex.Message+"\n"+ex.StackTrace;}}public void Main(string argument,UpdateType updateSource){tracker.AddRuntime();tsm.Update(argument,updateSource);switch(argument){case"filter":onlyEnemies=!onlyEnemies;break;case"init":tt.UpdateCamArray();break;case"lock":var target=TargetTracker.Scan(cam,DISTANCE,onlyEnemies);if(target.HasValue){tt.LockOn(target.Value);sound?.Play();}break;case"reset":tt.Clear();break;case"reload":var ids=new HashSet<long>(torpedos.Select(t=>t.EntityId));var groups=new List<IMyBlockGroup>();GridTerminalSystem.GetBlockGroups(groups,g=>g.Name.StartsWith(GROUP_PREFIX_TORPEDO));torpedos.AddRange(groups.Select(gr=>new Torpedo(gr,factor:3f,lifespan:LIFESPAN)).Where(t=>!ids.Contains(t.EntityId)));torpedos.RemoveAll(t=>!t.IsAlive);break;case"start":torpedos.FirstOrDefault(t=>!t.Started)?.Start();break;default:tt.Update();var state=torpedos?.Select(t=>t.Update(tt.Current));var text=String.Join("\n",state?.Select(s=>s.ToString()));lcdTorpedos?.WriteText(text);if(!tt.Current.HasValue&&sound?.IsWorking==true){sound?.Stop();}break;}UpdateTargetLcd();UpdateSystemLcd();tracker.AddInstructions();lcd.WriteText(tracker.ToString());}void UpdateTargetLcd(){var sb=new StringBuilder();sb.AppendLine($"Locked: {tt.Current.HasValue}");if(tt.Current.HasValue){var target=tt.Current.Value.Entity;var distance=Vector3D.Distance(cam.GetPosition(),target.Position);sb.AppendLine($"{target.Type}\nv: {target.Velocity.Length():0.0}\ns: {distance:0.0}");}lcdTarget?.WriteText(sb.ToString());}void UpdateSystemLcd(){var filter=onlyEnemies?"Enemies":"All";var sb=new StringBuilder();sb.AppendLine($"Range: {cam.AvailableScanRange:0.0}");sb.AppendLine($"Total range: {tt.TotalRange:0.0}");sb.AppendLine($"Cam count: {tt.Count}");sb.AppendLine($"Filter: {filter}");lcdSystem.WriteText(sb.ToString());}