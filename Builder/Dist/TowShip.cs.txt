//7/21/2024 1:35:45 AM
public class MsgTags{public const string REMOTE_LOCK_TARGET="@REMOTE_LOCK_TARGET";public const string REMOTE_START="@REMOTE_START";public const string GET_STATUS="@GET_STATUS";public const string REMOTE_STATUS="@REMOTE_STATUS";public const string SYNC_TARGETS="@SYNC_TARGETS";}public class Transmitter{private static int seq=0;protected IMyIntergridCommunicationSystem igc;protected IMyRadioAntenna[]antennas;private Dictionary<string,Action<MyIGCMessage>>actions=new Dictionary<string,Action<MyIGCMessage>>();private Dictionary<string,IMyBroadcastListener>listeners=new Dictionary<string,IMyBroadcastListener>();public Transmitter(IMyIntergridCommunicationSystem igc,IMyRadioAntenna[]antennas){this.igc=igc;igc.UnicastListener.SetMessageCallback();this.antennas=antennas;foreach(var a in antennas){a.EnableBroadcasting=true;a.Enabled=true;}}public void Subscribe(string tag,Action<MyIGCMessage>fn,bool broadcast=false){if(broadcast){var listener=igc.RegisterBroadcastListener(tag);var listenerId=$"{tag}-{seq++}";listener.SetMessageCallback(listenerId);listeners[listenerId]=listener;}actions[tag]=fn;}public virtual void Send(string tag,string data="",long?destination=null){if(destination.HasValue){igc.SendUnicastMessage(destination.Value,tag,data);}else{igc.SendBroadcastMessage(tag,data);}}public virtual void Update(string listenerId,UpdateType updateSource){if(updateSource==UpdateType.IGC){IMyMessageProvider listener=igc.UnicastListener;if(listeners.ContainsKey(listenerId)){listener=listeners[listenerId];}while(listener.HasPendingMessage){var message=listener.AcceptMessage();if(actions.ContainsKey(message.Tag)){actions[message.Tag](message);}}}}}public class Transmitter2:Transmitter{const int TIMEOUT_SWITCH_ON=200;const int TIMEOUT_SWITCH_OFF=200;public const int MIN_RANGE=10;public const int MAX_RANGE=50000;private DateTime?timestampSwitchOn=null;private DateTime?timestampSwitchOff=null;private readonly Queue<Action>messageQueue=new Queue<Action>();public Transmitter2(IMyIntergridCommunicationSystem igc,IMyRadioAntenna[]antennas):base(igc,antennas){foreach(var a in antennas){a.Radius=MIN_RANGE;}}public override void Send(string tag,string data="",long?destination=null){if(destination.HasValue){messageQueue.Enqueue(()=>igc.SendUnicastMessage(destination.Value,tag,data));}else{messageQueue.Enqueue(()=>igc.SendBroadcastMessage(tag,data));}if(!timestampSwitchOn.HasValue){if(timestampSwitchOff.HasValue){timestampSwitchOff=DateTime.UtcNow.AddMilliseconds(TIMEOUT_SWITCH_OFF);}else{foreach(var a in antennas){a.Radius=MAX_RANGE;}timestampSwitchOn=DateTime.UtcNow.AddMilliseconds(TIMEOUT_SWITCH_ON);}}}public override void Update(string listenerId,UpdateType updateSource){base.Update(listenerId,updateSource);switch(updateSource){case UpdateType.Update1:case UpdateType.Update10:case UpdateType.Update100:var now=DateTime.UtcNow;if(timestampSwitchOn.HasValue&&now>timestampSwitchOn){timestampSwitchOn=null;timestampSwitchOff=now.AddMilliseconds(TIMEOUT_SWITCH_OFF);while(messageQueue.Any()){messageQueue.Dequeue()();}}else if(timestampSwitchOff.HasValue&&now>timestampSwitchOff){timestampSwitchOff=null;foreach(var a in antennas){a.Radius=MIN_RANGE;}}break;}}}public class TargetInfo{const int HIT_POINT_DEPTH=5;public MyDetectedEntityInfo Entity{get;private set;}public DateTime Timestamp{get;private set;}public DateTime NextScan{get;private set;}public Vector3D HitPosRelative{get;private set;}public Vector3D GetHitPosWorld(){return Entity.Position+Vector3D.Transform(HitPosRelative,Entity.Orientation);}public TargetInfo(MyDetectedEntityInfo entity=default(MyDetectedEntityInfo),DateTime timestamp=default(DateTime),DateTime nextScan=default(DateTime),Vector3D hitPosRelative=default(Vector3D)){Entity=entity;Timestamp=timestamp;NextScan=nextScan;HitPosRelative=hitPosRelative;}public TargetInfo Update(MyDetectedEntityInfo entity,DateTime timestamp,DateTime nextScan){Entity=entity;Timestamp=timestamp;NextScan=nextScan;return this;}public void UpdateNextScan(DateTime nextScan){NextScan=nextScan;}public static TargetInfo CreateTargetInfo(MyDetectedEntityInfo entity,Vector3D camPos,DateTime timestamp,DateTime?nextScan=null){var relativeHitPos=default(Vector3D);if(entity.HitPosition.HasValue){var hitPos=entity.HitPosition.Value;var correctedHitPos=hitPos+Vector3D.Normalize(hitPos-camPos)*HIT_POINT_DEPTH;var invertedMatrix=MatrixD.Invert(entity.Orientation);relativeHitPos=Vector3D.Transform(correctedHitPos-entity.Position,invertedMatrix);}return new TargetInfo(entity,timestamp,nextScan??timestamp,relativeHitPos);}}public static class Serializer{const char DIV=';';public class StringReader{private readonly string[]lines;private int nextPos=0;public StringReader(string value){lines=value.Split('\n');}public string GetNextLine(){return nextPos>=lines.Length?"":lines[nextPos++];}}public static void SerializeVector3D(Vector3D v,StringBuilder sb){sb.AppendLine(v.ToString());}public static void SerializeDateTime(DateTime d,StringBuilder sb){sb.AppendLine(d.ToBinary().ToString());}public static void SerializeMatrixD(MatrixD m,StringBuilder sb){var a=new double[]{m.M11,m.M12,m.M13,m.M14,m.M21,m.M22,m.M23,m.M24,m.M31,m.M32,m.M33,m.M34,m.M41,m.M42,m.M43,m.M44,};sb.AppendLine(string.Join(DIV.ToString(),a));}public static void SerializeMyDetectedEntityInfo(MyDetectedEntityInfo entity,StringBuilder sb){sb.AppendLine(entity.EntityId.ToString());sb.AppendLine(entity.Type.ToString());sb.AppendLine(entity.HitPosition?.ToString()??string.Empty);SerializeMatrixD(entity.Orientation,sb);sb.AppendLine(new Vector3D(entity.Velocity).ToString());sb.AppendLine(entity.Relationship.ToString());sb.AppendLine(entity.BoundingBox.Min.ToString());sb.AppendLine(entity.BoundingBox.Max.ToString());sb.AppendLine(entity.TimeStamp.ToString());}public static void SerializeTargetInfo(TargetInfo t,StringBuilder sb){SerializeMyDetectedEntityInfo(t.Entity,sb);SerializeVector3D(t.HitPosRelative,sb);SerializeDateTime(t.Timestamp,sb);}public static void SerializeTargetInfoArray(TargetInfo[]a,StringBuilder sb){sb.AppendLine(a.Length.ToString());foreach(var t in a){SerializeTargetInfo(t,sb);}}public static bool TryParseMatrixD(StringReader reader,out MatrixD m){try{var a=reader.GetNextLine().Split(DIV).Select(s=>double.Parse(s)).ToArray();m=new MatrixD(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]);return true;}catch{m=MatrixD.Zero;return false;}}public static bool TryParseNullableVector3D(StringReader reader,out Vector3D?v){var str=reader.GetNextLine();if(string.IsNullOrEmpty(str)){v=null;return true;}Vector3D tmp;if(Vector3D.TryParse(str,out tmp)){v=tmp;return true;}v=null;return false;}public static bool TryParseBoundingBoxD(StringReader reader,out BoundingBoxD b){string strMin=reader.GetNextLine();string strMax=reader.GetNextLine();Vector3D min,max;if(Vector3D.TryParse(strMin,out min)&&Vector3D.TryParse(strMax,out max)){b=new BoundingBoxD(min,max);return true;}b=new BoundingBoxD();return false;}public static bool TryParseMyDetectedEntityInfo(StringReader reader,out MyDetectedEntityInfo entity){var success=true;long entityId;success&=long.TryParse(reader.GetNextLine(),out entityId);MyDetectedEntityType type;success&=MyDetectedEntityType.TryParse(reader.GetNextLine(),out type);Vector3D?hitPosition;success&=TryParseNullableVector3D(reader,out hitPosition);MatrixD orientation;success&=TryParseMatrixD(reader,out orientation);Vector3D velocity;success&=Vector3D.TryParse(reader.GetNextLine(),out velocity);MyRelationsBetweenPlayerAndBlock relationship;success&=MyRelationsBetweenPlayerAndBlock.TryParse(reader.GetNextLine(),out relationship);BoundingBoxD boundingBox;success&=TryParseBoundingBoxD(reader,out boundingBox);long timestamp;success&=long.TryParse(reader.GetNextLine(),out timestamp);entity=success?new MyDetectedEntityInfo(entityId,string.Empty,type,hitPosition,orientation,velocity,relationship,boundingBox,timestamp):new MyDetectedEntityInfo();return success;}public static bool TryParseVector3D(StringReader reader,out Vector3D v){return Vector3D.TryParse(reader.GetNextLine(),out v);}public static bool TryParseDateTime(StringReader reader,out DateTime d){long ts;if(long.TryParse(reader.GetNextLine(),out ts)){d=DateTime.FromBinary(ts);return true;}d=DateTime.MinValue;return false;}public static bool TryParseTargetInfo(StringReader reader,out TargetInfo targetInfo){targetInfo=new TargetInfo();MyDetectedEntityInfo entity;if(!TryParseMyDetectedEntityInfo(reader,out entity))return false;Vector3D hitPos;if(!TryParseVector3D(reader,out hitPos))return false;DateTime timestamp;if(!TryParseDateTime(reader,out timestamp))return false;targetInfo=new TargetInfo(entity,timestamp,timestamp,hitPos);return true;}public static bool TryParseTargetInfoArray(StringReader reader,out TargetInfo[]result){TargetInfo target;int length;if(!int.TryParse(reader.GetNextLine(),out length)){result=null;return false;}result=new TargetInfo[length];for(var i=0;i<length;i++){if(TryParseTargetInfo(reader,out target)){result[i]=target;}else{result=null;return false;}}return true;}}public static class Helpers{public class InterceptResult{public Vector3D Position;public double TimeMs;}public static InterceptResult CalculateInterceptPoint(Vector3D ownPosition,double interceptSpeed,Vector3D targetPosition,Vector3D targetVelocity){Vector3D directionToTarget=Vector3D.Normalize(targetPosition-ownPosition);double targetSpeedlOrth=Vector3D.Dot(targetVelocity,directionToTarget);Vector3D targetVelOrth=directionToTarget*targetSpeedlOrth;Vector3D targetVelTang=targetVelocity-targetVelOrth;double targetSpeedlTang=targetVelTang.Length();if(targetSpeedlTang>=interceptSpeed){return null;}double missileSpeedTang=targetSpeedlTang;double missileSpeedOrth=Math.Sqrt(interceptSpeed*interceptSpeed-missileSpeedTang*missileSpeedTang);if(targetSpeedlOrth>=missileSpeedOrth){return null;}double timeS=Vector3D.Distance(ownPosition,targetPosition)/(missileSpeedOrth-targetSpeedlOrth);Vector3D point=targetPosition+targetVelocity*timeS;return new InterceptResult{Position=point,TimeMs=timeS*1000};}}public class DirectionController2{public const double MIN_SPEED=50;public const float DEFAULT_FACTOR=2;readonly IMyShipController remoteControl;readonly IEnumerable<IMyGyro>gyroList;readonly float factor;public DirectionController2(IMyShipController remoteControl,IEnumerable<IMyGyro>gyroList,float factor=DEFAULT_FACTOR){this.remoteControl=remoteControl;this.gyroList=gyroList;this.factor=factor;}public void ICBM(MyDetectedEntityInfo target){var grav=remoteControl.GetNaturalGravity();var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var ownSpeed=Math.Max(velocity.Length(),MIN_SPEED);var point=Helpers.CalculateInterceptPoint(ownPos,ownSpeed,target.Position,target.Velocity);var targetPos=point==null?target.Position:point.Position;var targetVector=targetPos-ownPos;if(grav.IsZero()||targetVector.Length()<3500){Aim(targetPos);}else{Vector3D direction=CompensateSideVelocity(grav,targetVector);var axis=GetAxis(remoteControl.WorldMatrix.Forward,direction);SetGyroByAxis(axis,gyroList,factor);}}public void KeepHorizon(Vector3D?grav=null){var direction=grav??remoteControl.GetNaturalGravity();if(!direction.IsZero()){var axis=GetAxis(remoteControl.WorldMatrix.Down,direction);SetGyroByAxis(axis,gyroList,factor);}}public void Aim(Vector3D targetPos){var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var targetVector=CompensateSideVelocity(velocity,targetPos-ownPos);var axis=GetAxis(remoteControl.WorldMatrix.Forward,targetVector);SetGyroByAxis(axis,gyroList,factor);}public bool Intercept(Vector3D targetPosition,Vector3 targetVelocity){var ownPos=remoteControl.GetPosition();var velocity=remoteControl.GetShipVelocities().LinearVelocity;var ownSpeed=Math.Max(velocity.Length(),MIN_SPEED);var interceptPoint=Helpers.CalculateInterceptPoint(ownPos,ownSpeed,targetPosition,targetVelocity);var aimingPointPosition=interceptPoint?.Position??targetPosition;var direction=aimingPointPosition-ownPos;var compensatedTargetVector=CompensateSideVelocity(velocity,direction);var axis=GetAxis(remoteControl.WorldMatrix.Forward,compensatedTargetVector);SetGyroByAxis(axis,gyroList,factor);return interceptPoint!=null;}public bool InterceptShot(MyDetectedEntityInfo target,double bulletSpeed){var ownPos=remoteControl.GetPosition();var ownVelocity=remoteControl.GetShipVelocities().LinearVelocity;var relativeTargetVelocity=target.Velocity-ownVelocity;var point=Helpers.CalculateInterceptPoint(ownPos,bulletSpeed,target.Position,relativeTargetVelocity);var targetVector=point==null?(target.Position-ownPos):(point.Position-ownPos);var axis=GetAxis(remoteControl.WorldMatrix.Forward,targetVector);SetGyroByAxis(axis,gyroList,factor);return point!=null;}public static Vector3D CompensateSideVelocity(Vector3D velocity,Vector3D targetVector,float ratio=1){var sideVelocity=Vector3D.Reject(velocity,Vector3D.Normalize(targetVector));var sameDirection=Vector3D.Dot(velocity,targetVector)>0;return sameDirection?velocity-(1+ratio)*sideVelocity:(1-ratio)*sideVelocity-velocity;}public static Vector3D GetAxis(Vector3D currentDirection,Vector3D targetDirection){var target=Vector3D.Normalize(targetDirection);var current=Vector3D.Normalize(currentDirection);var axis=target.Cross(current);if(target.Dot(current)<0){axis=Vector3D.Normalize(axis);}return axis;}public static void SetGyroByAxis(Vector3D axis,IEnumerable<IMyGyro>gyroList,float factor=DEFAULT_FACTOR){foreach(var gyro in gyroList){gyro.Yaw=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Up));gyro.Pitch=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Right));gyro.Roll=factor*Convert.ToSingle(axis.Dot(gyro.WorldMatrix.Backward));}}}public class Torpedo{readonly int delay;readonly int lifespan;readonly string name;readonly DirectionController2 tControl;readonly List<IMyGyro>listGyro=new List<IMyGyro>();readonly List<IMyThrust>listEngine=new List<IMyThrust>();readonly List<IMyGasGenerator>listH2Gen=new List<IMyGasGenerator>();readonly List<IMyWarhead>listWarhead=new List<IMyWarhead>();readonly IMyRemoteControl tRemote;readonly IMyShipMergeBlock tClamp;DateTime startTime=DateTime.MaxValue;DateTime deathTime=DateTime.MaxValue;public string Name=>name;public Vector3D Position=>tRemote.GetPosition();public double GetSpeed(DateTime now)=>Started&&IsAlive(now)?tRemote.GetShipSpeed():0;public bool IsReady=>listEngine.Any()&&listGyro.Any()&&tRemote!=null&&tClamp!=null;public bool Started{get;private set;}public LaunchStage GetStage(DateTime now)=>!IsAlive(now)?LaunchStage.Dead:Started?LaunchStage.Started:IsReady?LaunchStage.Ready:LaunchStage.Invalid;public long EntityId=>(tRemote?.EntityId).GetValueOrDefault();public bool IsAlive(DateTime now)=>tRemote.IsFunctional&&listEngine.All(e=>e.IsFunctional&&e.CubeGrid.EntityId==tRemote.CubeGrid.EntityId)&&listGyro.All(g=>g.IsFunctional&&g.CubeGrid.EntityId==tRemote.CubeGrid.EntityId)&&now<deathTime;public Torpedo(IMyBlockGroup group,int delay=2000,float factor=7,int lifespan=360){name=group.Name;this.delay=delay;this.lifespan=lifespan;group.GetBlocksOfType(listGyro);group.GetBlocksOfType(listEngine);group.GetBlocksOfType(listH2Gen);group.GetBlocksOfType(listWarhead);var tmp=new List<IMyTerminalBlock>();group.GetBlocks(tmp);tClamp=tmp.FirstOrDefault(b=>b is IMyShipMergeBlock)as IMyShipMergeBlock;tRemote=tmp.FirstOrDefault(b=>b is IMyRemoteControl)as IMyRemoteControl;tControl=new DirectionController2(tRemote,listGyro,factor);}public void Start(DateTime now){startTime=now;deathTime=startTime.AddSeconds(lifespan);tClamp.Enabled=false;listGyro.ForEach(g=>{g.Enabled=true;g.GyroOverride=true;});listH2Gen.ForEach(g=>{g.Enabled=true;});listEngine.ForEach(e=>{e.Enabled=true;e.ThrustOverridePercentage=1;});Started=true;}public TorpedoStatus Update(DateTime now,TargetInfo target){double distance=0;if((now-startTime).TotalMilliseconds>delay){if(target!=null){var targetPos=target.GetHitPosWorld();tControl.Intercept(targetPos,target.Entity.Velocity);distance=(targetPos-Position).Length();if(distance<30){listWarhead.ForEach(h=>h.IsArmed=true);}}}return new TorpedoStatus{Name=name,Stage=GetStage(now),Distance=distance,};}}public class TargetTracker{public static readonly string[]names=new[]{"корова","пёс","кролик","конь","медвед","кот","болт","кабан","волк","бобр","жук","zombie","сом",};public static string GetName(long entityId){var name=names[entityId%names.Length];var index=entityId%89;return$"{name}-{index}";}const int SCAN_DELAY_MS=20;const double DISTANCE_SCAN_DEFAULT=7500;const int TARGET_RELEASE_TIMEOUT=2;const int AI_INTERCEPT_PATTERN_ID=3;static readonly HashSet<MyDetectedEntityType>targetTypes=new HashSet<MyDetectedEntityType>{MyDetectedEntityType.SmallGrid,MyDetectedEntityType.LargeGrid};readonly IMyCameraBlock[]cameras;readonly IMyOffensiveCombatBlock ai;readonly IMyFlightMovementBlock flight;private int camIndex=0;public TargetInfo Current;public Vector3D?CurrentAiTarget=>flight?.CurrentWaypoint==null?null as Vector3D?:new Vector3D(flight.CurrentWaypoint.Matrix.GetRow(3));public event Action TargetLocked;public event Action TargetReleased;public int Count{get{return cameras.Length;}}public double TotalRange{get{return cameras.Aggregate(0d,(a,c)=>a+c.AvailableScanRange);}}public TargetTracker(IMyCameraBlock[]cameras,IMyOffensiveCombatBlock ai=null,IMyFlightMovementBlock flight=null){this.cameras=cameras;foreach(var cam in this.cameras){cam.Enabled=true;cam.EnableRaycast=true;}this.ai=ai;this.flight=flight;if(ai!=null&&flight!=null){ai.Enabled=true;ai.UpdateTargetInterval=5;ai.TargetPriority=OffensiveCombatTargetPriority.Largest;ai.SelectedAttackPattern=AI_INTERCEPT_PATTERN_ID;flight.Enabled=true;flight.PrecisionMode=false;flight.AlignToPGravity=false;flight.CollisionAvoidance=false;flight.FlightMode=FlightMode.OneWay;flight.MinimalAltitude=0;flight.SpeedLimit=100;}}private static TargetInfo GetTargetInfo(DateTime now,IMyCameraBlock cam,MyDetectedEntityInfo entity){if(entity.IsEmpty()){return null;}if(!targetTypes.Contains(entity.Type)){return null;}var camPos=cam.GetPosition();return TargetInfo.CreateTargetInfo(entity,camPos,now);}public static TargetInfo Scan(DateTime now,IMyCameraBlock cam,double distance=DISTANCE_SCAN_DEFAULT){if(cam==null){return null;}var entity=cam.Raycast(distance);return GetTargetInfo(now,cam,entity);}public bool TryLockPosition(DateTime now,Vector3D targetPos){var cam=cameras.FirstOrDefault(x=>x.CanScan(targetPos));if(cam==null){return false;}var entity=cam.Raycast(targetPos);var target=GetTargetInfo(now,cam,entity);if(target==null){return false;}LockTarget(target);return true;}public void LockTarget(TargetInfo target){if(target!=null){Current=target;TargetLocked?.Invoke();}}public void Clear(){if(Current!=null){Current=null;TargetReleased?.Invoke();}}public void Update(DateTime now){if(Current==null){return;}var prevTarget=Current;if(now<prevTarget.NextScan){return;}var timePassed=now-prevTarget.Timestamp;var entity=ScanNextPosition(prevTarget,timePassed);if(entity.IsEmpty()){if(timePassed.TotalSeconds>TARGET_RELEASE_TIMEOUT){Clear();}}else{Current.Update(entity,now,now.AddMilliseconds(SCAN_DELAY_MS));}}private static Vector3D CalculateTargetLocation(TargetInfo info,TimeSpan timePassed){var target=info.Entity;return info.GetHitPosWorld()+(target.Velocity*Convert.ToSingle(timePassed.TotalSeconds));}private MyDetectedEntityInfo ScanNextPosition(TargetInfo prevTarget,TimeSpan timePassed){var calculatedTargetPos=CalculateTargetLocation(prevTarget,timePassed);var camera=GetNext(cameras,ref camIndex,cam=>cam.CanScan(calculatedTargetPos));if(camera==null){return default(MyDetectedEntityInfo);}var entity=camera.Raycast(calculatedTargetPos);if(entity.EntityId!=prevTarget.Entity.EntityId){return default(MyDetectedEntityInfo);}return entity;}public static T GetNext<T>(T[]a,ref int index,Func<T,bool>filter=null){if(a.Length==0){return default(T);}for(var count=0;count<a.Length;count++){index=(index+1)%a.Length;T block=a[index];if(filter==null||filter(block)){return block;}}return default(T);}}const int DISTANCE=15000;const int LIFESPAN=600;const string BLOCK_NAME_CAMERA="CAMERA";const string BLOCK_NAME_SOUND="SOUND";const string GROUP_PREFIX_TORPEDO="TORPEDO";readonly Grid grid;readonly Transmitter tsm;readonly TargetTracker tt;readonly IMyCameraBlock cam;readonly IMyTextSurface lcdTarget;readonly IMyTextSurface lcdSystem;readonly IMyTextSurface lcdTorpedos;readonly IMySoundBlock sound;readonly List<IMyRadioAntenna>antennas=new List<IMyRadioAntenna>();readonly List<Torpedo>torpedos=new List<Torpedo>();public Program(){grid=new Grid(GridTerminalSystem);GridTerminalSystem.GetBlocksOfType(antennas);tsm=new Transmitter2(IGC,antennas.ToArray());tsm.Subscribe(MsgTags.REMOTE_LOCK_TARGET,RemoteLock,true);tsm.Subscribe(MsgTags.REMOTE_START,RemoteStart,true);tsm.Subscribe(MsgTags.GET_STATUS,GetStatus,true);var cameras=grid.GetBlocksOfType<IMyCameraBlock>();tt=new TargetTracker(cameras);cam=GridTerminalSystem.GetBlockWithName(BLOCK_NAME_CAMERA)as IMyCameraBlock;cam.EnableRaycast=true;var list2=new List<IMyCockpit>();GridTerminalSystem.GetBlocksOfType(list2);var control=list2.FirstOrDefault(x=>x.CubeGrid.EntityId==Me.CubeGrid.EntityId);lcdTorpedos=control?.GetSurface(0);lcdTarget=control?.GetSurface(1);lcdSystem=control?.GetSurface(2);sound=GridTerminalSystem.GetBlockWithName(BLOCK_NAME_SOUND)as IMySoundBlock;if(sound!=null){sound.SelectedSound="ArcSoundBlockAlert2";sound.LoopPeriod=300;sound.Range=50;sound.Enabled=true;}Runtime.UpdateFrequency=UpdateFrequency.Update1;}private void RemoteLock(MyIGCMessage message){try{var data=message.Data.ToString();var reader=new Serializer.StringReader(data);TargetInfo target;if(Serializer.TryParseTargetInfo(reader,out target)){tt.LockTarget(target);if(tt.Current!=null){sound?.Play();}}Me.CustomData=data;}catch(Exception ex){Me.CustomData=ex.Message+"\n"+ex.StackTrace;}}private void RemoteStart(MyIGCMessage message){var now=DateTime.UtcNow;torpedos.FirstOrDefault(t=>!t.Started)?.Start(now);}private void GetStatus(MyIGCMessage message){var t=tt.Current==null?"FALSE":tt.Current.Entity.Type.ToString();var text=$"Locked: ${t}\n"+lcdTorpedos.GetText();tsm.Send(MsgTags.REMOTE_STATUS,text,message.Source);}public void Main(string argument,UpdateType updateSource){var now=DateTime.UtcNow;tsm.Update(argument,updateSource);switch(argument){case"lock":var target=TargetTracker.Scan(now,cam,DISTANCE);if(target!=null){tt.LockTarget(target);sound?.Play();}break;case"reset":tt.Clear();break;case"reload":var ids=new HashSet<long>(torpedos.Select(t=>t.EntityId));var groups=new List<IMyBlockGroup>();GridTerminalSystem.GetBlockGroups(groups,g=>g.Name.StartsWith(GROUP_PREFIX_TORPEDO));torpedos.AddRange(groups.Select(gr=>new Torpedo(gr,factor:3f,lifespan:LIFESPAN)).Where(t=>!ids.Contains(t.EntityId)));torpedos.RemoveAll(t=>!t.IsAlive(now));break;case"start":torpedos.FirstOrDefault(t=>!t.Started)?.Start(now);break;default:tt.Update(now);var state=torpedos?.Select(t=>t.Update(now,tt.Current));var text=String.Join("\n",state?.Select(s=>s.ToString()));lcdTorpedos?.WriteText(text);if(tt.Current==null&&sound?.IsWorking==true){sound?.Stop();}break;}UpdateTargetLcd();UpdateSystemLcd();}void UpdateTargetLcd(){var sb=new StringBuilder();sb.AppendLine($"Locked: {tt.Current!=null}");if(tt.Current!=null){var target=tt.Current.Entity;var distance=Vector3D.Distance(cam.GetPosition(),target.Position);sb.AppendLine($"{target.Type}\nv: {target.Velocity.Length():0.0}\ns: {distance:0.0}");}lcdTarget?.WriteText(sb.ToString());}void UpdateSystemLcd(){var sb=new StringBuilder();sb.AppendLine($"Range: {cam.AvailableScanRange:0.0}");sb.AppendLine($"Total range: {tt.TotalRange:0.0}");sb.AppendLine($"Cam count: {tt.Count}");lcdSystem.WriteText(sb.ToString());}