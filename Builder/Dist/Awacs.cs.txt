//12/30/2023 9:44:35 PM
public class RuntimeTracker{public int Capacity{get;set;}public double MaxRuntime{get;private set;}public double MaxInstructions{get;private set;}public double AverageRuntime{get;private set;}public double AverageInstructions{get;private set;}public double LastRuntime{get;private set;}public double LastInstructions{get;private set;}readonly Queue<double>runtimes=new Queue<double>();readonly Queue<double>instructions=new Queue<double>();readonly int instructionLimit;readonly MyGridProgram program;double runtimeSum=0;double instructionsSum=0;public RuntimeTracker(MyGridProgram program,int capacity=120){this.program=program;Capacity=capacity;instructionLimit=program.Runtime.MaxInstructionCount;}public void AddRuntime(){LastRuntime=program.Runtime.LastRunTimeMs;runtimes.Enqueue(LastRuntime);runtimeSum+=LastRuntime;if(runtimes.Count>Capacity){var firstRuntime=runtimes.Dequeue();runtimeSum-=firstRuntime;}AverageRuntime=runtimeSum/runtimes.Count();MaxRuntime=runtimes.Max();}public void AddInstructions(){LastInstructions=program.Runtime.CurrentInstructionCount;instructions.Enqueue(LastInstructions);instructionsSum+=LastInstructions;if(instructions.Count>Capacity){var firstInstructions=instructions.Dequeue();instructionsSum-=firstInstructions;}AverageInstructions=instructionsSum/instructions.Count();MaxInstructions=instructions.Max();}public override string ToString(){return$"Runtime: {LastRuntime:0.00}ms/{AverageRuntime:0.00}ms/{MaxRuntime:0.00}ms\n"+$"Instructions: {LastInstructions:0}/{AverageInstructions:0}/{MaxInstructions:0}\n"+$"Complexity: {AverageInstructions:0}/{instructionLimit:0} ({AverageInstructions/instructionLimit:0.00}%)";}}public class MsgTags{public const string LOCK_TARGET="@LOCK_TARGET";public const string UPDATE_TARGET_POS="@UPDATE_TARGET_POS";public const string CLEAR_TARGET_POS="@CLEAR_TARGET_POS";}public class Transmitter{private int seq=0;protected IMyIntergridCommunicationSystem igc;protected List<IMyRadioAntenna>blocks=new List<IMyRadioAntenna>();private Dictionary<string,Action<MyIGCMessage>>actions=new Dictionary<string,Action<MyIGCMessage>>();private Dictionary<string,IMyBroadcastListener>listeners=new Dictionary<string,IMyBroadcastListener>();public Transmitter(MyGridProgram program){igc=program.IGC;igc.UnicastListener.SetMessageCallback();program.GridTerminalSystem.GetBlocksOfType(blocks);blocks.ForEach(a=>{a.EnableBroadcasting=true;a.Enabled=true;});}public void Subscribe(string tag,Action<MyIGCMessage>fn,bool broadcast=false){if(broadcast){var listener=igc.RegisterBroadcastListener(tag);var listenerId=(DateTime.UtcNow.Ticks-(seq++)).ToString();listener.SetMessageCallback(listenerId);listeners[listenerId]=listener;}actions[tag]=fn;}public virtual void Send(string tag,string data="",long?destination=null){if(destination.HasValue){igc.SendUnicastMessage(destination.Value,tag,data);}else{igc.SendBroadcastMessage(tag,data);}}public virtual void Update(string listenerId,UpdateType updateSource){if(updateSource==UpdateType.IGC){IMyMessageProvider listener=igc.UnicastListener;if(listeners.ContainsKey(listenerId)){listener=listeners[listenerId];}while(listener.HasPendingMessage){var message=listener.AcceptMessage();if(actions.ContainsKey(message.Tag)){actions[message.Tag](message);}}}}}public struct TargetInfo{public readonly MyDetectedEntityInfo Entity;public readonly Vector3D HitPos;public readonly DateTime Timestamp;public readonly double ScanDelayMs;public TargetInfo(MyDetectedEntityInfo entity=default(MyDetectedEntityInfo),DateTime timestamp=default(DateTime),double scanDelayMs=default(double),Vector3D hitPos=default(Vector3D)){Entity=entity;Timestamp=timestamp;ScanDelayMs=scanDelayMs;HitPos=hitPos;}public TargetInfo Update(MyDetectedEntityInfo entity,DateTime timestamp,double scanDelayMs){return new TargetInfo(entity,timestamp,scanDelayMs,HitPos);}public static TargetInfo CreateTargetInfo(MyDetectedEntityInfo entity,DateTime timestamp,Vector3D camPos){var relativeHitPos=default(Vector3D);if(entity.HitPosition.HasValue){var hitPos=entity.HitPosition.Value;var correctedHitPos=hitPos+Vector3D.Normalize(hitPos-camPos);var invertedMatrix=MatrixD.Invert(entity.Orientation);relativeHitPos=Vector3D.Transform(correctedHitPos-entity.Position,invertedMatrix);}return new TargetInfo(entity,timestamp,0,relativeHitPos);}}public static class Serializer{const char DIV=';';public class StringReader{private readonly string[]lines;private int nextPos=0;public StringReader(string value){lines=value.Split('\n');}public string GetNextLine(){return lines[nextPos++];}}public static void SerializeVector3D(Vector3D v,StringBuilder sb){sb.AppendLine(v.ToString());}public static void SerializeDateTime(DateTime d,StringBuilder sb){sb.AppendLine(d.ToBinary().ToString());}public static void SerializeMatrixD(MatrixD m,StringBuilder sb){var a=new double[]{m.M11,m.M12,m.M13,m.M14,m.M21,m.M22,m.M23,m.M24,m.M31,m.M32,m.M33,m.M34,m.M41,m.M42,m.M43,m.M44,};sb.AppendLine(string.Join(DIV.ToString(),a));}public static void SerializeMyDetectedEntityInfo(MyDetectedEntityInfo entity,StringBuilder sb){sb.AppendLine(entity.EntityId.ToString());sb.AppendLine(entity.Type.ToString());sb.AppendLine(entity.HitPosition?.ToString()??string.Empty);SerializeMatrixD(entity.Orientation,sb);sb.AppendLine(new Vector3D(entity.Velocity).ToString());sb.AppendLine(entity.Relationship.ToString());sb.AppendLine(entity.BoundingBox.Min.ToString());sb.AppendLine(entity.BoundingBox.Max.ToString());sb.AppendLine(entity.TimeStamp.ToString());}public static void SerializeTargetInfo(TargetInfo t,StringBuilder sb){SerializeMyDetectedEntityInfo(t.Entity,sb);SerializeVector3D(t.HitPos,sb);SerializeDateTime(t.Timestamp,sb);}public static bool TryParseMatrixD(StringReader reader,out MatrixD m){try{var a=reader.GetNextLine().Split(DIV).Select(s=>double.Parse(s)).ToArray();m=new MatrixD(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]);return true;}catch{m=MatrixD.Zero;return false;}}public static bool TryParseNullableVector3D(StringReader reader,out Vector3D?v){var str=reader.GetNextLine();if(string.IsNullOrEmpty(str)){v=null;return true;}Vector3D tmp;if(Vector3D.TryParse(str,out tmp)){v=tmp;return true;}v=null;return false;}public static bool TryParseBoundingBoxD(StringReader reader,out BoundingBoxD b){string strMin=reader.GetNextLine();string strMax=reader.GetNextLine();Vector3D min,max;if(Vector3D.TryParse(strMin,out min)&&Vector3D.TryParse(strMax,out max)){b=new BoundingBoxD(min,max);return true;}b=new BoundingBoxD();return false;}public static bool TryParseMyDetectedEntityInfo(StringReader reader,out MyDetectedEntityInfo entity){var success=true;long entityId;success&=long.TryParse(reader.GetNextLine(),out entityId);MyDetectedEntityType type;success&=MyDetectedEntityType.TryParse(reader.GetNextLine(),out type);Vector3D?hitPosition;success&=TryParseNullableVector3D(reader,out hitPosition);MatrixD orientation;success&=TryParseMatrixD(reader,out orientation);Vector3D velocity;success&=Vector3D.TryParse(reader.GetNextLine(),out velocity);MyRelationsBetweenPlayerAndBlock relationship;success&=MyRelationsBetweenPlayerAndBlock.TryParse(reader.GetNextLine(),out relationship);BoundingBoxD boundingBox;success&=TryParseBoundingBoxD(reader,out boundingBox);long timestamp;success&=long.TryParse(reader.GetNextLine(),out timestamp);entity=success?new MyDetectedEntityInfo(entityId,string.Empty,type,hitPosition,orientation,velocity,relationship,boundingBox,timestamp):new MyDetectedEntityInfo();return success;}public static bool TryParseVector3D(StringReader reader,out Vector3D v){return Vector3D.TryParse(reader.GetNextLine(),out v);}public static bool TryParseDateTime(StringReader reader,out DateTime d){long ts;if(long.TryParse(reader.GetNextLine(),out ts)){d=DateTime.FromBinary(ts);return true;}d=DateTime.MinValue;return false;}public static bool TryParseTargetInfo(StringReader reader,out TargetInfo targetInfo){targetInfo=new TargetInfo();MyDetectedEntityInfo entity;if(!TryParseMyDetectedEntityInfo(reader,out entity))return false;Vector3D hitPos;if(!TryParseVector3D(reader,out hitPos))return false;DateTime timestamp;if(!TryParseDateTime(reader,out timestamp))return false;targetInfo=new TargetInfo(entity,timestamp,0,hitPos);return true;}}public class BlockArray<T>where T:class,IMyTerminalBlock{MyGridProgram program;Action<T>init;private List<T>list=new List<T>();private int index=0;public int Count=>list.Count;public T1 Aggregate<T1>(T1 a,Func<T1,T,T1>fn)=>list.Aggregate(a,fn);public BlockArray(MyGridProgram program,Action<T>init=null){this.program=program;this.init=init;UpdateBlocks();}public void UpdateBlocks(){index=0;list=new List<T>();program.GridTerminalSystem.GetBlocksOfType(list);list.ForEach(init);}public void ForEach(Action<T>fn=null){if(fn!=null){list.ForEach(fn);}}public T GetNext(Func<T,bool>filter=null){for(var count=0;count<list.Count;count++){index++;if(index>=list.Count){index=0;}T block=list[index];if(filter==null||filter(block)){return block;}}return null;}}public class TargetTracker{const double DISTANCE_RESERVE=50;const double DISTANCE_SCAN_DEFAULT=5000;static readonly HashSet<MyDetectedEntityType>targetTypes=new HashSet<MyDetectedEntityType>{MyDetectedEntityType.SmallGrid,MyDetectedEntityType.LargeGrid};public static TargetInfo?Scan(IMyCameraBlock cam,double distance=DISTANCE_SCAN_DEFAULT,bool onlyEnemies=false){if(cam==null){return null;}var target=cam.Raycast(distance);if(target.IsEmpty()){return null;}if(!targetTypes.Contains(target.Type)){return null;}if(onlyEnemies&&target.Relationship!=MyRelationsBetweenPlayerAndBlock.Enemies){return null;}var camPos=cam.GetPosition();return TargetInfo.CreateTargetInfo(target,DateTime.UtcNow,camPos);}private BlockArray<IMyCameraBlock>camArray;public TargetInfo?Current;static Vector3D CalculateTargetLocation(TargetInfo info,TimeSpan timePassed){var target=info.Entity;return target.Position+(target.Velocity*Convert.ToSingle(timePassed.TotalSeconds))+Vector3D.Transform(info.HitPos,target.Orientation);}public TargetTracker(MyGridProgram program){camArray=new BlockArray<IMyCameraBlock>(program,cam=>{cam.Enabled=true;cam.EnableRaycast=true;});}public int Count{get{return camArray.Count;}}public double TotalRange{get{return camArray.Aggregate<double>(0,(a,c)=>a+c.AvailableScanRange);}}public void UpdateCamArray(){camArray.UpdateBlocks();}public void LockOn(TargetInfo target){Current=target;}public void Clear(){Current=null;}private TargetInfo?TryGetUpdatedEntity(TargetInfo prevTarget,TimeSpan timePassed,DateTime now){var calculatedTargetPos=CalculateTargetLocation(prevTarget,timePassed);var camera=camArray.GetNext(cam=>cam.CanScan(calculatedTargetPos));if(camera==null){return null;}var target=camera.Raycast(calculatedTargetPos);if(target.IsEmpty()||target.EntityId!=prevTarget.Entity.EntityId){return null;}var camPos=camera.GetPosition();var distance=(target.Position-camPos).Length()+DISTANCE_RESERVE;var scanDelayMs=distance/camArray.Count/2;return prevTarget.Update(target,now,scanDelayMs);}public void Update(){if(!Current.HasValue){return;}var now=DateTime.UtcNow;var prevTarget=Current.Value;var timePassed=now-prevTarget.Timestamp;if(timePassed.TotalMilliseconds<prevTarget.ScanDelayMs){return;}var target=TryGetUpdatedEntity(prevTarget,timePassed,now);if(target.HasValue){Current=target.Value;}else if(timePassed.TotalSeconds>2){Clear();}}}const int DISTANCE=15000;bool onlyEnemies=false;readonly RuntimeTracker tracker;readonly IMyTextSurface lcd;IMyTextSurface lcdTarget;IMyTextSurface lcdSystem;readonly Transmitter tsm;readonly TargetTracker tt;readonly IMyCameraBlock cam;readonly IMySoundBlock sound;public Program(){tracker=new RuntimeTracker(this);lcd=Me.GetSurface(1);lcd.ContentType=ContentType.TEXT_AND_IMAGE;tsm=new Transmitter(this);tsm.Subscribe(MsgTags.LOCK_TARGET,RemoteLock,true);tt=new TargetTracker(this);cam=GridTerminalSystem.GetBlockWithName("CAMERA")as IMyCameraBlock;cam.EnableRaycast=true;var list2=new List<IMyCockpit>();GridTerminalSystem.GetBlocksOfType(list2);var control=list2.FirstOrDefault(x=>x.CubeGrid.EntityId==Me.CubeGrid.EntityId);lcdTarget=control?.GetSurface(0);lcdSystem=control?.GetSurface(3);sound=GridTerminalSystem.GetBlockWithName("SOUND")as IMySoundBlock;if(sound!=null){sound.SelectedSound="ArcSoundBlockAlert2";sound.LoopPeriod=30;sound.Range=20;sound.Enabled=true;}Runtime.UpdateFrequency=UpdateFrequency.Update1;}private void RemoteLock(MyIGCMessage message){try{var data=message.Data.ToString();var reader=new Serializer.StringReader(data);TargetInfo target;if(Serializer.TryParseTargetInfo(reader,out target)){tt.LockOn(target);if(tt.Current.HasValue){sound?.Play();}}Me.CustomData=data;}catch(Exception ex){Me.CustomData=ex.Message+"\n"+ex.StackTrace;}}public void Main(string argument,UpdateType updateSource){tracker.AddRuntime();tsm.Update(argument,updateSource);switch(argument){case"filter":onlyEnemies=!onlyEnemies;break;case"lock":var target=TargetTracker.Scan(cam,DISTANCE,onlyEnemies);if(target.HasValue){tt.LockOn(target.Value);sound?.Play();}break;case"reset":tt.Clear();break;default:tt.Update();if(tt.Current.HasValue){var msg=new StringBuilder();Serializer.SerializeTargetInfo(tt.Current.Value,msg);tsm.Send(MsgTags.UPDATE_TARGET_POS,msg.ToString());}else{tsm.Send(MsgTags.CLEAR_TARGET_POS);if(sound?.IsWorking==true){sound?.Stop();}}break;}UpdateTargetLcd();UpdateSystemLcd();tracker.AddInstructions();lcd.WriteText(tracker.ToString());}void UpdateTargetLcd(){var sb=new StringBuilder();sb.AppendLine($"Locked: {tt.Current.HasValue}");if(tt.Current.HasValue){var target=tt.Current.Value.Entity;var distance=Vector3D.Distance(cam.GetPosition(),target.Position);sb.AppendLine($"{target.Type}\nV={target.Velocity.Length():0.0}\nS={distance:0.0}");}lcdTarget?.WriteText(sb.ToString());}void UpdateSystemLcd(){var filter=onlyEnemies?"Enemies":"All";var sb=new StringBuilder();sb.AppendLine($"Range: {cam.AvailableScanRange:0.0}");sb.AppendLine($"Total range: {tt.TotalRange:0.0}");sb.AppendLine($"Cam count: {tt.Count}");sb.AppendLine($"Filter: {filter}");lcdSystem.WriteText(sb.ToString());}