//9/27/2023 11:19:32 PM
public static class Helpers{public class InterceptResult{public Vector3D Position;public double TimeMs;}public static InterceptResult CalculateInterceptPoint(Vector3D ownPosition,double interceptSpeed,Vector3D targetPosition,Vector3D targetVelocity){Vector3D directionToTarget=Vector3D.Normalize(targetPosition-ownPosition);double targetSpeedlOrth=Vector3D.Dot(targetVelocity,directionToTarget);Vector3D targetVelOrth=directionToTarget*targetSpeedlOrth;Vector3D targetVelTang=targetVelocity-targetVelOrth;double targetSpeedlTang=targetVelTang.Length();if(targetSpeedlTang>=interceptSpeed){return null;}double missileSpeedTang=targetSpeedlTang;double missileSpeedOrth=Math.Sqrt(interceptSpeed*interceptSpeed-missileSpeedTang*missileSpeedTang);if(targetSpeedlOrth>=missileSpeedOrth){return null;}double timeS=Vector3D.Distance(ownPosition,targetPosition)/(missileSpeedOrth-targetSpeedlOrth);Vector3D point=targetPosition+targetVelocity*timeS;return new InterceptResult{Position=point,TimeMs=timeS*1000};}}public class DirectionController{public const double MIN_SPEED=50;IMyShipController remoteControl;public DirectionController(IMyShipController remoteControl){this.remoteControl=remoteControl;}public struct Directions{public double Pitch;public double Yaw;public double Roll;public override string ToString(){return string.Format("Pitch: {0:0.0}\nYaw: {1:0.0}\nRoll: {2:0.0}",Pitch,Yaw,Roll);}}const double pi2=Math.PI/2;static double ApplySign(double sign,double value){return sign>=0?value:-value;}public static Vector3D CustomReflect(Vector3D V1,Vector3D V2){var reflectedVector=V1-2*Vector3D.Reject(V1,Vector3D.Normalize(V2));var sameDirection=Vector3D.Dot(reflectedVector,V2)>0;return sameDirection?reflectedVector:-V1;}public Directions GetNavAngle(Vector3D targetVector){var orientation=remoteControl.WorldMatrix;var velocity=remoteControl.GetShipVelocities().LinearVelocity;var reflectedVector=CustomReflect(velocity,targetVector);var dirTarget=Vector3D.Normalize(reflectedVector);var prj2forward=Vector3D.Dot(dirTarget,orientation.Forward);var prj2up=Vector3D.Dot(dirTarget,orientation.Up);var prj2upAbs=Math.Abs(prj2up);var prj2right=Vector3D.Dot(dirTarget,orientation.Right);var prj2rightAbs=Math.Abs(prj2right);var anglePitch=pi2-Math.Acos(prj2upAbs);var angleYaw=pi2-Math.Acos(prj2rightAbs);if(prj2forward<0){if(prj2rightAbs<=prj2upAbs){anglePitch=Math.PI-anglePitch;}else{angleYaw=Math.PI-angleYaw;}}var pitch=ApplySign(prj2up,anglePitch);var yaw=ApplySign(prj2right,angleYaw);return new Directions{Pitch=pitch,Yaw=yaw,};}public Directions GetTargetAngle(Vector3D targetPos){var ownPos=remoteControl.GetPosition();var targetVector=targetPos-ownPos;return GetNavAngle(targetVector);}public Directions GetInterceptAngle(MyDetectedEntityInfo target){var ownPos=remoteControl.GetPosition();var ownSpeed=Math.Max(remoteControl.GetShipSpeed(),MIN_SPEED);var point=Helpers.CalculateInterceptPoint(ownPos,ownSpeed,target.Position,target.Velocity);var direction=point==null?new Vector3D(target.Velocity):(point.Position-ownPos);return GetNavAngle(direction);}}public class BlockArray<T>where T:class,IMyTerminalBlock{MyGridProgram program;Action<T>init;private List<T>list=new List<T>();private int index=0;public int Count=>list.Count;public BlockArray(MyGridProgram program,Action<T>init=null){this.program=program;this.init=init;UpdateBlocks();}public void UpdateBlocks(){list=new List<T>();index=0;var tmp=new List<IMyTerminalBlock>();program.GridTerminalSystem.GetBlocks(tmp);foreach(var x in tmp){var block=x as T;if(block!=null){list.Add(block);init(block);}}}public void ForEach(Action<T>fn=null){if(fn!=null){list.ForEach(fn);}}public T GetNext(Func<T,bool>filter=null){for(var count=0;count<list.Count;count++){index++;if(index>=list.Count){index=0;}T block=list[index];if(filter==null||filter(block)){return block;}}return null;}}public class TargetTracker{const double DISTANCE_RESERVE=50;const double DISTANCE_SCAN_DEFAULT=5000;static readonly HashSet<MyDetectedEntityType>targetTypes=new HashSet<MyDetectedEntityType>{MyDetectedEntityType.SmallGrid,MyDetectedEntityType.LargeGrid};public struct TargetInfo{public readonly MyDetectedEntityInfo Entity;public readonly Vector3D HitPos;public readonly DateTime Timestamp;public readonly double ScanDelayMs;public TargetInfo(MyDetectedEntityInfo entity=default(MyDetectedEntityInfo),DateTime timestamp=default(DateTime),double scanDelayMs=default(double),Vector3D hitPos=default(Vector3D)){Entity=entity;Timestamp=timestamp;ScanDelayMs=scanDelayMs;HitPos=hitPos;}public TargetInfo Update(MyDetectedEntityInfo entity,DateTime timestamp,double scanDelayMs){return new TargetInfo(entity,timestamp,scanDelayMs,HitPos);}}public static TargetInfo?Scan(IMyCameraBlock cam,double distance=DISTANCE_SCAN_DEFAULT,bool onlyEnemies=false){if(cam==null){return null;}var target=cam.Raycast(distance);if(target.IsEmpty()){return null;}if(!targetTypes.Contains(target.Type)){return null;}if(onlyEnemies&&target.Relationship!=MyRelationsBetweenPlayerAndBlock.Enemies){return null;}var relativeHitPos=default(Vector3D);if(target.HitPosition.HasValue){var hitPos=target.HitPosition.Value;var camPos=cam.GetPosition();var correctedHitPos=hitPos+Vector3D.Normalize(hitPos-camPos);var invertedMatrix=MatrixD.Invert(target.Orientation);relativeHitPos=Vector3D.Transform(correctedHitPos-target.Position,invertedMatrix);}return new TargetInfo(target,DateTime.UtcNow,0,relativeHitPos);}private BlockArray<IMyCameraBlock>camArray;public TargetInfo?Current;static Vector3D CalculateTargetLocation(TargetInfo info,TimeSpan timePassed){var target=info.Entity;return target.Position+(target.Velocity*Convert.ToSingle(timePassed.TotalSeconds))+Vector3D.Transform(info.HitPos,target.Orientation);}public TargetTracker(MyGridProgram program){camArray=new BlockArray<IMyCameraBlock>(program,cam=>cam.EnableRaycast=true);}public int Count{get{return camArray.Count;}}public void UpdateCamArray(){camArray.UpdateBlocks();}public void LockOn(TargetInfo target){Current=target;}public void Clear(){Current=null;}private TargetInfo?TryGetUpdatedEntity(TargetInfo prevTarget,TimeSpan timePassed,DateTime now){var calculatedTargetPos=CalculateTargetLocation(prevTarget,timePassed);var camera=camArray.GetNext(cam=>cam.CanScan(calculatedTargetPos));if(camera==null){return null;}var target=camera.Raycast(calculatedTargetPos);if(target.IsEmpty()||target.EntityId!=prevTarget.Entity.EntityId){return null;}var camPos=camera.GetPosition();var distance=(target.Position-camPos).Length()+DISTANCE_RESERVE;var scanDelayMs=distance/camArray.Count/2;return prevTarget.Update(target,now,scanDelayMs);}public void Update(){if(!Current.HasValue){return;}var now=DateTime.UtcNow;var prevTarget=Current.Value;var timePassed=now-prevTarget.Timestamp;if(timePassed.TotalMilliseconds<prevTarget.ScanDelayMs){return;}var target=TryGetUpdatedEntity(prevTarget,timePassed,now);if(target.HasValue){Current=target.Value;}else if(timePassed.TotalSeconds>2){Clear();}}}public class Torpedo{public readonly string Id=DateTime.UtcNow.Ticks.ToString();readonly int delay;readonly float factor;readonly int lifespan;readonly DirectionController tControl;readonly List<IMyGyro>listGyro=new List<IMyGyro>();readonly List<IMyThrust>listEngine=new List<IMyThrust>();readonly IMyRemoteControl tRemote;readonly IMyShipMergeBlock tClamp;DateTime startTime=DateTime.MaxValue;DateTime deathTime=DateTime.MaxValue;public Vector3D Position=>tRemote.GetPosition();public double Speed=>Started&&IsAlive?tRemote.GetShipSpeed():0;public bool IsReady=>listEngine.Any()&&listGyro.Any()&&tRemote!=null&&tClamp!=null;public bool Started{get;private set;}public long EntityId=>(tRemote?.EntityId).GetValueOrDefault();public bool IsAlive=>tRemote.IsFunctional&&listEngine.All(e=>e.IsFunctional&&e.CubeGrid.EntityId==tRemote.CubeGrid.EntityId)&&listGyro.All(g=>g.IsFunctional&&g.CubeGrid.EntityId==tRemote.CubeGrid.EntityId)&&DateTime.UtcNow<deathTime;public Torpedo(IMyBlockGroup group,int delay=3000,float factor=7,int lifespan=360){group.GetBlocksOfType(listGyro);group.GetBlocksOfType(listEngine);var tmp=new List<IMyTerminalBlock>();group.GetBlocks(tmp);tClamp=tmp.FirstOrDefault(b=>b is IMyShipMergeBlock)as IMyShipMergeBlock;tRemote=tmp.FirstOrDefault(b=>b is IMyRemoteControl)as IMyRemoteControl;tControl=new DirectionController(tRemote);this.delay=delay;this.factor=factor;this.lifespan=lifespan;}public void Start(){startTime=DateTime.UtcNow;deathTime=startTime.AddSeconds(lifespan);tClamp.Enabled=false;listGyro.ForEach(g=>{g.GyroOverride=true;});listEngine.ForEach(e=>{e.Enabled=true;e.ThrustOverridePercentage=1;});Started=true;}public void Update(TargetTracker.TargetInfo?info){if((DateTime.UtcNow-startTime).TotalMilliseconds>delay){if(info.HasValue){var target=info.Value.Entity;var d=tControl.GetInterceptAngle(target);listGyro.ForEach(g=>{g.Pitch=-Convert.ToSingle(d.Pitch)*factor;g.Yaw=Convert.ToSingle(d.Yaw)*factor;});}}}}TargetTracker tt;IMyCameraBlock cam;List<Torpedo>torpedos=new List<Torpedo>();List<IMyShipWelder>welders=new List<IMyShipWelder>();IMyTextPanel lcd1;IMyTextPanel lcd2;IMyTextPanel lcd3;IMySoundBlock sound;bool onlyEnemies=false;public Program(){tt=new TargetTracker(this);cam=GridTerminalSystem.GetBlockWithName("MAIN_CAM")as IMyCameraBlock;cam.EnableRaycast=true;GridTerminalSystem.GetBlocksOfType(welders,w=>w.CustomName.StartsWith("T_WELDER_"));lcd1=GridTerminalSystem.GetBlockWithName("LCD1")as IMyTextPanel;lcd2=GridTerminalSystem.GetBlockWithName("LCD2")as IMyTextPanel;lcd3=GridTerminalSystem.GetBlockWithName("LCD3")as IMyTextPanel;sound=GridTerminalSystem.GetBlockWithName("T_SOUND")as IMySoundBlock;Me.GetSurface(0).WriteText("TARGETING");lcd1.WriteText("");lcd2.WriteText("");lcd3.WriteText("");Runtime.UpdateFrequency=UpdateFrequency.Update1;}public void Main(string argument,UpdateType updateSource){switch(argument){case"filter":onlyEnemies=!onlyEnemies;break;case"lock":var entity=TargetTracker.Scan(cam,5000,onlyEnemies);if(entity.HasValue){tt.LockOn(entity.Value);sound?.Play();}break;case"reset":tt.Clear();break;case"reload":welders.ForEach(w=>w.Enabled=true);break;case"init":var ids=new HashSet<long>(torpedos.Select(t=>t.EntityId));var groups=new List<IMyBlockGroup>();GridTerminalSystem.GetBlockGroups(groups,g=>g.Name.StartsWith("TORPEDO"));torpedos.AddRange(groups.Select(gr=>new Torpedo(gr)).Where(t=>!ids.Contains(t.EntityId)));torpedos.RemoveAll(t=>!t.IsAlive);welders.ForEach(w=>w.Enabled=false);break;case"start":torpedos.FirstOrDefault(t=>!t.Started)?.Start();break;default:tt.Update();if(sound?.IsWorking==true&&!tt.Current.HasValue){sound?.Stop();}torpedos?.ForEach(t=>t.Update(tt.Current));break;}UpdateSystemLcd();UpdateTargetLcd();UpdateTorpedoLcd(torpedos);}void UpdateSystemLcd(){var filter=onlyEnemies?"Enemies":"All";var sb=new StringBuilder();sb.AppendLine($"Range: {cam.AvailableScanRange:0.0}");sb.AppendLine($"Cam count: {tt.Count}");sb.AppendLine($"Welders count: {welders.Count}");sb.AppendLine($"Filter: {filter}");lcd1.WriteText(sb.ToString());}void UpdateTargetLcd(){var sb=new StringBuilder();sb.AppendLine($"Locked: {tt.Current.HasValue}");if(tt.Current.HasValue){var target=tt.Current.Value.Entity;var distance=Vector3D.Distance(cam.GetPosition(),target.Position);sb.AppendLine($"- type: {target.Type}");sb.AppendLine($"- speed: {target.Velocity.Length():0.0}");sb.AppendLine($"- distance: {distance:0.0}");sb.AppendLine($"- position X: {target.Position.X:0.0}");sb.AppendLine($"- position Y: {target.Position.Y:0.0}");sb.AppendLine($"- position Z: {target.Position.Z:0.0}");}lcd2.WriteText(sb.ToString());}void UpdateTorpedoLcd(List<Torpedo>torpedos){var targetPos=tt.Current?.Entity.Position;var sb=new StringBuilder();for(var i=0;i<torpedos?.Count;i++){var t=torpedos[i];var myPos=t.Position;sb.Append($"{i+1} Speed: {t.Speed:0.0}");if(!t.Started){sb.Append(" Status: Ready");}else if(t.IsAlive){sb.Append(" Status: Active");}else{sb.Append(" Status: Dead");}if(targetPos!=null&&t.IsAlive){var distance=Vector3D.Distance(myPos,targetPos.Value);sb.Append($" Distance: {distance:0.0}");}sb.AppendLine();}lcd3.WriteText(sb.ToString());}